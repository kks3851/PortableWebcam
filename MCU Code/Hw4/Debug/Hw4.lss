
Hw4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009540  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409540  00409540  00019540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000884  20000000  00409548  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0001aeb0  20000884  00409dcc  00020884  2**2
                  ALLOC
  4 .stack        00003004  2001b734  00424c7c  00020884  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020884  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000208ae  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000cabe  00000000  00000000  00020907  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021c5  00000000  00000000  0002d3c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000070ea  00000000  00000000  0002f58a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c80  00000000  00000000  00036674  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b60  00000000  00000000  000372f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00014ce5  00000000  00000000  00037e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000eeaa  00000000  00000000  0004cb39  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004ea5d  00000000  00000000  0005b9e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003e00  00000000  00000000  000aa440  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2001e738 	.word	0x2001e738
  400004:	0040319d 	.word	0x0040319d
  400008:	00403265 	.word	0x00403265
  40000c:	00403265 	.word	0x00403265
  400010:	00403265 	.word	0x00403265
  400014:	00403265 	.word	0x00403265
  400018:	00403265 	.word	0x00403265
	...
  40002c:	00403265 	.word	0x00403265
  400030:	00403265 	.word	0x00403265
  400034:	00000000 	.word	0x00000000
  400038:	00403265 	.word	0x00403265
  40003c:	00403265 	.word	0x00403265
  400040:	00403265 	.word	0x00403265
  400044:	00403265 	.word	0x00403265
  400048:	00403265 	.word	0x00403265
  40004c:	00403265 	.word	0x00403265
  400050:	00403265 	.word	0x00403265
  400054:	00403265 	.word	0x00403265
  400058:	00403265 	.word	0x00403265
  40005c:	00000000 	.word	0x00000000
  400060:	00403265 	.word	0x00403265
  400064:	00403265 	.word	0x00403265
  400068:	00000000 	.word	0x00000000
  40006c:	004013c9 	.word	0x004013c9
  400070:	004013e1 	.word	0x004013e1
  400074:	00000000 	.word	0x00000000
  400078:	004003e9 	.word	0x004003e9
  40007c:	00403265 	.word	0x00403265
	...
  400088:	00403265 	.word	0x00403265
  40008c:	00403265 	.word	0x00403265
  400090:	00403265 	.word	0x00403265
  400094:	00403265 	.word	0x00403265
  400098:	00403265 	.word	0x00403265
  40009c:	00402f35 	.word	0x00402f35
  4000a0:	00403265 	.word	0x00403265
  4000a4:	00403265 	.word	0x00403265
	...
  4000b4:	00403265 	.word	0x00403265
  4000b8:	00403265 	.word	0x00403265
  4000bc:	00403265 	.word	0x00403265
  4000c0:	00403265 	.word	0x00403265
  4000c4:	00403265 	.word	0x00403265
  4000c8:	00403265 	.word	0x00403265

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000884 	.word	0x20000884
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00409548 	.word	0x00409548

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000888 	.word	0x20000888
  40011c:	00409548 	.word	0x00409548
  400120:	00409548 	.word	0x00409548
  400124:	00000000 	.word	0x00000000

00400128 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400128:	b480      	push	{r7}
  40012a:	b087      	sub	sp, #28
  40012c:	af00      	add	r7, sp, #0
  40012e:	60f8      	str	r0, [r7, #12]
  400130:	60b9      	str	r1, [r7, #8]
  400132:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400134:	68fa      	ldr	r2, [r7, #12]
  400136:	68bb      	ldr	r3, [r7, #8]
  400138:	019b      	lsls	r3, r3, #6
  40013a:	4413      	add	r3, r2
  40013c:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40013e:	697b      	ldr	r3, [r7, #20]
  400140:	2202      	movs	r2, #2
  400142:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400144:	697b      	ldr	r3, [r7, #20]
  400146:	f04f 32ff 	mov.w	r2, #4294967295
  40014a:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40014c:	697b      	ldr	r3, [r7, #20]
  40014e:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400150:	697b      	ldr	r3, [r7, #20]
  400152:	687a      	ldr	r2, [r7, #4]
  400154:	605a      	str	r2, [r3, #4]
}
  400156:	bf00      	nop
  400158:	371c      	adds	r7, #28
  40015a:	46bd      	mov	sp, r7
  40015c:	bc80      	pop	{r7}
  40015e:	4770      	bx	lr

00400160 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400160:	b480      	push	{r7}
  400162:	b083      	sub	sp, #12
  400164:	af00      	add	r7, sp, #0
  400166:	6078      	str	r0, [r7, #4]
  400168:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40016a:	687a      	ldr	r2, [r7, #4]
  40016c:	683b      	ldr	r3, [r7, #0]
  40016e:	019b      	lsls	r3, r3, #6
  400170:	4413      	add	r3, r2
  400172:	2205      	movs	r2, #5
  400174:	601a      	str	r2, [r3, #0]
}
  400176:	bf00      	nop
  400178:	370c      	adds	r7, #12
  40017a:	46bd      	mov	sp, r7
  40017c:	bc80      	pop	{r7}
  40017e:	4770      	bx	lr

00400180 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  400180:	b480      	push	{r7}
  400182:	b085      	sub	sp, #20
  400184:	af00      	add	r7, sp, #0
  400186:	60f8      	str	r0, [r7, #12]
  400188:	60b9      	str	r1, [r7, #8]
  40018a:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40018c:	68fa      	ldr	r2, [r7, #12]
  40018e:	68bb      	ldr	r3, [r7, #8]
  400190:	019b      	lsls	r3, r3, #6
  400192:	4413      	add	r3, r2
  400194:	331c      	adds	r3, #28
  400196:	687a      	ldr	r2, [r7, #4]
  400198:	601a      	str	r2, [r3, #0]
}
  40019a:	bf00      	nop
  40019c:	3714      	adds	r7, #20
  40019e:	46bd      	mov	sp, r7
  4001a0:	bc80      	pop	{r7}
  4001a2:	4770      	bx	lr

004001a4 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  4001a4:	b480      	push	{r7}
  4001a6:	b087      	sub	sp, #28
  4001a8:	af00      	add	r7, sp, #0
  4001aa:	60f8      	str	r0, [r7, #12]
  4001ac:	60b9      	str	r1, [r7, #8]
  4001ae:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4001b0:	68fa      	ldr	r2, [r7, #12]
  4001b2:	68bb      	ldr	r3, [r7, #8]
  4001b4:	019b      	lsls	r3, r3, #6
  4001b6:	4413      	add	r3, r2
  4001b8:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  4001ba:	697b      	ldr	r3, [r7, #20]
  4001bc:	687a      	ldr	r2, [r7, #4]
  4001be:	625a      	str	r2, [r3, #36]	; 0x24
}
  4001c0:	bf00      	nop
  4001c2:	371c      	adds	r7, #28
  4001c4:	46bd      	mov	sp, r7
  4001c6:	bc80      	pop	{r7}
  4001c8:	4770      	bx	lr
  4001ca:	bf00      	nop

004001cc <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4001cc:	b480      	push	{r7}
  4001ce:	b085      	sub	sp, #20
  4001d0:	af00      	add	r7, sp, #0
  4001d2:	6078      	str	r0, [r7, #4]
  4001d4:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4001d6:	687a      	ldr	r2, [r7, #4]
  4001d8:	683b      	ldr	r3, [r7, #0]
  4001da:	019b      	lsls	r3, r3, #6
  4001dc:	4413      	add	r3, r2
  4001de:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  4001e0:	68fb      	ldr	r3, [r7, #12]
  4001e2:	6a1b      	ldr	r3, [r3, #32]
}
  4001e4:	4618      	mov	r0, r3
  4001e6:	3714      	adds	r7, #20
  4001e8:	46bd      	mov	sp, r7
  4001ea:	bc80      	pop	{r7}
  4001ec:	4770      	bx	lr
  4001ee:	bf00      	nop

004001f0 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4001f0:	b480      	push	{r7}
  4001f2:	b08d      	sub	sp, #52	; 0x34
  4001f4:	af00      	add	r7, sp, #0
  4001f6:	60f8      	str	r0, [r7, #12]
  4001f8:	60b9      	str	r1, [r7, #8]
  4001fa:	607a      	str	r2, [r7, #4]
  4001fc:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4001fe:	2302      	movs	r3, #2
  400200:	613b      	str	r3, [r7, #16]
  400202:	2308      	movs	r3, #8
  400204:	617b      	str	r3, [r7, #20]
  400206:	2320      	movs	r3, #32
  400208:	61bb      	str	r3, [r7, #24]
  40020a:	2380      	movs	r3, #128	; 0x80
  40020c:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40020e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  400210:	0bdb      	lsrs	r3, r3, #15
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400212:	623b      	str	r3, [r7, #32]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400214:	2300      	movs	r3, #0
  400216:	62fb      	str	r3, [r7, #44]	; 0x2c
  400218:	e01a      	b.n	400250 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  40021a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40021c:	009b      	lsls	r3, r3, #2
  40021e:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400222:	4413      	add	r3, r2
  400224:	f853 3c20 	ldr.w	r3, [r3, #-32]
  400228:	68ba      	ldr	r2, [r7, #8]
  40022a:	fbb2 f3f3 	udiv	r3, r2, r3
  40022e:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  400230:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400232:	0c1b      	lsrs	r3, r3, #16
  400234:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  400236:	68fa      	ldr	r2, [r7, #12]
  400238:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40023a:	429a      	cmp	r2, r3
  40023c:	d901      	bls.n	400242 <tc_find_mck_divisor+0x52>
			return 0;
  40023e:	2300      	movs	r3, #0
  400240:	e023      	b.n	40028a <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  400242:	68fa      	ldr	r2, [r7, #12]
  400244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400246:	429a      	cmp	r2, r3
  400248:	d206      	bcs.n	400258 <tc_find_mck_divisor+0x68>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  40024a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40024c:	3301      	adds	r3, #1
  40024e:	62fb      	str	r3, [r7, #44]	; 0x2c
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400252:	2b04      	cmp	r3, #4
  400254:	d9e1      	bls.n	40021a <tc_find_mck_divisor+0x2a>
  400256:	e000      	b.n	40025a <tc_find_mck_divisor+0x6a>
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
		} else if (ul_freq >= ul_low) {
			break;
  400258:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  40025a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40025c:	2b04      	cmp	r3, #4
  40025e:	d901      	bls.n	400264 <tc_find_mck_divisor+0x74>
		return 0;
  400260:	2300      	movs	r3, #0
  400262:	e012      	b.n	40028a <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  400264:	687b      	ldr	r3, [r7, #4]
  400266:	2b00      	cmp	r3, #0
  400268:	d008      	beq.n	40027c <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  40026a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40026c:	009b      	lsls	r3, r3, #2
  40026e:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400272:	4413      	add	r3, r2
  400274:	f853 2c20 	ldr.w	r2, [r3, #-32]
  400278:	687b      	ldr	r3, [r7, #4]
  40027a:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  40027c:	683b      	ldr	r3, [r7, #0]
  40027e:	2b00      	cmp	r3, #0
  400280:	d002      	beq.n	400288 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  400282:	683b      	ldr	r3, [r7, #0]
  400284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400286:	601a      	str	r2, [r3, #0]
	}

	return 1;
  400288:	2301      	movs	r3, #1
}
  40028a:	4618      	mov	r0, r3
  40028c:	3734      	adds	r7, #52	; 0x34
  40028e:	46bd      	mov	sp, r7
  400290:	bc80      	pop	{r7}
  400292:	4770      	bx	lr

00400294 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400294:	b480      	push	{r7}
  400296:	b083      	sub	sp, #12
  400298:	af00      	add	r7, sp, #0
  40029a:	4603      	mov	r3, r0
  40029c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40029e:	4908      	ldr	r1, [pc, #32]	; (4002c0 <NVIC_EnableIRQ+0x2c>)
  4002a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4002a4:	095b      	lsrs	r3, r3, #5
  4002a6:	79fa      	ldrb	r2, [r7, #7]
  4002a8:	f002 021f 	and.w	r2, r2, #31
  4002ac:	2001      	movs	r0, #1
  4002ae:	fa00 f202 	lsl.w	r2, r0, r2
  4002b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4002b6:	bf00      	nop
  4002b8:	370c      	adds	r7, #12
  4002ba:	46bd      	mov	sp, r7
  4002bc:	bc80      	pop	{r7}
  4002be:	4770      	bx	lr
  4002c0:	e000e100 	.word	0xe000e100

004002c4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002c4:	b480      	push	{r7}
  4002c6:	b083      	sub	sp, #12
  4002c8:	af00      	add	r7, sp, #0
  4002ca:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002cc:	687b      	ldr	r3, [r7, #4]
  4002ce:	2b07      	cmp	r3, #7
  4002d0:	d825      	bhi.n	40031e <osc_get_rate+0x5a>
  4002d2:	a201      	add	r2, pc, #4	; (adr r2, 4002d8 <osc_get_rate+0x14>)
  4002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002d8:	004002f9 	.word	0x004002f9
  4002dc:	004002ff 	.word	0x004002ff
  4002e0:	00400305 	.word	0x00400305
  4002e4:	0040030b 	.word	0x0040030b
  4002e8:	0040030f 	.word	0x0040030f
  4002ec:	00400313 	.word	0x00400313
  4002f0:	00400317 	.word	0x00400317
  4002f4:	0040031b 	.word	0x0040031b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002f8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002fc:	e010      	b.n	400320 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400302:	e00d      	b.n	400320 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400304:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400308:	e00a      	b.n	400320 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40030a:	4b08      	ldr	r3, [pc, #32]	; (40032c <osc_get_rate+0x68>)
  40030c:	e008      	b.n	400320 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40030e:	4b08      	ldr	r3, [pc, #32]	; (400330 <osc_get_rate+0x6c>)
  400310:	e006      	b.n	400320 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400312:	4b08      	ldr	r3, [pc, #32]	; (400334 <osc_get_rate+0x70>)
  400314:	e004      	b.n	400320 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400316:	4b07      	ldr	r3, [pc, #28]	; (400334 <osc_get_rate+0x70>)
  400318:	e002      	b.n	400320 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40031a:	4b06      	ldr	r3, [pc, #24]	; (400334 <osc_get_rate+0x70>)
  40031c:	e000      	b.n	400320 <osc_get_rate+0x5c>
	}

	return 0;
  40031e:	2300      	movs	r3, #0
}
  400320:	4618      	mov	r0, r3
  400322:	370c      	adds	r7, #12
  400324:	46bd      	mov	sp, r7
  400326:	bc80      	pop	{r7}
  400328:	4770      	bx	lr
  40032a:	bf00      	nop
  40032c:	003d0900 	.word	0x003d0900
  400330:	007a1200 	.word	0x007a1200
  400334:	00b71b00 	.word	0x00b71b00

00400338 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400338:	b580      	push	{r7, lr}
  40033a:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_PLL1_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLBCK) {
		return pll_get_default_rate(1);
  40033c:	2006      	movs	r0, #6
  40033e:	4b04      	ldr	r3, [pc, #16]	; (400350 <sysclk_get_main_hz+0x18>)
  400340:	4798      	blx	r3
  400342:	4602      	mov	r2, r0
  400344:	4613      	mov	r3, r2
  400346:	009b      	lsls	r3, r3, #2
  400348:	4413      	add	r3, r2
  40034a:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40034c:	4618      	mov	r0, r3
  40034e:	bd80      	pop	{r7, pc}
  400350:	004002c5 	.word	0x004002c5

00400354 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400354:	b580      	push	{r7, lr}
  400356:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400358:	4b02      	ldr	r3, [pc, #8]	; (400364 <sysclk_get_cpu_hz+0x10>)
  40035a:	4798      	blx	r3
  40035c:	4603      	mov	r3, r0
  40035e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400360:	4618      	mov	r0, r3
  400362:	bd80      	pop	{r7, pc}
  400364:	00400339 	.word	0x00400339

00400368 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400368:	b580      	push	{r7, lr}
  40036a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40036c:	4b02      	ldr	r3, [pc, #8]	; (400378 <sysclk_get_peripheral_hz+0x10>)
  40036e:	4798      	blx	r3
  400370:	4603      	mov	r3, r0
  400372:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400374:	4618      	mov	r0, r3
  400376:	bd80      	pop	{r7, pc}
  400378:	00400339 	.word	0x00400339

0040037c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40037c:	b580      	push	{r7, lr}
  40037e:	b082      	sub	sp, #8
  400380:	af00      	add	r7, sp, #0
  400382:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400384:	6878      	ldr	r0, [r7, #4]
  400386:	4b03      	ldr	r3, [pc, #12]	; (400394 <sysclk_enable_peripheral_clock+0x18>)
  400388:	4798      	blx	r3
}
  40038a:	bf00      	nop
  40038c:	3708      	adds	r7, #8
  40038e:	46bd      	mov	sp, r7
  400390:	bd80      	pop	{r7, pc}
  400392:	bf00      	nop
  400394:	00401695 	.word	0x00401695

00400398 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  400398:	b480      	push	{r7}
  40039a:	b089      	sub	sp, #36	; 0x24
  40039c:	af00      	add	r7, sp, #0
  40039e:	6078      	str	r0, [r7, #4]
  4003a0:	687b      	ldr	r3, [r7, #4]
  4003a2:	61fb      	str	r3, [r7, #28]
  4003a4:	69fb      	ldr	r3, [r7, #28]
  4003a6:	61bb      	str	r3, [r7, #24]
  4003a8:	69bb      	ldr	r3, [r7, #24]
  4003aa:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4003ac:	697b      	ldr	r3, [r7, #20]
  4003ae:	095b      	lsrs	r3, r3, #5
  4003b0:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4003b2:	693b      	ldr	r3, [r7, #16]
  4003b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4003b8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4003bc:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4003be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4003c0:	69fb      	ldr	r3, [r7, #28]
  4003c2:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4003c4:	68fb      	ldr	r3, [r7, #12]
  4003c6:	f003 031f 	and.w	r3, r3, #31
  4003ca:	2101      	movs	r1, #1
  4003cc:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4003d0:	4013      	ands	r3, r2
  4003d2:	2b00      	cmp	r3, #0
  4003d4:	bf14      	ite	ne
  4003d6:	2301      	movne	r3, #1
  4003d8:	2300      	moveq	r3, #0
  4003da:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  4003dc:	4618      	mov	r0, r3
  4003de:	3724      	adds	r7, #36	; 0x24
  4003e0:	46bd      	mov	sp, r7
  4003e2:	bc80      	pop	{r7}
  4003e4:	4770      	bx	lr
  4003e6:	bf00      	nop

004003e8 <USART0_Handler>:
 volatile uint32_t input_pos_wifi = 0;
 volatile uint32_t wifi_web_setup_flag = false;
 volatile uint32_t process_flag = false;
 volatile uint32_t stream_flag = false;
 void WIFI_USART_Handler(void)
 {
  4003e8:	b580      	push	{r7, lr}
  4003ea:	b082      	sub	sp, #8
  4003ec:	af00      	add	r7, sp, #0
	 uint32_t ul_status;

	 /* Read USART status. */
	 ul_status = usart_get_status(BOARD_USART);
  4003ee:	480b      	ldr	r0, [pc, #44]	; (40041c <USART0_Handler+0x34>)
  4003f0:	4b0b      	ldr	r3, [pc, #44]	; (400420 <USART0_Handler+0x38>)
  4003f2:	4798      	blx	r3
  4003f4:	6078      	str	r0, [r7, #4]

	 /* Receive buffer is full. */
	 if (ul_status & US_CSR_RXBUFF) 
  4003f6:	687b      	ldr	r3, [r7, #4]
  4003f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  4003fc:	2b00      	cmp	r3, #0
  4003fe:	d009      	beq.n	400414 <USART0_Handler+0x2c>
	 {
		 usart_read(BOARD_USART, &received_byte_wifi);
  400400:	4908      	ldr	r1, [pc, #32]	; (400424 <USART0_Handler+0x3c>)
  400402:	4806      	ldr	r0, [pc, #24]	; (40041c <USART0_Handler+0x34>)
  400404:	4b08      	ldr	r3, [pc, #32]	; (400428 <USART0_Handler+0x40>)
  400406:	4798      	blx	r3
		 process_IncomingByte_wifi((uint8_t)received_byte_wifi);
  400408:	4b06      	ldr	r3, [pc, #24]	; (400424 <USART0_Handler+0x3c>)
  40040a:	681b      	ldr	r3, [r3, #0]
  40040c:	b2db      	uxtb	r3, r3
  40040e:	4618      	mov	r0, r3
  400410:	4b06      	ldr	r3, [pc, #24]	; (40042c <USART0_Handler+0x44>)
  400412:	4798      	blx	r3
	  } 
}
  400414:	bf00      	nop
  400416:	3708      	adds	r7, #8
  400418:	46bd      	mov	sp, r7
  40041a:	bd80      	pop	{r7, pc}
  40041c:	40024000 	.word	0x40024000
  400420:	00401d35 	.word	0x00401d35
  400424:	200008a0 	.word	0x200008a0
  400428:	00401e01 	.word	0x00401e01
  40042c:	00400431 	.word	0x00400431

00400430 <process_IncomingByte_wifi>:

void process_IncomingByte_wifi(uint8_t inByte)
{
  400430:	b480      	push	{r7}
  400432:	b083      	sub	sp, #12
  400434:	af00      	add	r7, sp, #0
  400436:	4603      	mov	r3, r0
  400438:	71fb      	strb	r3, [r7, #7]
	input_line_wifi[input_pos_wifi++] = inByte;
  40043a:	4b06      	ldr	r3, [pc, #24]	; (400454 <process_IncomingByte_wifi+0x24>)
  40043c:	681b      	ldr	r3, [r3, #0]
  40043e:	1c5a      	adds	r2, r3, #1
  400440:	4904      	ldr	r1, [pc, #16]	; (400454 <process_IncomingByte_wifi+0x24>)
  400442:	600a      	str	r2, [r1, #0]
  400444:	4904      	ldr	r1, [pc, #16]	; (400458 <process_IncomingByte_wifi+0x28>)
  400446:	79fa      	ldrb	r2, [r7, #7]
  400448:	54ca      	strb	r2, [r1, r3]

}
  40044a:	bf00      	nop
  40044c:	370c      	adds	r7, #12
  40044e:	46bd      	mov	sp, r7
  400450:	bc80      	pop	{r7}
  400452:	4770      	bx	lr
  400454:	200008a4 	.word	0x200008a4
  400458:	20000970 	.word	0x20000970

0040045c <wifi_command_response_handler>:

void wifi_command_response_handler(uint32_t ul_id, uint32_t ul_mask)
{
  40045c:	b580      	push	{r7, lr}
  40045e:	b084      	sub	sp, #16
  400460:	af00      	add	r7, sp, #0
  400462:	6078      	str	r0, [r7, #4]
  400464:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	
	process_data_wifi();
  400466:	4b0c      	ldr	r3, [pc, #48]	; (400498 <wifi_command_response_handler+0x3c>)
  400468:	4798      	blx	r3
	for (int jj = 0; jj < MAX_INPUT_WIFI; jj++) input_line_wifi[jj] = 0;
  40046a:	2300      	movs	r3, #0
  40046c:	60fb      	str	r3, [r7, #12]
  40046e:	e007      	b.n	400480 <wifi_command_response_handler+0x24>
  400470:	4a0a      	ldr	r2, [pc, #40]	; (40049c <wifi_command_response_handler+0x40>)
  400472:	68fb      	ldr	r3, [r7, #12]
  400474:	4413      	add	r3, r2
  400476:	2200      	movs	r2, #0
  400478:	701a      	strb	r2, [r3, #0]
  40047a:	68fb      	ldr	r3, [r7, #12]
  40047c:	3301      	adds	r3, #1
  40047e:	60fb      	str	r3, [r7, #12]
  400480:	68fb      	ldr	r3, [r7, #12]
  400482:	f242 720f 	movw	r2, #9999	; 0x270f
  400486:	4293      	cmp	r3, r2
  400488:	ddf2      	ble.n	400470 <wifi_command_response_handler+0x14>
	input_pos_wifi = 0;
  40048a:	4b05      	ldr	r3, [pc, #20]	; (4004a0 <wifi_command_response_handler+0x44>)
  40048c:	2200      	movs	r2, #0
  40048e:	601a      	str	r2, [r3, #0]
}
  400490:	bf00      	nop
  400492:	3710      	adds	r7, #16
  400494:	46bd      	mov	sp, r7
  400496:	bd80      	pop	{r7, pc}
  400498:	004004a5 	.word	0x004004a5
  40049c:	20000970 	.word	0x20000970
  4004a0:	200008a4 	.word	0x200008a4

004004a4 <process_data_wifi>:

void process_data_wifi(void)
{ 
  4004a4:	b580      	push	{r7, lr}
  4004a6:	af00      	add	r7, sp, #0
	WIFI_USART_Handler();
  4004a8:	4b2e      	ldr	r3, [pc, #184]	; (400564 <process_data_wifi+0xc0>)
  4004aa:	4798      	blx	r3
	if ((strstr(input_line_wifi, "File created")) || (strstr(input_line_wifi, "File deleted")) || (strstr(input_line_wifi, "Unknown command"))|| (strstr(input_line_wifi, "Command failed"))|| (strstr(input_line_wifi, "File not found")) || (strstr(input_line_wifi, "Success")) || (strstr(input_line_wifi, "In progress")) || (strstr(input_line_wifi, "None")) || (strstr(input_line_wifi, "Set OK")) || (strstr(input_line_wifi, "ZENTRI")) || (strstr(input_line_wifi, "0,0")))
  4004ac:	492e      	ldr	r1, [pc, #184]	; (400568 <process_data_wifi+0xc4>)
  4004ae:	482f      	ldr	r0, [pc, #188]	; (40056c <process_data_wifi+0xc8>)
  4004b0:	4b2f      	ldr	r3, [pc, #188]	; (400570 <process_data_wifi+0xcc>)
  4004b2:	4798      	blx	r3
  4004b4:	4603      	mov	r3, r0
  4004b6:	2b00      	cmp	r3, #0
  4004b8:	d145      	bne.n	400546 <process_data_wifi+0xa2>
  4004ba:	492e      	ldr	r1, [pc, #184]	; (400574 <process_data_wifi+0xd0>)
  4004bc:	482b      	ldr	r0, [pc, #172]	; (40056c <process_data_wifi+0xc8>)
  4004be:	4b2c      	ldr	r3, [pc, #176]	; (400570 <process_data_wifi+0xcc>)
  4004c0:	4798      	blx	r3
  4004c2:	4603      	mov	r3, r0
  4004c4:	2b00      	cmp	r3, #0
  4004c6:	d13e      	bne.n	400546 <process_data_wifi+0xa2>
  4004c8:	492b      	ldr	r1, [pc, #172]	; (400578 <process_data_wifi+0xd4>)
  4004ca:	4828      	ldr	r0, [pc, #160]	; (40056c <process_data_wifi+0xc8>)
  4004cc:	4b28      	ldr	r3, [pc, #160]	; (400570 <process_data_wifi+0xcc>)
  4004ce:	4798      	blx	r3
  4004d0:	4603      	mov	r3, r0
  4004d2:	2b00      	cmp	r3, #0
  4004d4:	d137      	bne.n	400546 <process_data_wifi+0xa2>
  4004d6:	4929      	ldr	r1, [pc, #164]	; (40057c <process_data_wifi+0xd8>)
  4004d8:	4824      	ldr	r0, [pc, #144]	; (40056c <process_data_wifi+0xc8>)
  4004da:	4b25      	ldr	r3, [pc, #148]	; (400570 <process_data_wifi+0xcc>)
  4004dc:	4798      	blx	r3
  4004de:	4603      	mov	r3, r0
  4004e0:	2b00      	cmp	r3, #0
  4004e2:	d130      	bne.n	400546 <process_data_wifi+0xa2>
  4004e4:	4926      	ldr	r1, [pc, #152]	; (400580 <process_data_wifi+0xdc>)
  4004e6:	4821      	ldr	r0, [pc, #132]	; (40056c <process_data_wifi+0xc8>)
  4004e8:	4b21      	ldr	r3, [pc, #132]	; (400570 <process_data_wifi+0xcc>)
  4004ea:	4798      	blx	r3
  4004ec:	4603      	mov	r3, r0
  4004ee:	2b00      	cmp	r3, #0
  4004f0:	d129      	bne.n	400546 <process_data_wifi+0xa2>
  4004f2:	4924      	ldr	r1, [pc, #144]	; (400584 <process_data_wifi+0xe0>)
  4004f4:	481d      	ldr	r0, [pc, #116]	; (40056c <process_data_wifi+0xc8>)
  4004f6:	4b1e      	ldr	r3, [pc, #120]	; (400570 <process_data_wifi+0xcc>)
  4004f8:	4798      	blx	r3
  4004fa:	4603      	mov	r3, r0
  4004fc:	2b00      	cmp	r3, #0
  4004fe:	d122      	bne.n	400546 <process_data_wifi+0xa2>
  400500:	4921      	ldr	r1, [pc, #132]	; (400588 <process_data_wifi+0xe4>)
  400502:	481a      	ldr	r0, [pc, #104]	; (40056c <process_data_wifi+0xc8>)
  400504:	4b1a      	ldr	r3, [pc, #104]	; (400570 <process_data_wifi+0xcc>)
  400506:	4798      	blx	r3
  400508:	4603      	mov	r3, r0
  40050a:	2b00      	cmp	r3, #0
  40050c:	d11b      	bne.n	400546 <process_data_wifi+0xa2>
  40050e:	491f      	ldr	r1, [pc, #124]	; (40058c <process_data_wifi+0xe8>)
  400510:	4816      	ldr	r0, [pc, #88]	; (40056c <process_data_wifi+0xc8>)
  400512:	4b17      	ldr	r3, [pc, #92]	; (400570 <process_data_wifi+0xcc>)
  400514:	4798      	blx	r3
  400516:	4603      	mov	r3, r0
  400518:	2b00      	cmp	r3, #0
  40051a:	d114      	bne.n	400546 <process_data_wifi+0xa2>
  40051c:	491c      	ldr	r1, [pc, #112]	; (400590 <process_data_wifi+0xec>)
  40051e:	4813      	ldr	r0, [pc, #76]	; (40056c <process_data_wifi+0xc8>)
  400520:	4b13      	ldr	r3, [pc, #76]	; (400570 <process_data_wifi+0xcc>)
  400522:	4798      	blx	r3
  400524:	4603      	mov	r3, r0
  400526:	2b00      	cmp	r3, #0
  400528:	d10d      	bne.n	400546 <process_data_wifi+0xa2>
  40052a:	491a      	ldr	r1, [pc, #104]	; (400594 <process_data_wifi+0xf0>)
  40052c:	480f      	ldr	r0, [pc, #60]	; (40056c <process_data_wifi+0xc8>)
  40052e:	4b10      	ldr	r3, [pc, #64]	; (400570 <process_data_wifi+0xcc>)
  400530:	4798      	blx	r3
  400532:	4603      	mov	r3, r0
  400534:	2b00      	cmp	r3, #0
  400536:	d106      	bne.n	400546 <process_data_wifi+0xa2>
  400538:	4917      	ldr	r1, [pc, #92]	; (400598 <process_data_wifi+0xf4>)
  40053a:	480c      	ldr	r0, [pc, #48]	; (40056c <process_data_wifi+0xc8>)
  40053c:	4b0c      	ldr	r3, [pc, #48]	; (400570 <process_data_wifi+0xcc>)
  40053e:	4798      	blx	r3
  400540:	4603      	mov	r3, r0
  400542:	2b00      	cmp	r3, #0
  400544:	d002      	beq.n	40054c <process_data_wifi+0xa8>
	{
	process_flag = true;
  400546:	4b15      	ldr	r3, [pc, #84]	; (40059c <process_data_wifi+0xf8>)
  400548:	2201      	movs	r2, #1
  40054a:	601a      	str	r2, [r3, #0]
	}
	if (strstr(input_line_wifi,"0,0"))
  40054c:	4912      	ldr	r1, [pc, #72]	; (400598 <process_data_wifi+0xf4>)
  40054e:	4807      	ldr	r0, [pc, #28]	; (40056c <process_data_wifi+0xc8>)
  400550:	4b07      	ldr	r3, [pc, #28]	; (400570 <process_data_wifi+0xcc>)
  400552:	4798      	blx	r3
  400554:	4603      	mov	r3, r0
  400556:	2b00      	cmp	r3, #0
  400558:	d002      	beq.n	400560 <process_data_wifi+0xbc>
	{
		stream_flag = true;
  40055a:	4b11      	ldr	r3, [pc, #68]	; (4005a0 <process_data_wifi+0xfc>)
  40055c:	2201      	movs	r2, #1
  40055e:	601a      	str	r2, [r3, #0]
	}
		
}
  400560:	bf00      	nop
  400562:	bd80      	pop	{r7, pc}
  400564:	004003e9 	.word	0x004003e9
  400568:	00408694 	.word	0x00408694
  40056c:	20000970 	.word	0x20000970
  400570:	00403bfd 	.word	0x00403bfd
  400574:	004086a4 	.word	0x004086a4
  400578:	004086b4 	.word	0x004086b4
  40057c:	004086c4 	.word	0x004086c4
  400580:	004086d4 	.word	0x004086d4
  400584:	004086e4 	.word	0x004086e4
  400588:	004086ec 	.word	0x004086ec
  40058c:	004086f8 	.word	0x004086f8
  400590:	00408700 	.word	0x00408700
  400594:	00408708 	.word	0x00408708
  400598:	00408710 	.word	0x00408710
  40059c:	200008ac 	.word	0x200008ac
  4005a0:	200008b0 	.word	0x200008b0

004005a4 <configure_wifi_comm_pin>:

void configure_wifi_comm_pin(void)
{
  4005a4:	b590      	push	{r4, r7, lr}
  4005a6:	b083      	sub	sp, #12
  4005a8:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_COMM_PIN_ID);
  4005aa:	200c      	movs	r0, #12
  4005ac:	4b0b      	ldr	r3, [pc, #44]	; (4005dc <configure_wifi_comm_pin+0x38>)
  4005ae:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WIFI_COMM_PIN_PIO, WIFI_COMM_PIN_ID, WIFI_COMM_PIN_MASK,
  4005b0:	4b0b      	ldr	r3, [pc, #44]	; (4005e0 <configure_wifi_comm_pin+0x3c>)
  4005b2:	9300      	str	r3, [sp, #0]
  4005b4:	2370      	movs	r3, #112	; 0x70
  4005b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4005ba:	210c      	movs	r1, #12
  4005bc:	4809      	ldr	r0, [pc, #36]	; (4005e4 <configure_wifi_comm_pin+0x40>)
  4005be:	4c0a      	ldr	r4, [pc, #40]	; (4005e8 <configure_wifi_comm_pin+0x44>)
  4005c0:	47a0      	blx	r4
			WIFI_COMM_PIN_ATTR, wifi_command_response_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_PIN_ID);
  4005c2:	200c      	movs	r0, #12
  4005c4:	4b09      	ldr	r3, [pc, #36]	; (4005ec <configure_wifi_comm_pin+0x48>)
  4005c6:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COMM_PIN_PIO, WIFI_COMM_PIN_MASK);
  4005c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4005cc:	4805      	ldr	r0, [pc, #20]	; (4005e4 <configure_wifi_comm_pin+0x40>)
  4005ce:	4b08      	ldr	r3, [pc, #32]	; (4005f0 <configure_wifi_comm_pin+0x4c>)
  4005d0:	4798      	blx	r3
}
  4005d2:	bf00      	nop
  4005d4:	3704      	adds	r7, #4
  4005d6:	46bd      	mov	sp, r7
  4005d8:	bd90      	pop	{r4, r7, pc}
  4005da:	bf00      	nop
  4005dc:	00401695 	.word	0x00401695
  4005e0:	0040045d 	.word	0x0040045d
  4005e4:	400e1000 	.word	0x400e1000
  4005e8:	00401329 	.word	0x00401329
  4005ec:	00400295 	.word	0x00400295
  4005f0:	00400fc1 	.word	0x00400fc1

004005f4 <configure_usart_wifi>:

 void configure_usart_wifi(void)
{
  4005f4:	b5b0      	push	{r4, r5, r7, lr}
  4005f6:	b086      	sub	sp, #24
  4005f8:	af00      	add	r7, sp, #0
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  4005fa:	4b17      	ldr	r3, [pc, #92]	; (400658 <configure_usart_wifi+0x64>)
  4005fc:	463c      	mov	r4, r7
  4005fe:	461d      	mov	r5, r3
  400600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400604:	e895 0003 	ldmia.w	r5, {r0, r1}
  400608:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  40060c:	4b13      	ldr	r3, [pc, #76]	; (40065c <configure_usart_wifi+0x68>)
  40060e:	4798      	blx	r3
  400610:	4602      	mov	r2, r0
  400612:	4b13      	ldr	r3, [pc, #76]	; (400660 <configure_usart_wifi+0x6c>)
  400614:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  400616:	200e      	movs	r0, #14
  400618:	4b12      	ldr	r3, [pc, #72]	; (400664 <configure_usart_wifi+0x70>)
  40061a:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(BOARD_USART, &usart_console_settings, ul_sysclk);
  40061c:	4b10      	ldr	r3, [pc, #64]	; (400660 <configure_usart_wifi+0x6c>)
  40061e:	681a      	ldr	r2, [r3, #0]
  400620:	463b      	mov	r3, r7
  400622:	4619      	mov	r1, r3
  400624:	4810      	ldr	r0, [pc, #64]	; (400668 <configure_usart_wifi+0x74>)
  400626:	4b11      	ldr	r3, [pc, #68]	; (40066c <configure_usart_wifi+0x78>)
  400628:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  40062a:	f04f 31ff 	mov.w	r1, #4294967295
  40062e:	480e      	ldr	r0, [pc, #56]	; (400668 <configure_usart_wifi+0x74>)
  400630:	4b0f      	ldr	r3, [pc, #60]	; (400670 <configure_usart_wifi+0x7c>)
  400632:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  400634:	480c      	ldr	r0, [pc, #48]	; (400668 <configure_usart_wifi+0x74>)
  400636:	4b0f      	ldr	r3, [pc, #60]	; (400674 <configure_usart_wifi+0x80>)
  400638:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  40063a:	480b      	ldr	r0, [pc, #44]	; (400668 <configure_usart_wifi+0x74>)
  40063c:	4b0e      	ldr	r3, [pc, #56]	; (400678 <configure_usart_wifi+0x84>)
  40063e:	4798      	blx	r3

	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  400640:	2101      	movs	r1, #1
  400642:	4809      	ldr	r0, [pc, #36]	; (400668 <configure_usart_wifi+0x74>)
  400644:	4b0d      	ldr	r3, [pc, #52]	; (40067c <configure_usart_wifi+0x88>)
  400646:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  400648:	200e      	movs	r0, #14
  40064a:	4b0d      	ldr	r3, [pc, #52]	; (400680 <configure_usart_wifi+0x8c>)
  40064c:	4798      	blx	r3
}
  40064e:	bf00      	nop
  400650:	3718      	adds	r7, #24
  400652:	46bd      	mov	sp, r7
  400654:	bdb0      	pop	{r4, r5, r7, pc}
  400656:	bf00      	nop
  400658:	00408714 	.word	0x00408714
  40065c:	00400369 	.word	0x00400369
  400660:	200008b4 	.word	0x200008b4
  400664:	0040037d 	.word	0x0040037d
  400668:	40024000 	.word	0x40024000
  40066c:	00401c5d 	.word	0x00401c5d
  400670:	00401d19 	.word	0x00401d19
  400674:	00401c9d 	.word	0x00401c9d
  400678:	00401ccd 	.word	0x00401ccd
  40067c:	00401cfd 	.word	0x00401cfd
  400680:	00400295 	.word	0x00400295

00400684 <wifi_web_setup_handler>:

void wifi_web_setup_handler(uint32_t ul_id, uint32_t ul_mask)
{
  400684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400688:	b083      	sub	sp, #12
  40068a:	af00      	add	r7, sp, #0
  40068c:	6078      	str	r0, [r7, #4]
  40068e:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	while(wifi_web_setup_flag){
  400690:	e047      	b.n	400722 <wifi_web_setup_handler+0x9e>
		usart_write_line(BOARD_USART,"setup web\r\n");
  400692:	492a      	ldr	r1, [pc, #168]	; (40073c <wifi_web_setup_handler+0xb8>)
  400694:	482a      	ldr	r0, [pc, #168]	; (400740 <wifi_web_setup_handler+0xbc>)
  400696:	4b2b      	ldr	r3, [pc, #172]	; (400744 <wifi_web_setup_handler+0xc0>)
  400698:	4798      	blx	r3
		delay_ms(1000);
  40069a:	4b2b      	ldr	r3, [pc, #172]	; (400748 <wifi_web_setup_handler+0xc4>)
  40069c:	4798      	blx	r3
  40069e:	4603      	mov	r3, r0
  4006a0:	4618      	mov	r0, r3
  4006a2:	f04f 0100 	mov.w	r1, #0
  4006a6:	4602      	mov	r2, r0
  4006a8:	460b      	mov	r3, r1
  4006aa:	ea4f 0983 	mov.w	r9, r3, lsl #2
  4006ae:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
  4006b2:	ea4f 0882 	mov.w	r8, r2, lsl #2
  4006b6:	4642      	mov	r2, r8
  4006b8:	464b      	mov	r3, r9
  4006ba:	015d      	lsls	r5, r3, #5
  4006bc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  4006c0:	0154      	lsls	r4, r2, #5
  4006c2:	1aa4      	subs	r4, r4, r2
  4006c4:	eb65 0503 	sbc.w	r5, r5, r3
  4006c8:	1824      	adds	r4, r4, r0
  4006ca:	eb45 0501 	adc.w	r5, r5, r1
  4006ce:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
  4006d2:	ea4b 7b54 	orr.w	fp, fp, r4, lsr #29
  4006d6:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
  4006da:	4654      	mov	r4, sl
  4006dc:	465d      	mov	r5, fp
  4006de:	4620      	mov	r0, r4
  4006e0:	4629      	mov	r1, r5
  4006e2:	f243 62af 	movw	r2, #13999	; 0x36af
  4006e6:	f04f 0300 	mov.w	r3, #0
  4006ea:	1880      	adds	r0, r0, r2
  4006ec:	eb41 0103 	adc.w	r1, r1, r3
  4006f0:	4e16      	ldr	r6, [pc, #88]	; (40074c <wifi_web_setup_handler+0xc8>)
  4006f2:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4006f6:	f04f 0300 	mov.w	r3, #0
  4006fa:	47b0      	blx	r6
  4006fc:	4602      	mov	r2, r0
  4006fe:	460b      	mov	r3, r1
  400700:	4613      	mov	r3, r2
  400702:	4618      	mov	r0, r3
  400704:	4b12      	ldr	r3, [pc, #72]	; (400750 <wifi_web_setup_handler+0xcc>)
  400706:	4798      	blx	r3
		while (!ioport_get_pin_level(NETWORK)){}
  400708:	bf00      	nop
  40070a:	202b      	movs	r0, #43	; 0x2b
  40070c:	4b11      	ldr	r3, [pc, #68]	; (400754 <wifi_web_setup_handler+0xd0>)
  40070e:	4798      	blx	r3
  400710:	4603      	mov	r3, r0
  400712:	f083 0301 	eor.w	r3, r3, #1
  400716:	b2db      	uxtb	r3, r3
  400718:	2b00      	cmp	r3, #0
  40071a:	d1f6      	bne.n	40070a <wifi_web_setup_handler+0x86>
		wifi_web_setup_flag = false;
  40071c:	4b0e      	ldr	r3, [pc, #56]	; (400758 <wifi_web_setup_handler+0xd4>)
  40071e:	2200      	movs	r2, #0
  400720:	601a      	str	r2, [r3, #0]
void wifi_web_setup_handler(uint32_t ul_id, uint32_t ul_mask)
{
	unused(ul_id);
	unused(ul_mask);

	while(wifi_web_setup_flag){
  400722:	4b0d      	ldr	r3, [pc, #52]	; (400758 <wifi_web_setup_handler+0xd4>)
  400724:	681b      	ldr	r3, [r3, #0]
  400726:	2b00      	cmp	r3, #0
  400728:	d1b3      	bne.n	400692 <wifi_web_setup_handler+0xe>
		usart_write_line(BOARD_USART,"setup web\r\n");
		delay_ms(1000);
		while (!ioport_get_pin_level(NETWORK)){}
		wifi_web_setup_flag = false;
	}
	wifi_web_setup_flag = true;
  40072a:	4b0b      	ldr	r3, [pc, #44]	; (400758 <wifi_web_setup_handler+0xd4>)
  40072c:	2201      	movs	r2, #1
  40072e:	601a      	str	r2, [r3, #0]
	
}
  400730:	bf00      	nop
  400732:	370c      	adds	r7, #12
  400734:	46bd      	mov	sp, r7
  400736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40073a:	bf00      	nop
  40073c:	0040872c 	.word	0x0040872c
  400740:	40024000 	.word	0x40024000
  400744:	00401dd1 	.word	0x00401dd1
  400748:	00400355 	.word	0x00400355
  40074c:	004034f5 	.word	0x004034f5
  400750:	20000001 	.word	0x20000001
  400754:	00400399 	.word	0x00400399
  400758:	200008a8 	.word	0x200008a8

0040075c <configure_wifi_web_setup_pin>:

void configure_wifi_web_setup_pin(void)
{
  40075c:	b590      	push	{r4, r7, lr}
  40075e:	b083      	sub	sp, #12
  400760:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_WEB_SETUP_PIN_ID);
  400762:	200b      	movs	r0, #11
  400764:	4b0e      	ldr	r3, [pc, #56]	; (4007a0 <configure_wifi_web_setup_pin+0x44>)
  400766:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_WEB_SETUP_PIN_PIO, WIFI_WEB_SETUP_PIN_MASK, 10);
  400768:	220a      	movs	r2, #10
  40076a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  40076e:	480d      	ldr	r0, [pc, #52]	; (4007a4 <configure_wifi_web_setup_pin+0x48>)
  400770:	4b0d      	ldr	r3, [pc, #52]	; (4007a8 <configure_wifi_web_setup_pin+0x4c>)
  400772:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WIFI_WEB_SETUP_PIN_PIO, WIFI_WEB_SETUP_PIN_ID, WIFI_WEB_SETUP_PIN_MASK,
  400774:	4b0d      	ldr	r3, [pc, #52]	; (4007ac <configure_wifi_web_setup_pin+0x50>)
  400776:	9300      	str	r3, [sp, #0]
  400778:	2379      	movs	r3, #121	; 0x79
  40077a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40077e:	210b      	movs	r1, #11
  400780:	4808      	ldr	r0, [pc, #32]	; (4007a4 <configure_wifi_web_setup_pin+0x48>)
  400782:	4c0b      	ldr	r4, [pc, #44]	; (4007b0 <configure_wifi_web_setup_pin+0x54>)
  400784:	47a0      	blx	r4
			WIFI_WEB_SETUP_PIN_ATTR, wifi_web_setup_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_WEB_SETUP_PIN_ID);
  400786:	200b      	movs	r0, #11
  400788:	4b0a      	ldr	r3, [pc, #40]	; (4007b4 <configure_wifi_web_setup_pin+0x58>)
  40078a:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_WEB_SETUP_PIN_PIO, WIFI_WEB_SETUP_PIN_MASK);
  40078c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  400790:	4804      	ldr	r0, [pc, #16]	; (4007a4 <configure_wifi_web_setup_pin+0x48>)
  400792:	4b09      	ldr	r3, [pc, #36]	; (4007b8 <configure_wifi_web_setup_pin+0x5c>)
  400794:	4798      	blx	r3

}
  400796:	bf00      	nop
  400798:	3704      	adds	r7, #4
  40079a:	46bd      	mov	sp, r7
  40079c:	bd90      	pop	{r4, r7, pc}
  40079e:	bf00      	nop
  4007a0:	00401695 	.word	0x00401695
  4007a4:	400e0e00 	.word	0x400e0e00
  4007a8:	00400d29 	.word	0x00400d29
  4007ac:	00400685 	.word	0x00400685
  4007b0:	00401329 	.word	0x00401329
  4007b4:	00400295 	.word	0x00400295
  4007b8:	00400fc1 	.word	0x00400fc1

004007bc <write_wifi_command>:

void write_wifi_command(char* comm, uint8_t cnt)
{   
  4007bc:	b580      	push	{r7, lr}
  4007be:	b082      	sub	sp, #8
  4007c0:	af00      	add	r7, sp, #0
  4007c2:	6078      	str	r0, [r7, #4]
  4007c4:	460b      	mov	r3, r1
  4007c6:	70fb      	strb	r3, [r7, #3]
	usart_write_line(BOARD_USART, comm);
  4007c8:	6879      	ldr	r1, [r7, #4]
  4007ca:	480e      	ldr	r0, [pc, #56]	; (400804 <write_wifi_command+0x48>)
  4007cc:	4b0e      	ldr	r3, [pc, #56]	; (400808 <write_wifi_command+0x4c>)
  4007ce:	4798      	blx	r3
	
	counts = 0;
  4007d0:	4b0e      	ldr	r3, [pc, #56]	; (40080c <write_wifi_command+0x50>)
  4007d2:	2200      	movs	r2, #0
  4007d4:	701a      	strb	r2, [r3, #0]
	tc_start(TC0, 0);
  4007d6:	2100      	movs	r1, #0
  4007d8:	480d      	ldr	r0, [pc, #52]	; (400810 <write_wifi_command+0x54>)
  4007da:	4b0e      	ldr	r3, [pc, #56]	; (400814 <write_wifi_command+0x58>)
  4007dc:	4798      	blx	r3
	if(counts < cnt)
  4007de:	4b0b      	ldr	r3, [pc, #44]	; (40080c <write_wifi_command+0x50>)
  4007e0:	781b      	ldrb	r3, [r3, #0]
  4007e2:	b2db      	uxtb	r3, r3
  4007e4:	78fa      	ldrb	r2, [r7, #3]
  4007e6:	429a      	cmp	r2, r3
  4007e8:	d908      	bls.n	4007fc <write_wifi_command+0x40>
	{	
		while(!process_flag){}
  4007ea:	bf00      	nop
  4007ec:	4b0a      	ldr	r3, [pc, #40]	; (400818 <write_wifi_command+0x5c>)
  4007ee:	681b      	ldr	r3, [r3, #0]
  4007f0:	2b00      	cmp	r3, #0
  4007f2:	d0fb      	beq.n	4007ec <write_wifi_command+0x30>
		process_flag = false;
  4007f4:	4b08      	ldr	r3, [pc, #32]	; (400818 <write_wifi_command+0x5c>)
  4007f6:	2200      	movs	r2, #0
  4007f8:	601a      	str	r2, [r3, #0]
		return;
  4007fa:	e000      	b.n	4007fe <write_wifi_command+0x42>
		}

	return;
  4007fc:	bf00      	nop
}
  4007fe:	3708      	adds	r7, #8
  400800:	46bd      	mov	sp, r7
  400802:	bd80      	pop	{r7, pc}
  400804:	40024000 	.word	0x40024000
  400808:	00401dd1 	.word	0x00401dd1
  40080c:	2001b728 	.word	0x2001b728
  400810:	40010000 	.word	0x40010000
  400814:	00400161 	.word	0x00400161
  400818:	200008ac 	.word	0x200008ac

0040081c <write_image_to_file>:

void write_image_to_file(void)
{
  40081c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400820:	b09b      	sub	sp, #108	; 0x6c
  400822:	af00      	add	r7, sp, #0

	usart_write_line(BOARD_USART, "fde img.jpg\r\n");
  400824:	4952      	ldr	r1, [pc, #328]	; (400970 <write_image_to_file+0x154>)
  400826:	4853      	ldr	r0, [pc, #332]	; (400974 <write_image_to_file+0x158>)
  400828:	4b53      	ldr	r3, [pc, #332]	; (400978 <write_image_to_file+0x15c>)
  40082a:	4798      	blx	r3
	delay_ms(10);
  40082c:	4b53      	ldr	r3, [pc, #332]	; (40097c <write_image_to_file+0x160>)
  40082e:	4798      	blx	r3
  400830:	4603      	mov	r3, r0
  400832:	f04f 0400 	mov.w	r4, #0
  400836:	18db      	adds	r3, r3, r3
  400838:	eb44 0404 	adc.w	r4, r4, r4
  40083c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  400840:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  400844:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  400848:	eb13 030a 	adds.w	r3, r3, sl
  40084c:	eb44 040b 	adc.w	r4, r4, fp
  400850:	f243 61af 	movw	r1, #13999	; 0x36af
  400854:	f04f 0200 	mov.w	r2, #0
  400858:	eb13 0a01 	adds.w	sl, r3, r1
  40085c:	eb44 0b02 	adc.w	fp, r4, r2
  400860:	4650      	mov	r0, sl
  400862:	4659      	mov	r1, fp
  400864:	4c46      	ldr	r4, [pc, #280]	; (400980 <write_image_to_file+0x164>)
  400866:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40086a:	f04f 0300 	mov.w	r3, #0
  40086e:	47a0      	blx	r4
  400870:	4603      	mov	r3, r0
  400872:	460c      	mov	r4, r1
  400874:	4618      	mov	r0, r3
  400876:	4b43      	ldr	r3, [pc, #268]	; (400984 <write_image_to_file+0x168>)
  400878:	4798      	blx	r3
	uint8_t file_create_string[100];
	sprintf(file_create_string, "fcr img.jpg %d\r\n", im_length); 
  40087a:	4b43      	ldr	r3, [pc, #268]	; (400988 <write_image_to_file+0x16c>)
  40087c:	681a      	ldr	r2, [r3, #0]
  40087e:	463b      	mov	r3, r7
  400880:	4942      	ldr	r1, [pc, #264]	; (40098c <write_image_to_file+0x170>)
  400882:	4618      	mov	r0, r3
  400884:	4b42      	ldr	r3, [pc, #264]	; (400990 <write_image_to_file+0x174>)
  400886:	4798      	blx	r3
	usart_write_line(BOARD_USART, file_create_string);
  400888:	463b      	mov	r3, r7
  40088a:	4619      	mov	r1, r3
  40088c:	4839      	ldr	r0, [pc, #228]	; (400974 <write_image_to_file+0x158>)
  40088e:	4b3a      	ldr	r3, [pc, #232]	; (400978 <write_image_to_file+0x15c>)
  400890:	4798      	blx	r3
	delay_ms(10);
  400892:	4b3a      	ldr	r3, [pc, #232]	; (40097c <write_image_to_file+0x160>)
  400894:	4798      	blx	r3
  400896:	4603      	mov	r3, r0
  400898:	f04f 0400 	mov.w	r4, #0
  40089c:	18db      	adds	r3, r3, r3
  40089e:	eb44 0404 	adc.w	r4, r4, r4
  4008a2:	ea4f 0984 	mov.w	r9, r4, lsl #2
  4008a6:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  4008aa:	ea4f 0883 	mov.w	r8, r3, lsl #2
  4008ae:	eb13 0308 	adds.w	r3, r3, r8
  4008b2:	eb44 0409 	adc.w	r4, r4, r9
  4008b6:	f243 61af 	movw	r1, #13999	; 0x36af
  4008ba:	f04f 0200 	mov.w	r2, #0
  4008be:	eb13 0801 	adds.w	r8, r3, r1
  4008c2:	eb44 0902 	adc.w	r9, r4, r2
  4008c6:	4640      	mov	r0, r8
  4008c8:	4649      	mov	r1, r9
  4008ca:	4c2d      	ldr	r4, [pc, #180]	; (400980 <write_image_to_file+0x164>)
  4008cc:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4008d0:	f04f 0300 	mov.w	r3, #0
  4008d4:	47a0      	blx	r4
  4008d6:	4603      	mov	r3, r0
  4008d8:	460c      	mov	r4, r1
  4008da:	4618      	mov	r0, r3
  4008dc:	4b29      	ldr	r3, [pc, #164]	; (400984 <write_image_to_file+0x168>)
  4008de:	4798      	blx	r3
	for (uint32_t jj=im_start;jj<(im_start + im_length);jj++) 
  4008e0:	4b2c      	ldr	r3, [pc, #176]	; (400994 <write_image_to_file+0x178>)
  4008e2:	681b      	ldr	r3, [r3, #0]
  4008e4:	667b      	str	r3, [r7, #100]	; 0x64
  4008e6:	e00b      	b.n	400900 <write_image_to_file+0xe4>
	{
	usart_putchar(BOARD_USART, image_buf[jj]);
  4008e8:	4a2b      	ldr	r2, [pc, #172]	; (400998 <write_image_to_file+0x17c>)
  4008ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  4008ec:	4413      	add	r3, r2
  4008ee:	781b      	ldrb	r3, [r3, #0]
  4008f0:	b2db      	uxtb	r3, r3
  4008f2:	4619      	mov	r1, r3
  4008f4:	481f      	ldr	r0, [pc, #124]	; (400974 <write_image_to_file+0x158>)
  4008f6:	4b29      	ldr	r3, [pc, #164]	; (40099c <write_image_to_file+0x180>)
  4008f8:	4798      	blx	r3
	delay_ms(10);
	uint8_t file_create_string[100];
	sprintf(file_create_string, "fcr img.jpg %d\r\n", im_length); 
	usart_write_line(BOARD_USART, file_create_string);
	delay_ms(10);
	for (uint32_t jj=im_start;jj<(im_start + im_length);jj++) 
  4008fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  4008fc:	3301      	adds	r3, #1
  4008fe:	667b      	str	r3, [r7, #100]	; 0x64
  400900:	4b24      	ldr	r3, [pc, #144]	; (400994 <write_image_to_file+0x178>)
  400902:	681a      	ldr	r2, [r3, #0]
  400904:	4b20      	ldr	r3, [pc, #128]	; (400988 <write_image_to_file+0x16c>)
  400906:	681b      	ldr	r3, [r3, #0]
  400908:	441a      	add	r2, r3
  40090a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  40090c:	429a      	cmp	r2, r3
  40090e:	d8eb      	bhi.n	4008e8 <write_image_to_file+0xcc>
	{
	usart_putchar(BOARD_USART, image_buf[jj]);
	}  
	delay_ms(10);
  400910:	4b1a      	ldr	r3, [pc, #104]	; (40097c <write_image_to_file+0x160>)
  400912:	4798      	blx	r3
  400914:	4603      	mov	r3, r0
  400916:	f04f 0400 	mov.w	r4, #0
  40091a:	18db      	adds	r3, r3, r3
  40091c:	eb44 0404 	adc.w	r4, r4, r4
  400920:	00a6      	lsls	r6, r4, #2
  400922:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  400926:	009d      	lsls	r5, r3, #2
  400928:	195b      	adds	r3, r3, r5
  40092a:	eb44 0406 	adc.w	r4, r4, r6
  40092e:	f243 61af 	movw	r1, #13999	; 0x36af
  400932:	f04f 0200 	mov.w	r2, #0
  400936:	185d      	adds	r5, r3, r1
  400938:	eb44 0602 	adc.w	r6, r4, r2
  40093c:	4628      	mov	r0, r5
  40093e:	4631      	mov	r1, r6
  400940:	4c0f      	ldr	r4, [pc, #60]	; (400980 <write_image_to_file+0x164>)
  400942:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400946:	f04f 0300 	mov.w	r3, #0
  40094a:	47a0      	blx	r4
  40094c:	4603      	mov	r3, r0
  40094e:	460c      	mov	r4, r1
  400950:	4618      	mov	r0, r3
  400952:	4b0c      	ldr	r3, [pc, #48]	; (400984 <write_image_to_file+0x168>)
  400954:	4798      	blx	r3
	while(!process_flag){}
  400956:	bf00      	nop
  400958:	4b11      	ldr	r3, [pc, #68]	; (4009a0 <write_image_to_file+0x184>)
  40095a:	681b      	ldr	r3, [r3, #0]
  40095c:	2b00      	cmp	r3, #0
  40095e:	d0fb      	beq.n	400958 <write_image_to_file+0x13c>
	process_flag = false;
  400960:	4b0f      	ldr	r3, [pc, #60]	; (4009a0 <write_image_to_file+0x184>)
  400962:	2200      	movs	r2, #0
  400964:	601a      	str	r2, [r3, #0]
 	
}
  400966:	bf00      	nop
  400968:	376c      	adds	r7, #108	; 0x6c
  40096a:	46bd      	mov	sp, r7
  40096c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400970:	00408738 	.word	0x00408738
  400974:	40024000 	.word	0x40024000
  400978:	00401dd1 	.word	0x00401dd1
  40097c:	00400355 	.word	0x00400355
  400980:	004034f5 	.word	0x004034f5
  400984:	20000001 	.word	0x20000001
  400988:	20003080 	.word	0x20003080
  40098c:	00408748 	.word	0x00408748
  400990:	004038f9 	.word	0x004038f9
  400994:	20003084 	.word	0x20003084
  400998:	20003088 	.word	0x20003088
  40099c:	00401da1 	.word	0x00401da1
  4009a0:	200008ac 	.word	0x200008ac

004009a4 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4009a4:	b580      	push	{r7, lr}
  4009a6:	b082      	sub	sp, #8
  4009a8:	af00      	add	r7, sp, #0
  4009aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4009ac:	687b      	ldr	r3, [r7, #4]
  4009ae:	2b07      	cmp	r3, #7
  4009b0:	d831      	bhi.n	400a16 <osc_enable+0x72>
  4009b2:	a201      	add	r2, pc, #4	; (adr r2, 4009b8 <osc_enable+0x14>)
  4009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009b8:	00400a15 	.word	0x00400a15
  4009bc:	004009d9 	.word	0x004009d9
  4009c0:	004009e1 	.word	0x004009e1
  4009c4:	004009e9 	.word	0x004009e9
  4009c8:	004009f1 	.word	0x004009f1
  4009cc:	004009f9 	.word	0x004009f9
  4009d0:	00400a01 	.word	0x00400a01
  4009d4:	00400a0b 	.word	0x00400a0b
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4009d8:	2000      	movs	r0, #0
  4009da:	4b11      	ldr	r3, [pc, #68]	; (400a20 <osc_enable+0x7c>)
  4009dc:	4798      	blx	r3
		break;
  4009de:	e01a      	b.n	400a16 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4009e0:	2001      	movs	r0, #1
  4009e2:	4b0f      	ldr	r3, [pc, #60]	; (400a20 <osc_enable+0x7c>)
  4009e4:	4798      	blx	r3
		break;
  4009e6:	e016      	b.n	400a16 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4009e8:	2000      	movs	r0, #0
  4009ea:	4b0e      	ldr	r3, [pc, #56]	; (400a24 <osc_enable+0x80>)
  4009ec:	4798      	blx	r3
		break;
  4009ee:	e012      	b.n	400a16 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4009f0:	2010      	movs	r0, #16
  4009f2:	4b0c      	ldr	r3, [pc, #48]	; (400a24 <osc_enable+0x80>)
  4009f4:	4798      	blx	r3
		break;
  4009f6:	e00e      	b.n	400a16 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4009f8:	2020      	movs	r0, #32
  4009fa:	4b0a      	ldr	r3, [pc, #40]	; (400a24 <osc_enable+0x80>)
  4009fc:	4798      	blx	r3
		break;
  4009fe:	e00a      	b.n	400a16 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400a00:	213e      	movs	r1, #62	; 0x3e
  400a02:	2000      	movs	r0, #0
  400a04:	4b08      	ldr	r3, [pc, #32]	; (400a28 <osc_enable+0x84>)
  400a06:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400a08:	e005      	b.n	400a16 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400a0a:	213e      	movs	r1, #62	; 0x3e
  400a0c:	2001      	movs	r0, #1
  400a0e:	4b06      	ldr	r3, [pc, #24]	; (400a28 <osc_enable+0x84>)
  400a10:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400a12:	e000      	b.n	400a16 <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  400a14:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  400a16:	bf00      	nop
  400a18:	3708      	adds	r7, #8
  400a1a:	46bd      	mov	sp, r7
  400a1c:	bd80      	pop	{r7, pc}
  400a1e:	bf00      	nop
  400a20:	00401475 	.word	0x00401475
  400a24:	004014e1 	.word	0x004014e1
  400a28:	00401551 	.word	0x00401551

00400a2c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400a2c:	b580      	push	{r7, lr}
  400a2e:	b082      	sub	sp, #8
  400a30:	af00      	add	r7, sp, #0
  400a32:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400a34:	687b      	ldr	r3, [r7, #4]
  400a36:	2b07      	cmp	r3, #7
  400a38:	d826      	bhi.n	400a88 <osc_is_ready+0x5c>
  400a3a:	a201      	add	r2, pc, #4	; (adr r2, 400a40 <osc_is_ready+0x14>)
  400a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400a40:	00400a61 	.word	0x00400a61
  400a44:	00400a65 	.word	0x00400a65
  400a48:	00400a65 	.word	0x00400a65
  400a4c:	00400a77 	.word	0x00400a77
  400a50:	00400a77 	.word	0x00400a77
  400a54:	00400a77 	.word	0x00400a77
  400a58:	00400a77 	.word	0x00400a77
  400a5c:	00400a77 	.word	0x00400a77
	case OSC_SLCK_32K_RC:
		return 1;
  400a60:	2301      	movs	r3, #1
  400a62:	e012      	b.n	400a8a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400a64:	4b0b      	ldr	r3, [pc, #44]	; (400a94 <osc_is_ready+0x68>)
  400a66:	4798      	blx	r3
  400a68:	4603      	mov	r3, r0
  400a6a:	2b00      	cmp	r3, #0
  400a6c:	bf14      	ite	ne
  400a6e:	2301      	movne	r3, #1
  400a70:	2300      	moveq	r3, #0
  400a72:	b2db      	uxtb	r3, r3
  400a74:	e009      	b.n	400a8a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400a76:	4b08      	ldr	r3, [pc, #32]	; (400a98 <osc_is_ready+0x6c>)
  400a78:	4798      	blx	r3
  400a7a:	4603      	mov	r3, r0
  400a7c:	2b00      	cmp	r3, #0
  400a7e:	bf14      	ite	ne
  400a80:	2301      	movne	r3, #1
  400a82:	2300      	moveq	r3, #0
  400a84:	b2db      	uxtb	r3, r3
  400a86:	e000      	b.n	400a8a <osc_is_ready+0x5e>
	}

	return 0;
  400a88:	2300      	movs	r3, #0
}
  400a8a:	4618      	mov	r0, r3
  400a8c:	3708      	adds	r7, #8
  400a8e:	46bd      	mov	sp, r7
  400a90:	bd80      	pop	{r7, pc}
  400a92:	bf00      	nop
  400a94:	004014ad 	.word	0x004014ad
  400a98:	004015c9 	.word	0x004015c9

00400a9c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400a9c:	b480      	push	{r7}
  400a9e:	b083      	sub	sp, #12
  400aa0:	af00      	add	r7, sp, #0
  400aa2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400aa4:	687b      	ldr	r3, [r7, #4]
  400aa6:	2b07      	cmp	r3, #7
  400aa8:	d825      	bhi.n	400af6 <osc_get_rate+0x5a>
  400aaa:	a201      	add	r2, pc, #4	; (adr r2, 400ab0 <osc_get_rate+0x14>)
  400aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400ab0:	00400ad1 	.word	0x00400ad1
  400ab4:	00400ad7 	.word	0x00400ad7
  400ab8:	00400add 	.word	0x00400add
  400abc:	00400ae3 	.word	0x00400ae3
  400ac0:	00400ae7 	.word	0x00400ae7
  400ac4:	00400aeb 	.word	0x00400aeb
  400ac8:	00400aef 	.word	0x00400aef
  400acc:	00400af3 	.word	0x00400af3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400ad0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400ad4:	e010      	b.n	400af8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ada:	e00d      	b.n	400af8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400adc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ae0:	e00a      	b.n	400af8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400ae2:	4b08      	ldr	r3, [pc, #32]	; (400b04 <osc_get_rate+0x68>)
  400ae4:	e008      	b.n	400af8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400ae6:	4b08      	ldr	r3, [pc, #32]	; (400b08 <osc_get_rate+0x6c>)
  400ae8:	e006      	b.n	400af8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400aea:	4b08      	ldr	r3, [pc, #32]	; (400b0c <osc_get_rate+0x70>)
  400aec:	e004      	b.n	400af8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400aee:	4b07      	ldr	r3, [pc, #28]	; (400b0c <osc_get_rate+0x70>)
  400af0:	e002      	b.n	400af8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400af2:	4b06      	ldr	r3, [pc, #24]	; (400b0c <osc_get_rate+0x70>)
  400af4:	e000      	b.n	400af8 <osc_get_rate+0x5c>
	}

	return 0;
  400af6:	2300      	movs	r3, #0
}
  400af8:	4618      	mov	r0, r3
  400afa:	370c      	adds	r7, #12
  400afc:	46bd      	mov	sp, r7
  400afe:	bc80      	pop	{r7}
  400b00:	4770      	bx	lr
  400b02:	bf00      	nop
  400b04:	003d0900 	.word	0x003d0900
  400b08:	007a1200 	.word	0x007a1200
  400b0c:	00b71b00 	.word	0x00b71b00

00400b10 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400b10:	b580      	push	{r7, lr}
  400b12:	b082      	sub	sp, #8
  400b14:	af00      	add	r7, sp, #0
  400b16:	4603      	mov	r3, r0
  400b18:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400b1a:	bf00      	nop
  400b1c:	79fb      	ldrb	r3, [r7, #7]
  400b1e:	4618      	mov	r0, r3
  400b20:	4b05      	ldr	r3, [pc, #20]	; (400b38 <osc_wait_ready+0x28>)
  400b22:	4798      	blx	r3
  400b24:	4603      	mov	r3, r0
  400b26:	f083 0301 	eor.w	r3, r3, #1
  400b2a:	b2db      	uxtb	r3, r3
  400b2c:	2b00      	cmp	r3, #0
  400b2e:	d1f5      	bne.n	400b1c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400b30:	bf00      	nop
  400b32:	3708      	adds	r7, #8
  400b34:	46bd      	mov	sp, r7
  400b36:	bd80      	pop	{r7, pc}
  400b38:	00400a2d 	.word	0x00400a2d

00400b3c <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400b3c:	b580      	push	{r7, lr}
  400b3e:	b086      	sub	sp, #24
  400b40:	af00      	add	r7, sp, #0
  400b42:	60f8      	str	r0, [r7, #12]
  400b44:	607a      	str	r2, [r7, #4]
  400b46:	603b      	str	r3, [r7, #0]
  400b48:	460b      	mov	r3, r1
  400b4a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400b4c:	7afb      	ldrb	r3, [r7, #11]
  400b4e:	4618      	mov	r0, r3
  400b50:	4b0d      	ldr	r3, [pc, #52]	; (400b88 <pll_config_init+0x4c>)
  400b52:	4798      	blx	r3
  400b54:	4602      	mov	r2, r0
  400b56:	687b      	ldr	r3, [r7, #4]
  400b58:	fbb2 f3f3 	udiv	r3, r2, r3
  400b5c:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400b5e:	697b      	ldr	r3, [r7, #20]
  400b60:	683a      	ldr	r2, [r7, #0]
  400b62:	fb02 f303 	mul.w	r3, r2, r3
  400b66:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400b68:	683b      	ldr	r3, [r7, #0]
  400b6a:	3b01      	subs	r3, #1
  400b6c:	041a      	lsls	r2, r3, #16
  400b6e:	4b07      	ldr	r3, [pc, #28]	; (400b8c <pll_config_init+0x50>)
  400b70:	4013      	ands	r3, r2
  400b72:	687a      	ldr	r2, [r7, #4]
  400b74:	b2d2      	uxtb	r2, r2
  400b76:	4313      	orrs	r3, r2
  400b78:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400b7c:	68fb      	ldr	r3, [r7, #12]
  400b7e:	601a      	str	r2, [r3, #0]
}
  400b80:	bf00      	nop
  400b82:	3718      	adds	r7, #24
  400b84:	46bd      	mov	sp, r7
  400b86:	bd80      	pop	{r7, pc}
  400b88:	00400a9d 	.word	0x00400a9d
  400b8c:	07ff0000 	.word	0x07ff0000

00400b90 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400b90:	b580      	push	{r7, lr}
  400b92:	b082      	sub	sp, #8
  400b94:	af00      	add	r7, sp, #0
  400b96:	6078      	str	r0, [r7, #4]
  400b98:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400b9a:	683b      	ldr	r3, [r7, #0]
  400b9c:	2b00      	cmp	r3, #0
  400b9e:	d108      	bne.n	400bb2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400ba0:	4b09      	ldr	r3, [pc, #36]	; (400bc8 <pll_enable+0x38>)
  400ba2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400ba4:	4a09      	ldr	r2, [pc, #36]	; (400bcc <pll_enable+0x3c>)
  400ba6:	687b      	ldr	r3, [r7, #4]
  400ba8:	681b      	ldr	r3, [r3, #0]
  400baa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400bae:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400bb0:	e005      	b.n	400bbe <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  400bb2:	4b07      	ldr	r3, [pc, #28]	; (400bd0 <pll_enable+0x40>)
  400bb4:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400bb6:	4a05      	ldr	r2, [pc, #20]	; (400bcc <pll_enable+0x3c>)
  400bb8:	687b      	ldr	r3, [r7, #4]
  400bba:	681b      	ldr	r3, [r3, #0]
  400bbc:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  400bbe:	bf00      	nop
  400bc0:	3708      	adds	r7, #8
  400bc2:	46bd      	mov	sp, r7
  400bc4:	bd80      	pop	{r7, pc}
  400bc6:	bf00      	nop
  400bc8:	00401635 	.word	0x00401635
  400bcc:	400e0400 	.word	0x400e0400
  400bd0:	00401665 	.word	0x00401665

00400bd4 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400bd4:	b580      	push	{r7, lr}
  400bd6:	b082      	sub	sp, #8
  400bd8:	af00      	add	r7, sp, #0
  400bda:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400bdc:	687b      	ldr	r3, [r7, #4]
  400bde:	2b00      	cmp	r3, #0
  400be0:	d103      	bne.n	400bea <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400be2:	4b05      	ldr	r3, [pc, #20]	; (400bf8 <pll_is_locked+0x24>)
  400be4:	4798      	blx	r3
  400be6:	4603      	mov	r3, r0
  400be8:	e002      	b.n	400bf0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  400bea:	4b04      	ldr	r3, [pc, #16]	; (400bfc <pll_is_locked+0x28>)
  400bec:	4798      	blx	r3
  400bee:	4603      	mov	r3, r0
	}
}
  400bf0:	4618      	mov	r0, r3
  400bf2:	3708      	adds	r7, #8
  400bf4:	46bd      	mov	sp, r7
  400bf6:	bd80      	pop	{r7, pc}
  400bf8:	0040164d 	.word	0x0040164d
  400bfc:	0040167d 	.word	0x0040167d

00400c00 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400c00:	b580      	push	{r7, lr}
  400c02:	b082      	sub	sp, #8
  400c04:	af00      	add	r7, sp, #0
  400c06:	4603      	mov	r3, r0
  400c08:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400c0a:	79fb      	ldrb	r3, [r7, #7]
  400c0c:	3b03      	subs	r3, #3
  400c0e:	2b04      	cmp	r3, #4
  400c10:	d808      	bhi.n	400c24 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400c12:	79fb      	ldrb	r3, [r7, #7]
  400c14:	4618      	mov	r0, r3
  400c16:	4b06      	ldr	r3, [pc, #24]	; (400c30 <pll_enable_source+0x30>)
  400c18:	4798      	blx	r3
		osc_wait_ready(e_src);
  400c1a:	79fb      	ldrb	r3, [r7, #7]
  400c1c:	4618      	mov	r0, r3
  400c1e:	4b05      	ldr	r3, [pc, #20]	; (400c34 <pll_enable_source+0x34>)
  400c20:	4798      	blx	r3
		break;
  400c22:	e000      	b.n	400c26 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400c24:	bf00      	nop
	}
}
  400c26:	bf00      	nop
  400c28:	3708      	adds	r7, #8
  400c2a:	46bd      	mov	sp, r7
  400c2c:	bd80      	pop	{r7, pc}
  400c2e:	bf00      	nop
  400c30:	004009a5 	.word	0x004009a5
  400c34:	00400b11 	.word	0x00400b11

00400c38 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400c38:	b580      	push	{r7, lr}
  400c3a:	b082      	sub	sp, #8
  400c3c:	af00      	add	r7, sp, #0
  400c3e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400c40:	bf00      	nop
  400c42:	6878      	ldr	r0, [r7, #4]
  400c44:	4b04      	ldr	r3, [pc, #16]	; (400c58 <pll_wait_for_lock+0x20>)
  400c46:	4798      	blx	r3
  400c48:	4603      	mov	r3, r0
  400c4a:	2b00      	cmp	r3, #0
  400c4c:	d0f9      	beq.n	400c42 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400c4e:	2300      	movs	r3, #0
}
  400c50:	4618      	mov	r0, r3
  400c52:	3708      	adds	r7, #8
  400c54:	46bd      	mov	sp, r7
  400c56:	bd80      	pop	{r7, pc}
  400c58:	00400bd5 	.word	0x00400bd5

00400c5c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400c5c:	b580      	push	{r7, lr}
  400c5e:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_PLL1_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLBCK) {
		return pll_get_default_rate(1);
  400c60:	2006      	movs	r0, #6
  400c62:	4b04      	ldr	r3, [pc, #16]	; (400c74 <sysclk_get_main_hz+0x18>)
  400c64:	4798      	blx	r3
  400c66:	4602      	mov	r2, r0
  400c68:	4613      	mov	r3, r2
  400c6a:	009b      	lsls	r3, r3, #2
  400c6c:	4413      	add	r3, r2
  400c6e:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400c70:	4618      	mov	r0, r3
  400c72:	bd80      	pop	{r7, pc}
  400c74:	00400a9d 	.word	0x00400a9d

00400c78 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400c78:	b580      	push	{r7, lr}
  400c7a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400c7c:	4b02      	ldr	r3, [pc, #8]	; (400c88 <sysclk_get_cpu_hz+0x10>)
  400c7e:	4798      	blx	r3
  400c80:	4603      	mov	r3, r0
  400c82:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400c84:	4618      	mov	r0, r3
  400c86:	bd80      	pop	{r7, pc}
  400c88:	00400c5d 	.word	0x00400c5d

00400c8c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400c8c:	b590      	push	{r4, r7, lr}
  400c8e:	b083      	sub	sp, #12
  400c90:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400c92:	4811      	ldr	r0, [pc, #68]	; (400cd8 <sysclk_init+0x4c>)
  400c94:	4b11      	ldr	r3, [pc, #68]	; (400cdc <sysclk_init+0x50>)
  400c96:	4798      	blx	r3

#ifdef CONFIG_PLL1_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLBCK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL1_SOURCE);
  400c98:	2006      	movs	r0, #6
  400c9a:	4b11      	ldr	r3, [pc, #68]	; (400ce0 <sysclk_init+0x54>)
  400c9c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 1);
  400c9e:	1d38      	adds	r0, r7, #4
  400ca0:	2314      	movs	r3, #20
  400ca2:	2201      	movs	r2, #1
  400ca4:	2106      	movs	r1, #6
  400ca6:	4c0f      	ldr	r4, [pc, #60]	; (400ce4 <sysclk_init+0x58>)
  400ca8:	47a0      	blx	r4
		pll_enable(&pllcfg, 1);
  400caa:	1d3b      	adds	r3, r7, #4
  400cac:	2101      	movs	r1, #1
  400cae:	4618      	mov	r0, r3
  400cb0:	4b0d      	ldr	r3, [pc, #52]	; (400ce8 <sysclk_init+0x5c>)
  400cb2:	4798      	blx	r3
		pll_wait_for_lock(1);
  400cb4:	2001      	movs	r0, #1
  400cb6:	4b0d      	ldr	r3, [pc, #52]	; (400cec <sysclk_init+0x60>)
  400cb8:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
  400cba:	2010      	movs	r0, #16
  400cbc:	4b0c      	ldr	r3, [pc, #48]	; (400cf0 <sysclk_init+0x64>)
  400cbe:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400cc0:	4b0c      	ldr	r3, [pc, #48]	; (400cf4 <sysclk_init+0x68>)
  400cc2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400cc4:	4b0c      	ldr	r3, [pc, #48]	; (400cf8 <sysclk_init+0x6c>)
  400cc6:	4798      	blx	r3
  400cc8:	4603      	mov	r3, r0
  400cca:	4618      	mov	r0, r3
  400ccc:	4b03      	ldr	r3, [pc, #12]	; (400cdc <sysclk_init+0x50>)
  400cce:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400cd0:	bf00      	nop
  400cd2:	370c      	adds	r7, #12
  400cd4:	46bd      	mov	sp, r7
  400cd6:	bd90      	pop	{r4, r7, pc}
  400cd8:	07270e00 	.word	0x07270e00
  400cdc:	00403409 	.word	0x00403409
  400ce0:	00400c01 	.word	0x00400c01
  400ce4:	00400b3d 	.word	0x00400b3d
  400ce8:	00400b91 	.word	0x00400b91
  400cec:	00400c39 	.word	0x00400c39
  400cf0:	004013f9 	.word	0x004013f9
  400cf4:	0040326d 	.word	0x0040326d
  400cf8:	00400c79 	.word	0x00400c79

00400cfc <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400cfc:	b480      	push	{r7}
  400cfe:	b085      	sub	sp, #20
  400d00:	af00      	add	r7, sp, #0
  400d02:	60f8      	str	r0, [r7, #12]
  400d04:	60b9      	str	r1, [r7, #8]
  400d06:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400d08:	687b      	ldr	r3, [r7, #4]
  400d0a:	2b00      	cmp	r3, #0
  400d0c:	d003      	beq.n	400d16 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400d0e:	68fb      	ldr	r3, [r7, #12]
  400d10:	68ba      	ldr	r2, [r7, #8]
  400d12:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400d14:	e002      	b.n	400d1c <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400d16:	68fb      	ldr	r3, [r7, #12]
  400d18:	68ba      	ldr	r2, [r7, #8]
  400d1a:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  400d1c:	bf00      	nop
  400d1e:	3714      	adds	r7, #20
  400d20:	46bd      	mov	sp, r7
  400d22:	bc80      	pop	{r7}
  400d24:	4770      	bx	lr
  400d26:	bf00      	nop

00400d28 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  400d28:	b480      	push	{r7}
  400d2a:	b085      	sub	sp, #20
  400d2c:	af00      	add	r7, sp, #0
  400d2e:	60f8      	str	r0, [r7, #12]
  400d30:	60b9      	str	r1, [r7, #8]
  400d32:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400d34:	68fb      	ldr	r3, [r7, #12]
  400d36:	68ba      	ldr	r2, [r7, #8]
  400d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400d3c:	687b      	ldr	r3, [r7, #4]
  400d3e:	005b      	lsls	r3, r3, #1
  400d40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400d44:	fbb2 f3f3 	udiv	r3, r2, r3
  400d48:	3b01      	subs	r3, #1
  400d4a:	f3c3 020d 	ubfx	r2, r3, #0, #14
  400d4e:	68fb      	ldr	r3, [r7, #12]
  400d50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  400d54:	bf00      	nop
  400d56:	3714      	adds	r7, #20
  400d58:	46bd      	mov	sp, r7
  400d5a:	bc80      	pop	{r7}
  400d5c:	4770      	bx	lr
  400d5e:	bf00      	nop

00400d60 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400d60:	b480      	push	{r7}
  400d62:	b087      	sub	sp, #28
  400d64:	af00      	add	r7, sp, #0
  400d66:	60f8      	str	r0, [r7, #12]
  400d68:	60b9      	str	r1, [r7, #8]
  400d6a:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400d6c:	68fb      	ldr	r3, [r7, #12]
  400d6e:	687a      	ldr	r2, [r7, #4]
  400d70:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400d72:	68bb      	ldr	r3, [r7, #8]
  400d74:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400d78:	d04a      	beq.n	400e10 <pio_set_peripheral+0xb0>
  400d7a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400d7e:	d808      	bhi.n	400d92 <pio_set_peripheral+0x32>
  400d80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400d84:	d016      	beq.n	400db4 <pio_set_peripheral+0x54>
  400d86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400d8a:	d02c      	beq.n	400de6 <pio_set_peripheral+0x86>
  400d8c:	2b00      	cmp	r3, #0
  400d8e:	d069      	beq.n	400e64 <pio_set_peripheral+0x104>
  400d90:	e064      	b.n	400e5c <pio_set_peripheral+0xfc>
  400d92:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400d96:	d065      	beq.n	400e64 <pio_set_peripheral+0x104>
  400d98:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400d9c:	d803      	bhi.n	400da6 <pio_set_peripheral+0x46>
  400d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400da2:	d04a      	beq.n	400e3a <pio_set_peripheral+0xda>
  400da4:	e05a      	b.n	400e5c <pio_set_peripheral+0xfc>
  400da6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400daa:	d05b      	beq.n	400e64 <pio_set_peripheral+0x104>
  400dac:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400db0:	d058      	beq.n	400e64 <pio_set_peripheral+0x104>
  400db2:	e053      	b.n	400e5c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400db4:	68fb      	ldr	r3, [r7, #12]
  400db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400db8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400dba:	68fb      	ldr	r3, [r7, #12]
  400dbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400dbe:	687b      	ldr	r3, [r7, #4]
  400dc0:	43d9      	mvns	r1, r3
  400dc2:	697b      	ldr	r3, [r7, #20]
  400dc4:	400b      	ands	r3, r1
  400dc6:	401a      	ands	r2, r3
  400dc8:	68fb      	ldr	r3, [r7, #12]
  400dca:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400dcc:	68fb      	ldr	r3, [r7, #12]
  400dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400dd0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400dd2:	68fb      	ldr	r3, [r7, #12]
  400dd4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400dd6:	687b      	ldr	r3, [r7, #4]
  400dd8:	43d9      	mvns	r1, r3
  400dda:	697b      	ldr	r3, [r7, #20]
  400ddc:	400b      	ands	r3, r1
  400dde:	401a      	ands	r2, r3
  400de0:	68fb      	ldr	r3, [r7, #12]
  400de2:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400de4:	e03a      	b.n	400e5c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400de6:	68fb      	ldr	r3, [r7, #12]
  400de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400dea:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400dec:	687a      	ldr	r2, [r7, #4]
  400dee:	697b      	ldr	r3, [r7, #20]
  400df0:	431a      	orrs	r2, r3
  400df2:	68fb      	ldr	r3, [r7, #12]
  400df4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400df6:	68fb      	ldr	r3, [r7, #12]
  400df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400dfa:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400dfc:	68fb      	ldr	r3, [r7, #12]
  400dfe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e00:	687b      	ldr	r3, [r7, #4]
  400e02:	43d9      	mvns	r1, r3
  400e04:	697b      	ldr	r3, [r7, #20]
  400e06:	400b      	ands	r3, r1
  400e08:	401a      	ands	r2, r3
  400e0a:	68fb      	ldr	r3, [r7, #12]
  400e0c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400e0e:	e025      	b.n	400e5c <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e10:	68fb      	ldr	r3, [r7, #12]
  400e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400e14:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400e16:	68fb      	ldr	r3, [r7, #12]
  400e18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e1a:	687b      	ldr	r3, [r7, #4]
  400e1c:	43d9      	mvns	r1, r3
  400e1e:	697b      	ldr	r3, [r7, #20]
  400e20:	400b      	ands	r3, r1
  400e22:	401a      	ands	r2, r3
  400e24:	68fb      	ldr	r3, [r7, #12]
  400e26:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400e28:	68fb      	ldr	r3, [r7, #12]
  400e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400e2c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400e2e:	687a      	ldr	r2, [r7, #4]
  400e30:	697b      	ldr	r3, [r7, #20]
  400e32:	431a      	orrs	r2, r3
  400e34:	68fb      	ldr	r3, [r7, #12]
  400e36:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400e38:	e010      	b.n	400e5c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e3a:	68fb      	ldr	r3, [r7, #12]
  400e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400e3e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400e40:	687a      	ldr	r2, [r7, #4]
  400e42:	697b      	ldr	r3, [r7, #20]
  400e44:	431a      	orrs	r2, r3
  400e46:	68fb      	ldr	r3, [r7, #12]
  400e48:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400e4a:	68fb      	ldr	r3, [r7, #12]
  400e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400e4e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400e50:	687a      	ldr	r2, [r7, #4]
  400e52:	697b      	ldr	r3, [r7, #20]
  400e54:	431a      	orrs	r2, r3
  400e56:	68fb      	ldr	r3, [r7, #12]
  400e58:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400e5a:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400e5c:	68fb      	ldr	r3, [r7, #12]
  400e5e:	687a      	ldr	r2, [r7, #4]
  400e60:	605a      	str	r2, [r3, #4]
  400e62:	e000      	b.n	400e66 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  400e64:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  400e66:	371c      	adds	r7, #28
  400e68:	46bd      	mov	sp, r7
  400e6a:	bc80      	pop	{r7}
  400e6c:	4770      	bx	lr
  400e6e:	bf00      	nop

00400e70 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400e70:	b580      	push	{r7, lr}
  400e72:	b084      	sub	sp, #16
  400e74:	af00      	add	r7, sp, #0
  400e76:	60f8      	str	r0, [r7, #12]
  400e78:	60b9      	str	r1, [r7, #8]
  400e7a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  400e7c:	68b9      	ldr	r1, [r7, #8]
  400e7e:	68f8      	ldr	r0, [r7, #12]
  400e80:	4b19      	ldr	r3, [pc, #100]	; (400ee8 <pio_set_input+0x78>)
  400e82:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400e84:	687b      	ldr	r3, [r7, #4]
  400e86:	f003 0301 	and.w	r3, r3, #1
  400e8a:	461a      	mov	r2, r3
  400e8c:	68b9      	ldr	r1, [r7, #8]
  400e8e:	68f8      	ldr	r0, [r7, #12]
  400e90:	4b16      	ldr	r3, [pc, #88]	; (400eec <pio_set_input+0x7c>)
  400e92:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400e94:	687b      	ldr	r3, [r7, #4]
  400e96:	f003 030a 	and.w	r3, r3, #10
  400e9a:	2b00      	cmp	r3, #0
  400e9c:	d003      	beq.n	400ea6 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  400e9e:	68fb      	ldr	r3, [r7, #12]
  400ea0:	68ba      	ldr	r2, [r7, #8]
  400ea2:	621a      	str	r2, [r3, #32]
  400ea4:	e002      	b.n	400eac <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400ea6:	68fb      	ldr	r3, [r7, #12]
  400ea8:	68ba      	ldr	r2, [r7, #8]
  400eaa:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400eac:	687b      	ldr	r3, [r7, #4]
  400eae:	f003 0302 	and.w	r3, r3, #2
  400eb2:	2b00      	cmp	r3, #0
  400eb4:	d004      	beq.n	400ec0 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  400eb6:	68fb      	ldr	r3, [r7, #12]
  400eb8:	68ba      	ldr	r2, [r7, #8]
  400eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  400ebe:	e008      	b.n	400ed2 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400ec0:	687b      	ldr	r3, [r7, #4]
  400ec2:	f003 0308 	and.w	r3, r3, #8
  400ec6:	2b00      	cmp	r3, #0
  400ec8:	d003      	beq.n	400ed2 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  400eca:	68fb      	ldr	r3, [r7, #12]
  400ecc:	68ba      	ldr	r2, [r7, #8]
  400ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400ed2:	68fb      	ldr	r3, [r7, #12]
  400ed4:	68ba      	ldr	r2, [r7, #8]
  400ed6:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400ed8:	68fb      	ldr	r3, [r7, #12]
  400eda:	68ba      	ldr	r2, [r7, #8]
  400edc:	601a      	str	r2, [r3, #0]
}
  400ede:	bf00      	nop
  400ee0:	3710      	adds	r7, #16
  400ee2:	46bd      	mov	sp, r7
  400ee4:	bd80      	pop	{r7, pc}
  400ee6:	bf00      	nop
  400ee8:	00400fdd 	.word	0x00400fdd
  400eec:	00400cfd 	.word	0x00400cfd

00400ef0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400ef0:	b580      	push	{r7, lr}
  400ef2:	b084      	sub	sp, #16
  400ef4:	af00      	add	r7, sp, #0
  400ef6:	60f8      	str	r0, [r7, #12]
  400ef8:	60b9      	str	r1, [r7, #8]
  400efa:	607a      	str	r2, [r7, #4]
  400efc:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400efe:	68b9      	ldr	r1, [r7, #8]
  400f00:	68f8      	ldr	r0, [r7, #12]
  400f02:	4b12      	ldr	r3, [pc, #72]	; (400f4c <pio_set_output+0x5c>)
  400f04:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400f06:	69ba      	ldr	r2, [r7, #24]
  400f08:	68b9      	ldr	r1, [r7, #8]
  400f0a:	68f8      	ldr	r0, [r7, #12]
  400f0c:	4b10      	ldr	r3, [pc, #64]	; (400f50 <pio_set_output+0x60>)
  400f0e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400f10:	683b      	ldr	r3, [r7, #0]
  400f12:	2b00      	cmp	r3, #0
  400f14:	d003      	beq.n	400f1e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400f16:	68fb      	ldr	r3, [r7, #12]
  400f18:	68ba      	ldr	r2, [r7, #8]
  400f1a:	651a      	str	r2, [r3, #80]	; 0x50
  400f1c:	e002      	b.n	400f24 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400f1e:	68fb      	ldr	r3, [r7, #12]
  400f20:	68ba      	ldr	r2, [r7, #8]
  400f22:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400f24:	687b      	ldr	r3, [r7, #4]
  400f26:	2b00      	cmp	r3, #0
  400f28:	d003      	beq.n	400f32 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400f2a:	68fb      	ldr	r3, [r7, #12]
  400f2c:	68ba      	ldr	r2, [r7, #8]
  400f2e:	631a      	str	r2, [r3, #48]	; 0x30
  400f30:	e002      	b.n	400f38 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400f32:	68fb      	ldr	r3, [r7, #12]
  400f34:	68ba      	ldr	r2, [r7, #8]
  400f36:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400f38:	68fb      	ldr	r3, [r7, #12]
  400f3a:	68ba      	ldr	r2, [r7, #8]
  400f3c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  400f3e:	68fb      	ldr	r3, [r7, #12]
  400f40:	68ba      	ldr	r2, [r7, #8]
  400f42:	601a      	str	r2, [r3, #0]
}
  400f44:	bf00      	nop
  400f46:	3710      	adds	r7, #16
  400f48:	46bd      	mov	sp, r7
  400f4a:	bd80      	pop	{r7, pc}
  400f4c:	00400fdd 	.word	0x00400fdd
  400f50:	00400cfd 	.word	0x00400cfd

00400f54 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  400f54:	b480      	push	{r7}
  400f56:	b085      	sub	sp, #20
  400f58:	af00      	add	r7, sp, #0
  400f5a:	60f8      	str	r0, [r7, #12]
  400f5c:	60b9      	str	r1, [r7, #8]
  400f5e:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400f60:	687b      	ldr	r3, [r7, #4]
  400f62:	f003 0310 	and.w	r3, r3, #16
  400f66:	2b00      	cmp	r3, #0
  400f68:	d020      	beq.n	400fac <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400f6a:	68fb      	ldr	r3, [r7, #12]
  400f6c:	68ba      	ldr	r2, [r7, #8]
  400f6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400f72:	687b      	ldr	r3, [r7, #4]
  400f74:	f003 0320 	and.w	r3, r3, #32
  400f78:	2b00      	cmp	r3, #0
  400f7a:	d004      	beq.n	400f86 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400f7c:	68fb      	ldr	r3, [r7, #12]
  400f7e:	68ba      	ldr	r2, [r7, #8]
  400f80:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400f84:	e003      	b.n	400f8e <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400f86:	68fb      	ldr	r3, [r7, #12]
  400f88:	68ba      	ldr	r2, [r7, #8]
  400f8a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400f8e:	687b      	ldr	r3, [r7, #4]
  400f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
  400f94:	2b00      	cmp	r3, #0
  400f96:	d004      	beq.n	400fa2 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400f98:	68fb      	ldr	r3, [r7, #12]
  400f9a:	68ba      	ldr	r2, [r7, #8]
  400f9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  400fa0:	e008      	b.n	400fb4 <pio_configure_interrupt+0x60>
		if (ul_attr & PIO_IT_EDGE) {
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  400fa2:	68fb      	ldr	r3, [r7, #12]
  400fa4:	68ba      	ldr	r2, [r7, #8]
  400fa6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  400faa:	e003      	b.n	400fb4 <pio_configure_interrupt+0x60>
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400fac:	68fb      	ldr	r3, [r7, #12]
  400fae:	68ba      	ldr	r2, [r7, #8]
  400fb0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  400fb4:	bf00      	nop
  400fb6:	3714      	adds	r7, #20
  400fb8:	46bd      	mov	sp, r7
  400fba:	bc80      	pop	{r7}
  400fbc:	4770      	bx	lr
  400fbe:	bf00      	nop

00400fc0 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400fc0:	b480      	push	{r7}
  400fc2:	b083      	sub	sp, #12
  400fc4:	af00      	add	r7, sp, #0
  400fc6:	6078      	str	r0, [r7, #4]
  400fc8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  400fca:	687b      	ldr	r3, [r7, #4]
  400fcc:	683a      	ldr	r2, [r7, #0]
  400fce:	641a      	str	r2, [r3, #64]	; 0x40
}
  400fd0:	bf00      	nop
  400fd2:	370c      	adds	r7, #12
  400fd4:	46bd      	mov	sp, r7
  400fd6:	bc80      	pop	{r7}
  400fd8:	4770      	bx	lr
  400fda:	bf00      	nop

00400fdc <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400fdc:	b480      	push	{r7}
  400fde:	b083      	sub	sp, #12
  400fe0:	af00      	add	r7, sp, #0
  400fe2:	6078      	str	r0, [r7, #4]
  400fe4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400fe6:	687b      	ldr	r3, [r7, #4]
  400fe8:	683a      	ldr	r2, [r7, #0]
  400fea:	645a      	str	r2, [r3, #68]	; 0x44
}
  400fec:	bf00      	nop
  400fee:	370c      	adds	r7, #12
  400ff0:	46bd      	mov	sp, r7
  400ff2:	bc80      	pop	{r7}
  400ff4:	4770      	bx	lr
  400ff6:	bf00      	nop

00400ff8 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400ff8:	b480      	push	{r7}
  400ffa:	b083      	sub	sp, #12
  400ffc:	af00      	add	r7, sp, #0
  400ffe:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401000:	687b      	ldr	r3, [r7, #4]
  401002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401004:	4618      	mov	r0, r3
  401006:	370c      	adds	r7, #12
  401008:	46bd      	mov	sp, r7
  40100a:	bc80      	pop	{r7}
  40100c:	4770      	bx	lr
  40100e:	bf00      	nop

00401010 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401010:	b480      	push	{r7}
  401012:	b083      	sub	sp, #12
  401014:	af00      	add	r7, sp, #0
  401016:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401018:	687b      	ldr	r3, [r7, #4]
  40101a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  40101c:	4618      	mov	r0, r3
  40101e:	370c      	adds	r7, #12
  401020:	46bd      	mov	sp, r7
  401022:	bc80      	pop	{r7}
  401024:	4770      	bx	lr
  401026:	bf00      	nop

00401028 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401028:	b590      	push	{r4, r7, lr}
  40102a:	b087      	sub	sp, #28
  40102c:	af02      	add	r7, sp, #8
  40102e:	6078      	str	r0, [r7, #4]
  401030:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401032:	6878      	ldr	r0, [r7, #4]
  401034:	4b63      	ldr	r3, [pc, #396]	; (4011c4 <pio_configure_pin+0x19c>)
  401036:	4798      	blx	r3
  401038:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40103a:	683b      	ldr	r3, [r7, #0]
  40103c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401044:	d067      	beq.n	401116 <pio_configure_pin+0xee>
  401046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40104a:	d809      	bhi.n	401060 <pio_configure_pin+0x38>
  40104c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401050:	d02b      	beq.n	4010aa <pio_configure_pin+0x82>
  401052:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401056:	d043      	beq.n	4010e0 <pio_configure_pin+0xb8>
  401058:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40105c:	d00a      	beq.n	401074 <pio_configure_pin+0x4c>
  40105e:	e0a9      	b.n	4011b4 <pio_configure_pin+0x18c>
  401060:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401064:	d07e      	beq.n	401164 <pio_configure_pin+0x13c>
  401066:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40106a:	d07b      	beq.n	401164 <pio_configure_pin+0x13c>
  40106c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401070:	d06c      	beq.n	40114c <pio_configure_pin+0x124>
  401072:	e09f      	b.n	4011b4 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401074:	687b      	ldr	r3, [r7, #4]
  401076:	f003 031f 	and.w	r3, r3, #31
  40107a:	2201      	movs	r2, #1
  40107c:	fa02 f303 	lsl.w	r3, r2, r3
  401080:	461a      	mov	r2, r3
  401082:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401086:	68f8      	ldr	r0, [r7, #12]
  401088:	4b4f      	ldr	r3, [pc, #316]	; (4011c8 <pio_configure_pin+0x1a0>)
  40108a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40108c:	687b      	ldr	r3, [r7, #4]
  40108e:	f003 031f 	and.w	r3, r3, #31
  401092:	2201      	movs	r2, #1
  401094:	fa02 f303 	lsl.w	r3, r2, r3
  401098:	4619      	mov	r1, r3
  40109a:	683b      	ldr	r3, [r7, #0]
  40109c:	f003 0301 	and.w	r3, r3, #1
  4010a0:	461a      	mov	r2, r3
  4010a2:	68f8      	ldr	r0, [r7, #12]
  4010a4:	4b49      	ldr	r3, [pc, #292]	; (4011cc <pio_configure_pin+0x1a4>)
  4010a6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4010a8:	e086      	b.n	4011b8 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4010aa:	687b      	ldr	r3, [r7, #4]
  4010ac:	f003 031f 	and.w	r3, r3, #31
  4010b0:	2201      	movs	r2, #1
  4010b2:	fa02 f303 	lsl.w	r3, r2, r3
  4010b6:	461a      	mov	r2, r3
  4010b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4010bc:	68f8      	ldr	r0, [r7, #12]
  4010be:	4b42      	ldr	r3, [pc, #264]	; (4011c8 <pio_configure_pin+0x1a0>)
  4010c0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4010c2:	687b      	ldr	r3, [r7, #4]
  4010c4:	f003 031f 	and.w	r3, r3, #31
  4010c8:	2201      	movs	r2, #1
  4010ca:	fa02 f303 	lsl.w	r3, r2, r3
  4010ce:	4619      	mov	r1, r3
  4010d0:	683b      	ldr	r3, [r7, #0]
  4010d2:	f003 0301 	and.w	r3, r3, #1
  4010d6:	461a      	mov	r2, r3
  4010d8:	68f8      	ldr	r0, [r7, #12]
  4010da:	4b3c      	ldr	r3, [pc, #240]	; (4011cc <pio_configure_pin+0x1a4>)
  4010dc:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4010de:	e06b      	b.n	4011b8 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4010e0:	687b      	ldr	r3, [r7, #4]
  4010e2:	f003 031f 	and.w	r3, r3, #31
  4010e6:	2201      	movs	r2, #1
  4010e8:	fa02 f303 	lsl.w	r3, r2, r3
  4010ec:	461a      	mov	r2, r3
  4010ee:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4010f2:	68f8      	ldr	r0, [r7, #12]
  4010f4:	4b34      	ldr	r3, [pc, #208]	; (4011c8 <pio_configure_pin+0x1a0>)
  4010f6:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4010f8:	687b      	ldr	r3, [r7, #4]
  4010fa:	f003 031f 	and.w	r3, r3, #31
  4010fe:	2201      	movs	r2, #1
  401100:	fa02 f303 	lsl.w	r3, r2, r3
  401104:	4619      	mov	r1, r3
  401106:	683b      	ldr	r3, [r7, #0]
  401108:	f003 0301 	and.w	r3, r3, #1
  40110c:	461a      	mov	r2, r3
  40110e:	68f8      	ldr	r0, [r7, #12]
  401110:	4b2e      	ldr	r3, [pc, #184]	; (4011cc <pio_configure_pin+0x1a4>)
  401112:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401114:	e050      	b.n	4011b8 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401116:	687b      	ldr	r3, [r7, #4]
  401118:	f003 031f 	and.w	r3, r3, #31
  40111c:	2201      	movs	r2, #1
  40111e:	fa02 f303 	lsl.w	r3, r2, r3
  401122:	461a      	mov	r2, r3
  401124:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401128:	68f8      	ldr	r0, [r7, #12]
  40112a:	4b27      	ldr	r3, [pc, #156]	; (4011c8 <pio_configure_pin+0x1a0>)
  40112c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40112e:	687b      	ldr	r3, [r7, #4]
  401130:	f003 031f 	and.w	r3, r3, #31
  401134:	2201      	movs	r2, #1
  401136:	fa02 f303 	lsl.w	r3, r2, r3
  40113a:	4619      	mov	r1, r3
  40113c:	683b      	ldr	r3, [r7, #0]
  40113e:	f003 0301 	and.w	r3, r3, #1
  401142:	461a      	mov	r2, r3
  401144:	68f8      	ldr	r0, [r7, #12]
  401146:	4b21      	ldr	r3, [pc, #132]	; (4011cc <pio_configure_pin+0x1a4>)
  401148:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40114a:	e035      	b.n	4011b8 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40114c:	687b      	ldr	r3, [r7, #4]
  40114e:	f003 031f 	and.w	r3, r3, #31
  401152:	2201      	movs	r2, #1
  401154:	fa02 f303 	lsl.w	r3, r2, r3
  401158:	683a      	ldr	r2, [r7, #0]
  40115a:	4619      	mov	r1, r3
  40115c:	68f8      	ldr	r0, [r7, #12]
  40115e:	4b1c      	ldr	r3, [pc, #112]	; (4011d0 <pio_configure_pin+0x1a8>)
  401160:	4798      	blx	r3
		break;
  401162:	e029      	b.n	4011b8 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401164:	687b      	ldr	r3, [r7, #4]
  401166:	f003 031f 	and.w	r3, r3, #31
  40116a:	2201      	movs	r2, #1
  40116c:	fa02 f303 	lsl.w	r3, r2, r3
  401170:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401172:	683b      	ldr	r3, [r7, #0]
  401174:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401178:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40117c:	bf0c      	ite	eq
  40117e:	2301      	moveq	r3, #1
  401180:	2300      	movne	r3, #0
  401182:	b2db      	uxtb	r3, r3
  401184:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401186:	683b      	ldr	r3, [r7, #0]
  401188:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40118c:	2b00      	cmp	r3, #0
  40118e:	bf14      	ite	ne
  401190:	2301      	movne	r3, #1
  401192:	2300      	moveq	r3, #0
  401194:	b2db      	uxtb	r3, r3
  401196:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401198:	683b      	ldr	r3, [r7, #0]
  40119a:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40119e:	2b00      	cmp	r3, #0
  4011a0:	bf14      	ite	ne
  4011a2:	2301      	movne	r3, #1
  4011a4:	2300      	moveq	r3, #0
  4011a6:	b2db      	uxtb	r3, r3
  4011a8:	9300      	str	r3, [sp, #0]
  4011aa:	4603      	mov	r3, r0
  4011ac:	68f8      	ldr	r0, [r7, #12]
  4011ae:	4c09      	ldr	r4, [pc, #36]	; (4011d4 <pio_configure_pin+0x1ac>)
  4011b0:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4011b2:	e001      	b.n	4011b8 <pio_configure_pin+0x190>

	default:
		return 0;
  4011b4:	2300      	movs	r3, #0
  4011b6:	e000      	b.n	4011ba <pio_configure_pin+0x192>
	}

	return 1;
  4011b8:	2301      	movs	r3, #1
}
  4011ba:	4618      	mov	r0, r3
  4011bc:	3714      	adds	r7, #20
  4011be:	46bd      	mov	sp, r7
  4011c0:	bd90      	pop	{r4, r7, pc}
  4011c2:	bf00      	nop
  4011c4:	004011d9 	.word	0x004011d9
  4011c8:	00400d61 	.word	0x00400d61
  4011cc:	00400cfd 	.word	0x00400cfd
  4011d0:	00400e71 	.word	0x00400e71
  4011d4:	00400ef1 	.word	0x00400ef1

004011d8 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  4011d8:	b480      	push	{r7}
  4011da:	b085      	sub	sp, #20
  4011dc:	af00      	add	r7, sp, #0
  4011de:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4011e0:	687b      	ldr	r3, [r7, #4]
  4011e2:	095b      	lsrs	r3, r3, #5
  4011e4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4011e8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4011ec:	025b      	lsls	r3, r3, #9
  4011ee:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  4011f0:	68fb      	ldr	r3, [r7, #12]
}
  4011f2:	4618      	mov	r0, r3
  4011f4:	3714      	adds	r7, #20
  4011f6:	46bd      	mov	sp, r7
  4011f8:	bc80      	pop	{r7}
  4011fa:	4770      	bx	lr

004011fc <pio_capture_enable>:
 * \brief Enable PIO capture mode.
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_enable(Pio *p_pio)
{
  4011fc:	b480      	push	{r7}
  4011fe:	b083      	sub	sp, #12
  401200:	af00      	add	r7, sp, #0
  401202:	6078      	str	r0, [r7, #4]
	p_pio->PIO_PCMR |= PIO_PCMR_PCEN;
  401204:	687b      	ldr	r3, [r7, #4]
  401206:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  40120a:	f043 0201 	orr.w	r2, r3, #1
  40120e:	687b      	ldr	r3, [r7, #4]
  401210:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	pio_capture_enable_flag = true;
  401214:	4b03      	ldr	r3, [pc, #12]	; (401224 <pio_capture_enable+0x28>)
  401216:	2201      	movs	r2, #1
  401218:	601a      	str	r2, [r3, #0]
}
  40121a:	bf00      	nop
  40121c:	370c      	adds	r7, #12
  40121e:	46bd      	mov	sp, r7
  401220:	bc80      	pop	{r7}
  401222:	4770      	bx	lr
  401224:	2001b72c 	.word	0x2001b72c

00401228 <pio_capture_disable>:
 * \brief Disable PIO capture mode.
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_disable(Pio *p_pio)
{
  401228:	b480      	push	{r7}
  40122a:	b083      	sub	sp, #12
  40122c:	af00      	add	r7, sp, #0
  40122e:	6078      	str	r0, [r7, #4]
	p_pio->PIO_PCMR &= (~PIO_PCMR_PCEN);
  401230:	687b      	ldr	r3, [r7, #4]
  401232:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401236:	f023 0201 	bic.w	r2, r3, #1
  40123a:	687b      	ldr	r3, [r7, #4]
  40123c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	pio_capture_enable_flag = false;
  401240:	4b03      	ldr	r3, [pc, #12]	; (401250 <pio_capture_disable+0x28>)
  401242:	2200      	movs	r2, #0
  401244:	601a      	str	r2, [r3, #0]
}
  401246:	bf00      	nop
  401248:	370c      	adds	r7, #12
  40124a:	46bd      	mov	sp, r7
  40124c:	bc80      	pop	{r7}
  40124e:	4770      	bx	lr
  401250:	2001b72c 	.word	0x2001b72c

00401254 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401254:	b580      	push	{r7, lr}
  401256:	b084      	sub	sp, #16
  401258:	af00      	add	r7, sp, #0
  40125a:	6078      	str	r0, [r7, #4]
  40125c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40125e:	6878      	ldr	r0, [r7, #4]
  401260:	4b2c      	ldr	r3, [pc, #176]	; (401314 <pio_handler_process+0xc0>)
  401262:	4798      	blx	r3
  401264:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  401266:	6878      	ldr	r0, [r7, #4]
  401268:	4b2b      	ldr	r3, [pc, #172]	; (401318 <pio_handler_process+0xc4>)
  40126a:	4798      	blx	r3
  40126c:	4602      	mov	r2, r0
  40126e:	68fb      	ldr	r3, [r7, #12]
  401270:	4013      	ands	r3, r2
  401272:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  401274:	68fb      	ldr	r3, [r7, #12]
  401276:	2b00      	cmp	r3, #0
  401278:	d03c      	beq.n	4012f4 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40127a:	2300      	movs	r3, #0
  40127c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40127e:	e034      	b.n	4012ea <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401280:	4a26      	ldr	r2, [pc, #152]	; (40131c <pio_handler_process+0xc8>)
  401282:	68bb      	ldr	r3, [r7, #8]
  401284:	011b      	lsls	r3, r3, #4
  401286:	4413      	add	r3, r2
  401288:	681a      	ldr	r2, [r3, #0]
  40128a:	683b      	ldr	r3, [r7, #0]
  40128c:	429a      	cmp	r2, r3
  40128e:	d126      	bne.n	4012de <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401290:	4a22      	ldr	r2, [pc, #136]	; (40131c <pio_handler_process+0xc8>)
  401292:	68bb      	ldr	r3, [r7, #8]
  401294:	011b      	lsls	r3, r3, #4
  401296:	4413      	add	r3, r2
  401298:	3304      	adds	r3, #4
  40129a:	681a      	ldr	r2, [r3, #0]
  40129c:	68fb      	ldr	r3, [r7, #12]
  40129e:	4013      	ands	r3, r2
  4012a0:	2b00      	cmp	r3, #0
  4012a2:	d01c      	beq.n	4012de <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4012a4:	4a1d      	ldr	r2, [pc, #116]	; (40131c <pio_handler_process+0xc8>)
  4012a6:	68bb      	ldr	r3, [r7, #8]
  4012a8:	011b      	lsls	r3, r3, #4
  4012aa:	4413      	add	r3, r2
  4012ac:	330c      	adds	r3, #12
  4012ae:	681b      	ldr	r3, [r3, #0]
  4012b0:	491a      	ldr	r1, [pc, #104]	; (40131c <pio_handler_process+0xc8>)
  4012b2:	68ba      	ldr	r2, [r7, #8]
  4012b4:	0112      	lsls	r2, r2, #4
  4012b6:	440a      	add	r2, r1
  4012b8:	6810      	ldr	r0, [r2, #0]
  4012ba:	4918      	ldr	r1, [pc, #96]	; (40131c <pio_handler_process+0xc8>)
  4012bc:	68ba      	ldr	r2, [r7, #8]
  4012be:	0112      	lsls	r2, r2, #4
  4012c0:	440a      	add	r2, r1
  4012c2:	3204      	adds	r2, #4
  4012c4:	6812      	ldr	r2, [r2, #0]
  4012c6:	4611      	mov	r1, r2
  4012c8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4012ca:	4a14      	ldr	r2, [pc, #80]	; (40131c <pio_handler_process+0xc8>)
  4012cc:	68bb      	ldr	r3, [r7, #8]
  4012ce:	011b      	lsls	r3, r3, #4
  4012d0:	4413      	add	r3, r2
  4012d2:	3304      	adds	r3, #4
  4012d4:	681b      	ldr	r3, [r3, #0]
  4012d6:	43db      	mvns	r3, r3
  4012d8:	68fa      	ldr	r2, [r7, #12]
  4012da:	4013      	ands	r3, r2
  4012dc:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4012de:	68bb      	ldr	r3, [r7, #8]
  4012e0:	3301      	adds	r3, #1
  4012e2:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4012e4:	68bb      	ldr	r3, [r7, #8]
  4012e6:	2b06      	cmp	r3, #6
  4012e8:	d803      	bhi.n	4012f2 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4012ea:	68fb      	ldr	r3, [r7, #12]
  4012ec:	2b00      	cmp	r3, #0
  4012ee:	d1c7      	bne.n	401280 <pio_handler_process+0x2c>
  4012f0:	e000      	b.n	4012f4 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  4012f2:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4012f4:	4b0a      	ldr	r3, [pc, #40]	; (401320 <pio_handler_process+0xcc>)
  4012f6:	681b      	ldr	r3, [r3, #0]
  4012f8:	2b00      	cmp	r3, #0
  4012fa:	d007      	beq.n	40130c <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4012fc:	4b09      	ldr	r3, [pc, #36]	; (401324 <pio_handler_process+0xd0>)
  4012fe:	681b      	ldr	r3, [r3, #0]
  401300:	2b00      	cmp	r3, #0
  401302:	d003      	beq.n	40130c <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  401304:	4b07      	ldr	r3, [pc, #28]	; (401324 <pio_handler_process+0xd0>)
  401306:	681b      	ldr	r3, [r3, #0]
  401308:	6878      	ldr	r0, [r7, #4]
  40130a:	4798      	blx	r3
		}
	}
#endif
}
  40130c:	bf00      	nop
  40130e:	3710      	adds	r7, #16
  401310:	46bd      	mov	sp, r7
  401312:	bd80      	pop	{r7, pc}
  401314:	00400ff9 	.word	0x00400ff9
  401318:	00401011 	.word	0x00401011
  40131c:	200008b8 	.word	0x200008b8
  401320:	2001b72c 	.word	0x2001b72c
  401324:	2000092c 	.word	0x2000092c

00401328 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  401328:	b580      	push	{r7, lr}
  40132a:	b086      	sub	sp, #24
  40132c:	af00      	add	r7, sp, #0
  40132e:	60f8      	str	r0, [r7, #12]
  401330:	60b9      	str	r1, [r7, #8]
  401332:	607a      	str	r2, [r7, #4]
  401334:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  401336:	4b21      	ldr	r3, [pc, #132]	; (4013bc <pio_handler_set+0x94>)
  401338:	681b      	ldr	r3, [r3, #0]
  40133a:	2b06      	cmp	r3, #6
  40133c:	d901      	bls.n	401342 <pio_handler_set+0x1a>
		return 1;
  40133e:	2301      	movs	r3, #1
  401340:	e038      	b.n	4013b4 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401342:	2300      	movs	r3, #0
  401344:	75fb      	strb	r3, [r7, #23]
  401346:	e011      	b.n	40136c <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  401348:	7dfb      	ldrb	r3, [r7, #23]
  40134a:	011b      	lsls	r3, r3, #4
  40134c:	4a1c      	ldr	r2, [pc, #112]	; (4013c0 <pio_handler_set+0x98>)
  40134e:	4413      	add	r3, r2
  401350:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401352:	693b      	ldr	r3, [r7, #16]
  401354:	681a      	ldr	r2, [r3, #0]
  401356:	68bb      	ldr	r3, [r7, #8]
  401358:	429a      	cmp	r2, r3
  40135a:	d104      	bne.n	401366 <pio_handler_set+0x3e>
  40135c:	693b      	ldr	r3, [r7, #16]
  40135e:	685a      	ldr	r2, [r3, #4]
  401360:	687b      	ldr	r3, [r7, #4]
  401362:	429a      	cmp	r2, r3
  401364:	d008      	beq.n	401378 <pio_handler_set+0x50>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401366:	7dfb      	ldrb	r3, [r7, #23]
  401368:	3301      	adds	r3, #1
  40136a:	75fb      	strb	r3, [r7, #23]
  40136c:	7dfa      	ldrb	r2, [r7, #23]
  40136e:	4b13      	ldr	r3, [pc, #76]	; (4013bc <pio_handler_set+0x94>)
  401370:	681b      	ldr	r3, [r3, #0]
  401372:	429a      	cmp	r2, r3
  401374:	d9e8      	bls.n	401348 <pio_handler_set+0x20>
  401376:	e000      	b.n	40137a <pio_handler_set+0x52>
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
			break;
  401378:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40137a:	693b      	ldr	r3, [r7, #16]
  40137c:	68ba      	ldr	r2, [r7, #8]
  40137e:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  401380:	693b      	ldr	r3, [r7, #16]
  401382:	687a      	ldr	r2, [r7, #4]
  401384:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  401386:	693b      	ldr	r3, [r7, #16]
  401388:	683a      	ldr	r2, [r7, #0]
  40138a:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  40138c:	693b      	ldr	r3, [r7, #16]
  40138e:	6a3a      	ldr	r2, [r7, #32]
  401390:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  401392:	7dfa      	ldrb	r2, [r7, #23]
  401394:	4b09      	ldr	r3, [pc, #36]	; (4013bc <pio_handler_set+0x94>)
  401396:	681b      	ldr	r3, [r3, #0]
  401398:	3301      	adds	r3, #1
  40139a:	429a      	cmp	r2, r3
  40139c:	d104      	bne.n	4013a8 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  40139e:	4b07      	ldr	r3, [pc, #28]	; (4013bc <pio_handler_set+0x94>)
  4013a0:	681b      	ldr	r3, [r3, #0]
  4013a2:	3301      	adds	r3, #1
  4013a4:	4a05      	ldr	r2, [pc, #20]	; (4013bc <pio_handler_set+0x94>)
  4013a6:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4013a8:	683a      	ldr	r2, [r7, #0]
  4013aa:	6879      	ldr	r1, [r7, #4]
  4013ac:	68f8      	ldr	r0, [r7, #12]
  4013ae:	4b05      	ldr	r3, [pc, #20]	; (4013c4 <pio_handler_set+0x9c>)
  4013b0:	4798      	blx	r3

	return 0;
  4013b2:	2300      	movs	r3, #0
}
  4013b4:	4618      	mov	r0, r3
  4013b6:	3718      	adds	r7, #24
  4013b8:	46bd      	mov	sp, r7
  4013ba:	bd80      	pop	{r7, pc}
  4013bc:	20000928 	.word	0x20000928
  4013c0:	200008b8 	.word	0x200008b8
  4013c4:	00400f55 	.word	0x00400f55

004013c8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4013c8:	b580      	push	{r7, lr}
  4013ca:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4013cc:	210b      	movs	r1, #11
  4013ce:	4802      	ldr	r0, [pc, #8]	; (4013d8 <PIOA_Handler+0x10>)
  4013d0:	4b02      	ldr	r3, [pc, #8]	; (4013dc <PIOA_Handler+0x14>)
  4013d2:	4798      	blx	r3
}
  4013d4:	bf00      	nop
  4013d6:	bd80      	pop	{r7, pc}
  4013d8:	400e0e00 	.word	0x400e0e00
  4013dc:	00401255 	.word	0x00401255

004013e0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4013e0:	b580      	push	{r7, lr}
  4013e2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4013e4:	210c      	movs	r1, #12
  4013e6:	4802      	ldr	r0, [pc, #8]	; (4013f0 <PIOB_Handler+0x10>)
  4013e8:	4b02      	ldr	r3, [pc, #8]	; (4013f4 <PIOB_Handler+0x14>)
  4013ea:	4798      	blx	r3
}
  4013ec:	bf00      	nop
  4013ee:	bd80      	pop	{r7, pc}
  4013f0:	400e1000 	.word	0x400e1000
  4013f4:	00401255 	.word	0x00401255

004013f8 <pmc_switch_mck_to_pllbck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
{
  4013f8:	b480      	push	{r7}
  4013fa:	b085      	sub	sp, #20
  4013fc:	af00      	add	r7, sp, #0
  4013fe:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401400:	491b      	ldr	r1, [pc, #108]	; (401470 <pmc_switch_mck_to_pllbck+0x78>)
  401402:	4b1b      	ldr	r3, [pc, #108]	; (401470 <pmc_switch_mck_to_pllbck+0x78>)
  401404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401406:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40140a:	687b      	ldr	r3, [r7, #4]
  40140c:	4313      	orrs	r3, r2
  40140e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401410:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401414:	60fb      	str	r3, [r7, #12]
  401416:	e007      	b.n	401428 <pmc_switch_mck_to_pllbck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401418:	68fb      	ldr	r3, [r7, #12]
  40141a:	2b00      	cmp	r3, #0
  40141c:	d101      	bne.n	401422 <pmc_switch_mck_to_pllbck+0x2a>
			return 1;
  40141e:	2301      	movs	r3, #1
  401420:	e021      	b.n	401466 <pmc_switch_mck_to_pllbck+0x6e>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  401422:	68fb      	ldr	r3, [r7, #12]
  401424:	3b01      	subs	r3, #1
  401426:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401428:	4b11      	ldr	r3, [pc, #68]	; (401470 <pmc_switch_mck_to_pllbck+0x78>)
  40142a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40142c:	f003 0308 	and.w	r3, r3, #8
  401430:	2b00      	cmp	r3, #0
  401432:	d0f1      	beq.n	401418 <pmc_switch_mck_to_pllbck+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401434:	4a0e      	ldr	r2, [pc, #56]	; (401470 <pmc_switch_mck_to_pllbck+0x78>)
  401436:	4b0e      	ldr	r3, [pc, #56]	; (401470 <pmc_switch_mck_to_pllbck+0x78>)
  401438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40143a:	f043 0303 	orr.w	r3, r3, #3
  40143e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401440:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401444:	60fb      	str	r3, [r7, #12]
  401446:	e007      	b.n	401458 <pmc_switch_mck_to_pllbck+0x60>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401448:	68fb      	ldr	r3, [r7, #12]
  40144a:	2b00      	cmp	r3, #0
  40144c:	d101      	bne.n	401452 <pmc_switch_mck_to_pllbck+0x5a>
			return 1;
  40144e:	2301      	movs	r3, #1
  401450:	e009      	b.n	401466 <pmc_switch_mck_to_pllbck+0x6e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  401452:	68fb      	ldr	r3, [r7, #12]
  401454:	3b01      	subs	r3, #1
  401456:	60fb      	str	r3, [r7, #12]
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401458:	4b05      	ldr	r3, [pc, #20]	; (401470 <pmc_switch_mck_to_pllbck+0x78>)
  40145a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40145c:	f003 0308 	and.w	r3, r3, #8
  401460:	2b00      	cmp	r3, #0
  401462:	d0f1      	beq.n	401448 <pmc_switch_mck_to_pllbck+0x50>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401464:	2300      	movs	r3, #0
}
  401466:	4618      	mov	r0, r3
  401468:	3714      	adds	r7, #20
  40146a:	46bd      	mov	sp, r7
  40146c:	bc80      	pop	{r7}
  40146e:	4770      	bx	lr
  401470:	400e0400 	.word	0x400e0400

00401474 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401474:	b480      	push	{r7}
  401476:	b083      	sub	sp, #12
  401478:	af00      	add	r7, sp, #0
  40147a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  40147c:	687b      	ldr	r3, [r7, #4]
  40147e:	2b01      	cmp	r3, #1
  401480:	d107      	bne.n	401492 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  401482:	4a08      	ldr	r2, [pc, #32]	; (4014a4 <pmc_switch_sclk_to_32kxtal+0x30>)
  401484:	4b07      	ldr	r3, [pc, #28]	; (4014a4 <pmc_switch_sclk_to_32kxtal+0x30>)
  401486:	689b      	ldr	r3, [r3, #8]
  401488:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  40148c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401490:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  401492:	4b04      	ldr	r3, [pc, #16]	; (4014a4 <pmc_switch_sclk_to_32kxtal+0x30>)
  401494:	4a04      	ldr	r2, [pc, #16]	; (4014a8 <pmc_switch_sclk_to_32kxtal+0x34>)
  401496:	601a      	str	r2, [r3, #0]
}
  401498:	bf00      	nop
  40149a:	370c      	adds	r7, #12
  40149c:	46bd      	mov	sp, r7
  40149e:	bc80      	pop	{r7}
  4014a0:	4770      	bx	lr
  4014a2:	bf00      	nop
  4014a4:	400e1410 	.word	0x400e1410
  4014a8:	a5000008 	.word	0xa5000008

004014ac <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4014ac:	b480      	push	{r7}
  4014ae:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4014b0:	4b09      	ldr	r3, [pc, #36]	; (4014d8 <pmc_osc_is_ready_32kxtal+0x2c>)
  4014b2:	695b      	ldr	r3, [r3, #20]
  4014b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4014b8:	2b00      	cmp	r3, #0
  4014ba:	d007      	beq.n	4014cc <pmc_osc_is_ready_32kxtal+0x20>
  4014bc:	4b07      	ldr	r3, [pc, #28]	; (4014dc <pmc_osc_is_ready_32kxtal+0x30>)
  4014be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4014c4:	2b00      	cmp	r3, #0
  4014c6:	d001      	beq.n	4014cc <pmc_osc_is_ready_32kxtal+0x20>
  4014c8:	2301      	movs	r3, #1
  4014ca:	e000      	b.n	4014ce <pmc_osc_is_ready_32kxtal+0x22>
  4014cc:	2300      	movs	r3, #0
}
  4014ce:	4618      	mov	r0, r3
  4014d0:	46bd      	mov	sp, r7
  4014d2:	bc80      	pop	{r7}
  4014d4:	4770      	bx	lr
  4014d6:	bf00      	nop
  4014d8:	400e1410 	.word	0x400e1410
  4014dc:	400e0400 	.word	0x400e0400

004014e0 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4014e0:	b480      	push	{r7}
  4014e2:	b083      	sub	sp, #12
  4014e4:	af00      	add	r7, sp, #0
  4014e6:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4014e8:	4a18      	ldr	r2, [pc, #96]	; (40154c <pmc_switch_mainck_to_fastrc+0x6c>)
  4014ea:	4b18      	ldr	r3, [pc, #96]	; (40154c <pmc_switch_mainck_to_fastrc+0x6c>)
  4014ec:	6a1b      	ldr	r3, [r3, #32]
  4014ee:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4014f2:	f043 0308 	orr.w	r3, r3, #8
  4014f6:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4014f8:	bf00      	nop
  4014fa:	4b14      	ldr	r3, [pc, #80]	; (40154c <pmc_switch_mainck_to_fastrc+0x6c>)
  4014fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401502:	2b00      	cmp	r3, #0
  401504:	d0f9      	beq.n	4014fa <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401506:	4911      	ldr	r1, [pc, #68]	; (40154c <pmc_switch_mainck_to_fastrc+0x6c>)
  401508:	4b10      	ldr	r3, [pc, #64]	; (40154c <pmc_switch_mainck_to_fastrc+0x6c>)
  40150a:	6a1b      	ldr	r3, [r3, #32]
  40150c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401514:	687a      	ldr	r2, [r7, #4]
  401516:	4313      	orrs	r3, r2
  401518:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40151c:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40151e:	bf00      	nop
  401520:	4b0a      	ldr	r3, [pc, #40]	; (40154c <pmc_switch_mainck_to_fastrc+0x6c>)
  401522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401528:	2b00      	cmp	r3, #0
  40152a:	d0f9      	beq.n	401520 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40152c:	4a07      	ldr	r2, [pc, #28]	; (40154c <pmc_switch_mainck_to_fastrc+0x6c>)
  40152e:	4b07      	ldr	r3, [pc, #28]	; (40154c <pmc_switch_mainck_to_fastrc+0x6c>)
  401530:	6a1b      	ldr	r3, [r3, #32]
  401532:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  401536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40153a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40153e:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401540:	bf00      	nop
  401542:	370c      	adds	r7, #12
  401544:	46bd      	mov	sp, r7
  401546:	bc80      	pop	{r7}
  401548:	4770      	bx	lr
  40154a:	bf00      	nop
  40154c:	400e0400 	.word	0x400e0400

00401550 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401550:	b480      	push	{r7}
  401552:	b083      	sub	sp, #12
  401554:	af00      	add	r7, sp, #0
  401556:	6078      	str	r0, [r7, #4]
  401558:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40155a:	687b      	ldr	r3, [r7, #4]
  40155c:	2b00      	cmp	r3, #0
  40155e:	d008      	beq.n	401572 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401560:	4916      	ldr	r1, [pc, #88]	; (4015bc <pmc_switch_mainck_to_xtal+0x6c>)
  401562:	4b16      	ldr	r3, [pc, #88]	; (4015bc <pmc_switch_mainck_to_xtal+0x6c>)
  401564:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401566:	4a16      	ldr	r2, [pc, #88]	; (4015c0 <pmc_switch_mainck_to_xtal+0x70>)
  401568:	401a      	ands	r2, r3
  40156a:	4b16      	ldr	r3, [pc, #88]	; (4015c4 <pmc_switch_mainck_to_xtal+0x74>)
  40156c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40156e:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401570:	e01e      	b.n	4015b0 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401572:	4912      	ldr	r1, [pc, #72]	; (4015bc <pmc_switch_mainck_to_xtal+0x6c>)
  401574:	4b11      	ldr	r3, [pc, #68]	; (4015bc <pmc_switch_mainck_to_xtal+0x6c>)
  401576:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401578:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40157c:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401580:	683a      	ldr	r2, [r7, #0]
  401582:	0212      	lsls	r2, r2, #8
  401584:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401586:	4313      	orrs	r3, r2
  401588:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40158c:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401590:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401592:	bf00      	nop
  401594:	4b09      	ldr	r3, [pc, #36]	; (4015bc <pmc_switch_mainck_to_xtal+0x6c>)
  401596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401598:	f003 0301 	and.w	r3, r3, #1
  40159c:	2b00      	cmp	r3, #0
  40159e:	d0f9      	beq.n	401594 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4015a0:	4a06      	ldr	r2, [pc, #24]	; (4015bc <pmc_switch_mainck_to_xtal+0x6c>)
  4015a2:	4b06      	ldr	r3, [pc, #24]	; (4015bc <pmc_switch_mainck_to_xtal+0x6c>)
  4015a4:	6a1b      	ldr	r3, [r3, #32]
  4015a6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4015aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4015ae:	6213      	str	r3, [r2, #32]
	}
}
  4015b0:	bf00      	nop
  4015b2:	370c      	adds	r7, #12
  4015b4:	46bd      	mov	sp, r7
  4015b6:	bc80      	pop	{r7}
  4015b8:	4770      	bx	lr
  4015ba:	bf00      	nop
  4015bc:	400e0400 	.word	0x400e0400
  4015c0:	fec8fffc 	.word	0xfec8fffc
  4015c4:	01370002 	.word	0x01370002

004015c8 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4015c8:	b480      	push	{r7}
  4015ca:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4015cc:	4b03      	ldr	r3, [pc, #12]	; (4015dc <pmc_osc_is_ready_mainck+0x14>)
  4015ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4015d4:	4618      	mov	r0, r3
  4015d6:	46bd      	mov	sp, r7
  4015d8:	bc80      	pop	{r7}
  4015da:	4770      	bx	lr
  4015dc:	400e0400 	.word	0x400e0400

004015e0 <pmc_enable_pllack>:
 * \param mula PLLA multiplier.
 * \param pllacount PLLA counter.
 * \param diva Divider.
 */
void pmc_enable_pllack(uint32_t mula, uint32_t pllacount, uint32_t diva)
{
  4015e0:	b580      	push	{r7, lr}
  4015e2:	b084      	sub	sp, #16
  4015e4:	af00      	add	r7, sp, #0
  4015e6:	60f8      	str	r0, [r7, #12]
  4015e8:	60b9      	str	r1, [r7, #8]
  4015ea:	607a      	str	r2, [r7, #4]
	/* first disable the PLL to unlock the lock */
	pmc_disable_pllack();
  4015ec:	4b0e      	ldr	r3, [pc, #56]	; (401628 <pmc_enable_pllack+0x48>)
  4015ee:	4798      	blx	r3

#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
  4015f0:	480e      	ldr	r0, [pc, #56]	; (40162c <pmc_enable_pllack+0x4c>)
  4015f2:	687b      	ldr	r3, [r7, #4]
  4015f4:	b2da      	uxtb	r2, r3
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
  4015f6:	68bb      	ldr	r3, [r7, #8]
  4015f8:	021b      	lsls	r3, r3, #8
  4015fa:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00

#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
  4015fe:	431a      	orrs	r2, r3
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
  401600:	68fb      	ldr	r3, [r7, #12]
  401602:	0419      	lsls	r1, r3, #16
  401604:	4b0a      	ldr	r3, [pc, #40]	; (401630 <pmc_enable_pllack+0x50>)
  401606:	400b      	ands	r3, r1
  401608:	4313      	orrs	r3, r2
  40160a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000

#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
  40160e:	6283      	str	r3, [r0, #40]	; 0x28
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#endif
	while ((PMC->PMC_SR & PMC_SR_LOCKA) == 0);
  401610:	bf00      	nop
  401612:	4b06      	ldr	r3, [pc, #24]	; (40162c <pmc_enable_pllack+0x4c>)
  401614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401616:	f003 0302 	and.w	r3, r3, #2
  40161a:	2b00      	cmp	r3, #0
  40161c:	d0f9      	beq.n	401612 <pmc_enable_pllack+0x32>
}
  40161e:	bf00      	nop
  401620:	3710      	adds	r7, #16
  401622:	46bd      	mov	sp, r7
  401624:	bd80      	pop	{r7, pc}
  401626:	bf00      	nop
  401628:	00401635 	.word	0x00401635
  40162c:	400e0400 	.word	0x400e0400
  401630:	07ff0000 	.word	0x07ff0000

00401634 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401634:	b480      	push	{r7}
  401636:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401638:	4b03      	ldr	r3, [pc, #12]	; (401648 <pmc_disable_pllack+0x14>)
  40163a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40163e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401640:	bf00      	nop
  401642:	46bd      	mov	sp, r7
  401644:	bc80      	pop	{r7}
  401646:	4770      	bx	lr
  401648:	400e0400 	.word	0x400e0400

0040164c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  40164c:	b480      	push	{r7}
  40164e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401650:	4b03      	ldr	r3, [pc, #12]	; (401660 <pmc_is_locked_pllack+0x14>)
  401652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401654:	f003 0302 	and.w	r3, r3, #2
}
  401658:	4618      	mov	r0, r3
  40165a:	46bd      	mov	sp, r7
  40165c:	bc80      	pop	{r7}
  40165e:	4770      	bx	lr
  401660:	400e0400 	.word	0x400e0400

00401664 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  401664:	b480      	push	{r7}
  401666:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  401668:	4b03      	ldr	r3, [pc, #12]	; (401678 <pmc_disable_pllbck+0x14>)
  40166a:	2200      	movs	r2, #0
  40166c:	62da      	str	r2, [r3, #44]	; 0x2c
}
  40166e:	bf00      	nop
  401670:	46bd      	mov	sp, r7
  401672:	bc80      	pop	{r7}
  401674:	4770      	bx	lr
  401676:	bf00      	nop
  401678:	400e0400 	.word	0x400e0400

0040167c <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  40167c:	b480      	push	{r7}
  40167e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  401680:	4b03      	ldr	r3, [pc, #12]	; (401690 <pmc_is_locked_pllbck+0x14>)
  401682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401684:	f003 0304 	and.w	r3, r3, #4
}
  401688:	4618      	mov	r0, r3
  40168a:	46bd      	mov	sp, r7
  40168c:	bc80      	pop	{r7}
  40168e:	4770      	bx	lr
  401690:	400e0400 	.word	0x400e0400

00401694 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401694:	b480      	push	{r7}
  401696:	b083      	sub	sp, #12
  401698:	af00      	add	r7, sp, #0
  40169a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  40169c:	687b      	ldr	r3, [r7, #4]
  40169e:	2b22      	cmp	r3, #34	; 0x22
  4016a0:	d901      	bls.n	4016a6 <pmc_enable_periph_clk+0x12>
		return 1;
  4016a2:	2301      	movs	r3, #1
  4016a4:	e02f      	b.n	401706 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4016a6:	687b      	ldr	r3, [r7, #4]
  4016a8:	2b1f      	cmp	r3, #31
  4016aa:	d813      	bhi.n	4016d4 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4016ac:	4b18      	ldr	r3, [pc, #96]	; (401710 <pmc_enable_periph_clk+0x7c>)
  4016ae:	699a      	ldr	r2, [r3, #24]
  4016b0:	2101      	movs	r1, #1
  4016b2:	687b      	ldr	r3, [r7, #4]
  4016b4:	fa01 f303 	lsl.w	r3, r1, r3
  4016b8:	401a      	ands	r2, r3
  4016ba:	2101      	movs	r1, #1
  4016bc:	687b      	ldr	r3, [r7, #4]
  4016be:	fa01 f303 	lsl.w	r3, r1, r3
  4016c2:	429a      	cmp	r2, r3
  4016c4:	d01e      	beq.n	401704 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4016c6:	4a12      	ldr	r2, [pc, #72]	; (401710 <pmc_enable_periph_clk+0x7c>)
  4016c8:	2101      	movs	r1, #1
  4016ca:	687b      	ldr	r3, [r7, #4]
  4016cc:	fa01 f303 	lsl.w	r3, r1, r3
  4016d0:	6113      	str	r3, [r2, #16]
  4016d2:	e017      	b.n	401704 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4016d4:	687b      	ldr	r3, [r7, #4]
  4016d6:	3b20      	subs	r3, #32
  4016d8:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4016da:	4b0d      	ldr	r3, [pc, #52]	; (401710 <pmc_enable_periph_clk+0x7c>)
  4016dc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4016e0:	2101      	movs	r1, #1
  4016e2:	687b      	ldr	r3, [r7, #4]
  4016e4:	fa01 f303 	lsl.w	r3, r1, r3
  4016e8:	401a      	ands	r2, r3
  4016ea:	2101      	movs	r1, #1
  4016ec:	687b      	ldr	r3, [r7, #4]
  4016ee:	fa01 f303 	lsl.w	r3, r1, r3
  4016f2:	429a      	cmp	r2, r3
  4016f4:	d006      	beq.n	401704 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4016f6:	4a06      	ldr	r2, [pc, #24]	; (401710 <pmc_enable_periph_clk+0x7c>)
  4016f8:	2101      	movs	r1, #1
  4016fa:	687b      	ldr	r3, [r7, #4]
  4016fc:	fa01 f303 	lsl.w	r3, r1, r3
  401700:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401704:	2300      	movs	r3, #0
}
  401706:	4618      	mov	r0, r3
  401708:	370c      	adds	r7, #12
  40170a:	46bd      	mov	sp, r7
  40170c:	bc80      	pop	{r7}
  40170e:	4770      	bx	lr
  401710:	400e0400 	.word	0x400e0400

00401714 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  401714:	b480      	push	{r7}
  401716:	b083      	sub	sp, #12
  401718:	af00      	add	r7, sp, #0
  40171a:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  40171c:	687b      	ldr	r3, [r7, #4]
  40171e:	2208      	movs	r2, #8
  401720:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  401722:	687b      	ldr	r3, [r7, #4]
  401724:	2220      	movs	r2, #32
  401726:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  401728:	687b      	ldr	r3, [r7, #4]
  40172a:	2204      	movs	r2, #4
  40172c:	601a      	str	r2, [r3, #0]
}
  40172e:	bf00      	nop
  401730:	370c      	adds	r7, #12
  401732:	46bd      	mov	sp, r7
  401734:	bc80      	pop	{r7}
  401736:	4770      	bx	lr

00401738 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  401738:	b580      	push	{r7, lr}
  40173a:	b084      	sub	sp, #16
  40173c:	af00      	add	r7, sp, #0
  40173e:	6078      	str	r0, [r7, #4]
  401740:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  401742:	2300      	movs	r3, #0
  401744:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  401746:	687b      	ldr	r3, [r7, #4]
  401748:	f04f 32ff 	mov.w	r2, #4294967295
  40174c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  40174e:	687b      	ldr	r3, [r7, #4]
  401750:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  401752:	6878      	ldr	r0, [r7, #4]
  401754:	4b0e      	ldr	r3, [pc, #56]	; (401790 <twi_master_init+0x58>)
  401756:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  401758:	6878      	ldr	r0, [r7, #4]
  40175a:	4b0e      	ldr	r3, [pc, #56]	; (401794 <twi_master_init+0x5c>)
  40175c:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  40175e:	683b      	ldr	r3, [r7, #0]
  401760:	6859      	ldr	r1, [r3, #4]
  401762:	683b      	ldr	r3, [r7, #0]
  401764:	681b      	ldr	r3, [r3, #0]
  401766:	461a      	mov	r2, r3
  401768:	6878      	ldr	r0, [r7, #4]
  40176a:	4b0b      	ldr	r3, [pc, #44]	; (401798 <twi_master_init+0x60>)
  40176c:	4798      	blx	r3
  40176e:	4603      	mov	r3, r0
  401770:	2b01      	cmp	r3, #1
  401772:	d101      	bne.n	401778 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  401774:	2301      	movs	r3, #1
  401776:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  401778:	683b      	ldr	r3, [r7, #0]
  40177a:	7a5b      	ldrb	r3, [r3, #9]
  40177c:	2b01      	cmp	r3, #1
  40177e:	d102      	bne.n	401786 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  401780:	687b      	ldr	r3, [r7, #4]
  401782:	2240      	movs	r2, #64	; 0x40
  401784:	601a      	str	r2, [r3, #0]
	}

	return status;
  401786:	68fb      	ldr	r3, [r7, #12]
}
  401788:	4618      	mov	r0, r3
  40178a:	3710      	adds	r7, #16
  40178c:	46bd      	mov	sp, r7
  40178e:	bd80      	pop	{r7, pc}
  401790:	00401ad5 	.word	0x00401ad5
  401794:	00401715 	.word	0x00401715
  401798:	0040179d 	.word	0x0040179d

0040179c <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  40179c:	b480      	push	{r7}
  40179e:	b089      	sub	sp, #36	; 0x24
  4017a0:	af00      	add	r7, sp, #0
  4017a2:	60f8      	str	r0, [r7, #12]
  4017a4:	60b9      	str	r1, [r7, #8]
  4017a6:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  4017a8:	2300      	movs	r3, #0
  4017aa:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4017ac:	68bb      	ldr	r3, [r7, #8]
  4017ae:	4a34      	ldr	r2, [pc, #208]	; (401880 <twi_set_speed+0xe4>)
  4017b0:	4293      	cmp	r3, r2
  4017b2:	d901      	bls.n	4017b8 <twi_set_speed+0x1c>
		return FAIL;
  4017b4:	2301      	movs	r3, #1
  4017b6:	e05d      	b.n	401874 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4017b8:	68bb      	ldr	r3, [r7, #8]
  4017ba:	4a32      	ldr	r2, [pc, #200]	; (401884 <twi_set_speed+0xe8>)
  4017bc:	4293      	cmp	r3, r2
  4017be:	d937      	bls.n	401830 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4017c0:	687b      	ldr	r3, [r7, #4]
  4017c2:	4a31      	ldr	r2, [pc, #196]	; (401888 <twi_set_speed+0xec>)
  4017c4:	fba2 2303 	umull	r2, r3, r2, r3
  4017c8:	0b9b      	lsrs	r3, r3, #14
  4017ca:	3b04      	subs	r3, #4
  4017cc:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4017ce:	68ba      	ldr	r2, [r7, #8]
  4017d0:	4b2e      	ldr	r3, [pc, #184]	; (40188c <twi_set_speed+0xf0>)
  4017d2:	4413      	add	r3, r2
  4017d4:	009b      	lsls	r3, r3, #2
  4017d6:	687a      	ldr	r2, [r7, #4]
  4017d8:	fbb2 f3f3 	udiv	r3, r2, r3
  4017dc:	3b04      	subs	r3, #4
  4017de:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4017e0:	e005      	b.n	4017ee <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  4017e2:	69fb      	ldr	r3, [r7, #28]
  4017e4:	3301      	adds	r3, #1
  4017e6:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  4017e8:	697b      	ldr	r3, [r7, #20]
  4017ea:	085b      	lsrs	r3, r3, #1
  4017ec:	617b      	str	r3, [r7, #20]
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4017ee:	697b      	ldr	r3, [r7, #20]
  4017f0:	2bff      	cmp	r3, #255	; 0xff
  4017f2:	d909      	bls.n	401808 <twi_set_speed+0x6c>
  4017f4:	69fb      	ldr	r3, [r7, #28]
  4017f6:	2b06      	cmp	r3, #6
  4017f8:	d9f3      	bls.n	4017e2 <twi_set_speed+0x46>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4017fa:	e005      	b.n	401808 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  4017fc:	69fb      	ldr	r3, [r7, #28]
  4017fe:	3301      	adds	r3, #1
  401800:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  401802:	693b      	ldr	r3, [r7, #16]
  401804:	085b      	lsrs	r3, r3, #1
  401806:	613b      	str	r3, [r7, #16]
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401808:	693b      	ldr	r3, [r7, #16]
  40180a:	2bff      	cmp	r3, #255	; 0xff
  40180c:	d902      	bls.n	401814 <twi_set_speed+0x78>
  40180e:	69fb      	ldr	r3, [r7, #28]
  401810:	2b06      	cmp	r3, #6
  401812:	d9f3      	bls.n	4017fc <twi_set_speed+0x60>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  401814:	697b      	ldr	r3, [r7, #20]
  401816:	b2da      	uxtb	r2, r3
  401818:	693b      	ldr	r3, [r7, #16]
  40181a:	021b      	lsls	r3, r3, #8
  40181c:	b29b      	uxth	r3, r3
  40181e:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  401820:	69fb      	ldr	r3, [r7, #28]
  401822:	041b      	lsls	r3, r3, #16
  401824:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  401828:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  40182a:	68fb      	ldr	r3, [r7, #12]
  40182c:	611a      	str	r2, [r3, #16]
  40182e:	e020      	b.n	401872 <twi_set_speed+0xd6>
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401830:	68bb      	ldr	r3, [r7, #8]
  401832:	005b      	lsls	r3, r3, #1
  401834:	687a      	ldr	r2, [r7, #4]
  401836:	fbb2 f3f3 	udiv	r3, r2, r3
  40183a:	3b04      	subs	r3, #4
  40183c:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40183e:	e005      	b.n	40184c <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  401840:	69fb      	ldr	r3, [r7, #28]
  401842:	3301      	adds	r3, #1
  401844:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  401846:	69bb      	ldr	r3, [r7, #24]
  401848:	085b      	lsrs	r3, r3, #1
  40184a:	61bb      	str	r3, [r7, #24]
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40184c:	69bb      	ldr	r3, [r7, #24]
  40184e:	2bff      	cmp	r3, #255	; 0xff
  401850:	d902      	bls.n	401858 <twi_set_speed+0xbc>
  401852:	69fb      	ldr	r3, [r7, #28]
  401854:	2b06      	cmp	r3, #6
  401856:	d9f3      	bls.n	401840 <twi_set_speed+0xa4>
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  401858:	69bb      	ldr	r3, [r7, #24]
  40185a:	b2da      	uxtb	r2, r3
  40185c:	69bb      	ldr	r3, [r7, #24]
  40185e:	021b      	lsls	r3, r3, #8
  401860:	b29b      	uxth	r3, r3
  401862:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  401864:	69fb      	ldr	r3, [r7, #28]
  401866:	041b      	lsls	r3, r3, #16
  401868:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  40186c:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  40186e:	68fb      	ldr	r3, [r7, #12]
  401870:	611a      	str	r2, [r3, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401872:	2300      	movs	r3, #0
}
  401874:	4618      	mov	r0, r3
  401876:	3724      	adds	r7, #36	; 0x24
  401878:	46bd      	mov	sp, r7
  40187a:	bc80      	pop	{r7}
  40187c:	4770      	bx	lr
  40187e:	bf00      	nop
  401880:	00061a80 	.word	0x00061a80
  401884:	0005dc00 	.word	0x0005dc00
  401888:	057619f1 	.word	0x057619f1
  40188c:	3ffd1200 	.word	0x3ffd1200

00401890 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  401890:	b480      	push	{r7}
  401892:	b085      	sub	sp, #20
  401894:	af00      	add	r7, sp, #0
  401896:	6078      	str	r0, [r7, #4]
  401898:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  40189a:	683b      	ldr	r3, [r7, #0]
  40189c:	2b00      	cmp	r3, #0
  40189e:	d101      	bne.n	4018a4 <twi_mk_addr+0x14>
		return 0;
  4018a0:	2300      	movs	r3, #0
  4018a2:	e01d      	b.n	4018e0 <twi_mk_addr+0x50>

	val = addr[0];
  4018a4:	687b      	ldr	r3, [r7, #4]
  4018a6:	781b      	ldrb	r3, [r3, #0]
  4018a8:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  4018aa:	683b      	ldr	r3, [r7, #0]
  4018ac:	2b01      	cmp	r3, #1
  4018ae:	dd09      	ble.n	4018c4 <twi_mk_addr+0x34>
		val <<= 8;
  4018b0:	68fb      	ldr	r3, [r7, #12]
  4018b2:	021b      	lsls	r3, r3, #8
  4018b4:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  4018b6:	687b      	ldr	r3, [r7, #4]
  4018b8:	3301      	adds	r3, #1
  4018ba:	781b      	ldrb	r3, [r3, #0]
  4018bc:	461a      	mov	r2, r3
  4018be:	68fb      	ldr	r3, [r7, #12]
  4018c0:	4313      	orrs	r3, r2
  4018c2:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  4018c4:	683b      	ldr	r3, [r7, #0]
  4018c6:	2b02      	cmp	r3, #2
  4018c8:	dd09      	ble.n	4018de <twi_mk_addr+0x4e>
		val <<= 8;
  4018ca:	68fb      	ldr	r3, [r7, #12]
  4018cc:	021b      	lsls	r3, r3, #8
  4018ce:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  4018d0:	687b      	ldr	r3, [r7, #4]
  4018d2:	3302      	adds	r3, #2
  4018d4:	781b      	ldrb	r3, [r3, #0]
  4018d6:	461a      	mov	r2, r3
  4018d8:	68fb      	ldr	r3, [r7, #12]
  4018da:	4313      	orrs	r3, r2
  4018dc:	60fb      	str	r3, [r7, #12]
	}
	return val;
  4018de:	68fb      	ldr	r3, [r7, #12]
}
  4018e0:	4618      	mov	r0, r3
  4018e2:	3714      	adds	r7, #20
  4018e4:	46bd      	mov	sp, r7
  4018e6:	bc80      	pop	{r7}
  4018e8:	4770      	bx	lr
  4018ea:	bf00      	nop

004018ec <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  4018ec:	b580      	push	{r7, lr}
  4018ee:	b088      	sub	sp, #32
  4018f0:	af00      	add	r7, sp, #0
  4018f2:	6078      	str	r0, [r7, #4]
  4018f4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4018f6:	683b      	ldr	r3, [r7, #0]
  4018f8:	68db      	ldr	r3, [r3, #12]
  4018fa:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  4018fc:	683b      	ldr	r3, [r7, #0]
  4018fe:	689b      	ldr	r3, [r3, #8]
  401900:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  401902:	2300      	movs	r3, #0
  401904:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  401906:	f643 2398 	movw	r3, #15000	; 0x3a98
  40190a:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  40190c:	69fb      	ldr	r3, [r7, #28]
  40190e:	2b00      	cmp	r3, #0
  401910:	d101      	bne.n	401916 <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  401912:	2301      	movs	r3, #1
  401914:	e069      	b.n	4019ea <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401916:	687b      	ldr	r3, [r7, #4]
  401918:	2200      	movs	r2, #0
  40191a:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  40191c:	683b      	ldr	r3, [r7, #0]
  40191e:	7c1b      	ldrb	r3, [r3, #16]
  401920:	041b      	lsls	r3, r3, #16
  401922:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401926:	683b      	ldr	r3, [r7, #0]
  401928:	685b      	ldr	r3, [r3, #4]
  40192a:	021b      	lsls	r3, r3, #8
  40192c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401930:	4313      	orrs	r3, r2
  401932:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  401936:	687b      	ldr	r3, [r7, #4]
  401938:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  40193a:	687b      	ldr	r3, [r7, #4]
  40193c:	2200      	movs	r2, #0
  40193e:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401940:	683a      	ldr	r2, [r7, #0]
  401942:	683b      	ldr	r3, [r7, #0]
  401944:	685b      	ldr	r3, [r3, #4]
  401946:	4619      	mov	r1, r3
  401948:	4610      	mov	r0, r2
  40194a:	4b2a      	ldr	r3, [pc, #168]	; (4019f4 <twi_master_read+0x108>)
  40194c:	4798      	blx	r3
  40194e:	4602      	mov	r2, r0
  401950:	687b      	ldr	r3, [r7, #4]
  401952:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  401954:	69fb      	ldr	r3, [r7, #28]
  401956:	2b01      	cmp	r3, #1
  401958:	d105      	bne.n	401966 <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  40195a:	687b      	ldr	r3, [r7, #4]
  40195c:	2203      	movs	r2, #3
  40195e:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  401960:	2301      	movs	r3, #1
  401962:	75fb      	strb	r3, [r7, #23]
  401964:	e034      	b.n	4019d0 <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  401966:	687b      	ldr	r3, [r7, #4]
  401968:	2201      	movs	r2, #1
  40196a:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  40196c:	2300      	movs	r3, #0
  40196e:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  401970:	e02e      	b.n	4019d0 <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  401972:	687b      	ldr	r3, [r7, #4]
  401974:	6a1b      	ldr	r3, [r3, #32]
  401976:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  401978:	68fb      	ldr	r3, [r7, #12]
  40197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40197e:	2b00      	cmp	r3, #0
  401980:	d001      	beq.n	401986 <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  401982:	2305      	movs	r3, #5
  401984:	e031      	b.n	4019ea <twi_master_read+0xfe>
		}

		if (!timeout--) {
  401986:	693b      	ldr	r3, [r7, #16]
  401988:	1e5a      	subs	r2, r3, #1
  40198a:	613a      	str	r2, [r7, #16]
  40198c:	2b00      	cmp	r3, #0
  40198e:	d101      	bne.n	401994 <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  401990:	2309      	movs	r3, #9
  401992:	e02a      	b.n	4019ea <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  401994:	69fb      	ldr	r3, [r7, #28]
  401996:	2b01      	cmp	r3, #1
  401998:	d107      	bne.n	4019aa <twi_master_read+0xbe>
  40199a:	7dfb      	ldrb	r3, [r7, #23]
  40199c:	2b00      	cmp	r3, #0
  40199e:	d104      	bne.n	4019aa <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  4019a0:	687b      	ldr	r3, [r7, #4]
  4019a2:	2202      	movs	r2, #2
  4019a4:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  4019a6:	2301      	movs	r3, #1
  4019a8:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  4019aa:	68fb      	ldr	r3, [r7, #12]
  4019ac:	f003 0302 	and.w	r3, r3, #2
  4019b0:	2b00      	cmp	r3, #0
  4019b2:	d100      	bne.n	4019b6 <twi_master_read+0xca>
			continue;
  4019b4:	e00c      	b.n	4019d0 <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  4019b6:	69bb      	ldr	r3, [r7, #24]
  4019b8:	1c5a      	adds	r2, r3, #1
  4019ba:	61ba      	str	r2, [r7, #24]
  4019bc:	687a      	ldr	r2, [r7, #4]
  4019be:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4019c0:	b2d2      	uxtb	r2, r2
  4019c2:	701a      	strb	r2, [r3, #0]

		cnt--;
  4019c4:	69fb      	ldr	r3, [r7, #28]
  4019c6:	3b01      	subs	r3, #1
  4019c8:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  4019ca:	f643 2398 	movw	r3, #15000	; 0x3a98
  4019ce:	613b      	str	r3, [r7, #16]
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  4019d0:	69fb      	ldr	r3, [r7, #28]
  4019d2:	2b00      	cmp	r3, #0
  4019d4:	d1cd      	bne.n	401972 <twi_master_read+0x86>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4019d6:	bf00      	nop
  4019d8:	687b      	ldr	r3, [r7, #4]
  4019da:	6a1b      	ldr	r3, [r3, #32]
  4019dc:	f003 0301 	and.w	r3, r3, #1
  4019e0:	2b00      	cmp	r3, #0
  4019e2:	d0f9      	beq.n	4019d8 <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  4019e4:	687b      	ldr	r3, [r7, #4]
  4019e6:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  4019e8:	2300      	movs	r3, #0
}
  4019ea:	4618      	mov	r0, r3
  4019ec:	3720      	adds	r7, #32
  4019ee:	46bd      	mov	sp, r7
  4019f0:	bd80      	pop	{r7, pc}
  4019f2:	bf00      	nop
  4019f4:	00401891 	.word	0x00401891

004019f8 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4019f8:	b580      	push	{r7, lr}
  4019fa:	b086      	sub	sp, #24
  4019fc:	af00      	add	r7, sp, #0
  4019fe:	6078      	str	r0, [r7, #4]
  401a00:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401a02:	683b      	ldr	r3, [r7, #0]
  401a04:	68db      	ldr	r3, [r3, #12]
  401a06:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  401a08:	683b      	ldr	r3, [r7, #0]
  401a0a:	689b      	ldr	r3, [r3, #8]
  401a0c:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  401a0e:	697b      	ldr	r3, [r7, #20]
  401a10:	2b00      	cmp	r3, #0
  401a12:	d101      	bne.n	401a18 <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  401a14:	2301      	movs	r3, #1
  401a16:	e056      	b.n	401ac6 <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401a18:	687b      	ldr	r3, [r7, #4]
  401a1a:	2200      	movs	r2, #0
  401a1c:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401a1e:	683b      	ldr	r3, [r7, #0]
  401a20:	7c1b      	ldrb	r3, [r3, #16]
  401a22:	041b      	lsls	r3, r3, #16
  401a24:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401a28:	683b      	ldr	r3, [r7, #0]
  401a2a:	685b      	ldr	r3, [r3, #4]
  401a2c:	021b      	lsls	r3, r3, #8
  401a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401a32:	431a      	orrs	r2, r3
  401a34:	687b      	ldr	r3, [r7, #4]
  401a36:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401a38:	687b      	ldr	r3, [r7, #4]
  401a3a:	2200      	movs	r2, #0
  401a3c:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401a3e:	683a      	ldr	r2, [r7, #0]
  401a40:	683b      	ldr	r3, [r7, #0]
  401a42:	685b      	ldr	r3, [r3, #4]
  401a44:	4619      	mov	r1, r3
  401a46:	4610      	mov	r0, r2
  401a48:	4b21      	ldr	r3, [pc, #132]	; (401ad0 <twi_master_write+0xd8>)
  401a4a:	4798      	blx	r3
  401a4c:	4602      	mov	r2, r0
  401a4e:	687b      	ldr	r3, [r7, #4]
  401a50:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  401a52:	e019      	b.n	401a88 <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  401a54:	687b      	ldr	r3, [r7, #4]
  401a56:	6a1b      	ldr	r3, [r3, #32]
  401a58:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  401a5a:	68fb      	ldr	r3, [r7, #12]
  401a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401a60:	2b00      	cmp	r3, #0
  401a62:	d001      	beq.n	401a68 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  401a64:	2305      	movs	r3, #5
  401a66:	e02e      	b.n	401ac6 <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  401a68:	68fb      	ldr	r3, [r7, #12]
  401a6a:	f003 0304 	and.w	r3, r3, #4
  401a6e:	2b00      	cmp	r3, #0
  401a70:	d100      	bne.n	401a74 <twi_master_write+0x7c>
			continue;
  401a72:	e009      	b.n	401a88 <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  401a74:	693b      	ldr	r3, [r7, #16]
  401a76:	1c5a      	adds	r2, r3, #1
  401a78:	613a      	str	r2, [r7, #16]
  401a7a:	781b      	ldrb	r3, [r3, #0]
  401a7c:	461a      	mov	r2, r3
  401a7e:	687b      	ldr	r3, [r7, #4]
  401a80:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  401a82:	697b      	ldr	r3, [r7, #20]
  401a84:	3b01      	subs	r3, #1
  401a86:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401a88:	697b      	ldr	r3, [r7, #20]
  401a8a:	2b00      	cmp	r3, #0
  401a8c:	d1e2      	bne.n	401a54 <twi_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  401a8e:	687b      	ldr	r3, [r7, #4]
  401a90:	6a1b      	ldr	r3, [r3, #32]
  401a92:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  401a94:	68fb      	ldr	r3, [r7, #12]
  401a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401a9a:	2b00      	cmp	r3, #0
  401a9c:	d001      	beq.n	401aa2 <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  401a9e:	2305      	movs	r3, #5
  401aa0:	e011      	b.n	401ac6 <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  401aa2:	68fb      	ldr	r3, [r7, #12]
  401aa4:	f003 0304 	and.w	r3, r3, #4
  401aa8:	2b00      	cmp	r3, #0
  401aaa:	d100      	bne.n	401aae <twi_master_write+0xb6>
			break;
		}
	}
  401aac:	e7ef      	b.n	401a8e <twi_master_write+0x96>
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
			break;
  401aae:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  401ab0:	687b      	ldr	r3, [r7, #4]
  401ab2:	2202      	movs	r2, #2
  401ab4:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401ab6:	bf00      	nop
  401ab8:	687b      	ldr	r3, [r7, #4]
  401aba:	6a1b      	ldr	r3, [r3, #32]
  401abc:	f003 0301 	and.w	r3, r3, #1
  401ac0:	2b00      	cmp	r3, #0
  401ac2:	d0f9      	beq.n	401ab8 <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  401ac4:	2300      	movs	r3, #0
}
  401ac6:	4618      	mov	r0, r3
  401ac8:	3718      	adds	r7, #24
  401aca:	46bd      	mov	sp, r7
  401acc:	bd80      	pop	{r7, pc}
  401ace:	bf00      	nop
  401ad0:	00401891 	.word	0x00401891

00401ad4 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  401ad4:	b480      	push	{r7}
  401ad6:	b083      	sub	sp, #12
  401ad8:	af00      	add	r7, sp, #0
  401ada:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  401adc:	687b      	ldr	r3, [r7, #4]
  401ade:	2280      	movs	r2, #128	; 0x80
  401ae0:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  401ae2:	687b      	ldr	r3, [r7, #4]
  401ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  401ae6:	bf00      	nop
  401ae8:	370c      	adds	r7, #12
  401aea:	46bd      	mov	sp, r7
  401aec:	bc80      	pop	{r7}
  401aee:	4770      	bx	lr

00401af0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401af0:	b480      	push	{r7}
  401af2:	b089      	sub	sp, #36	; 0x24
  401af4:	af00      	add	r7, sp, #0
  401af6:	60f8      	str	r0, [r7, #12]
  401af8:	60b9      	str	r1, [r7, #8]
  401afa:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401afc:	68bb      	ldr	r3, [r7, #8]
  401afe:	011a      	lsls	r2, r3, #4
  401b00:	687b      	ldr	r3, [r7, #4]
  401b02:	429a      	cmp	r2, r3
  401b04:	d802      	bhi.n	401b0c <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401b06:	2310      	movs	r3, #16
  401b08:	61fb      	str	r3, [r7, #28]
  401b0a:	e001      	b.n	401b10 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  401b0c:	2308      	movs	r3, #8
  401b0e:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401b10:	687b      	ldr	r3, [r7, #4]
  401b12:	00da      	lsls	r2, r3, #3
  401b14:	69fb      	ldr	r3, [r7, #28]
  401b16:	68b9      	ldr	r1, [r7, #8]
  401b18:	fb01 f303 	mul.w	r3, r1, r3
  401b1c:	085b      	lsrs	r3, r3, #1
  401b1e:	441a      	add	r2, r3
  401b20:	69fb      	ldr	r3, [r7, #28]
  401b22:	68b9      	ldr	r1, [r7, #8]
  401b24:	fb01 f303 	mul.w	r3, r1, r3
  401b28:	fbb2 f3f3 	udiv	r3, r2, r3
  401b2c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  401b2e:	69bb      	ldr	r3, [r7, #24]
  401b30:	08db      	lsrs	r3, r3, #3
  401b32:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  401b34:	69bb      	ldr	r3, [r7, #24]
  401b36:	f003 0307 	and.w	r3, r3, #7
  401b3a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401b3c:	697b      	ldr	r3, [r7, #20]
  401b3e:	2b00      	cmp	r3, #0
  401b40:	d003      	beq.n	401b4a <usart_set_async_baudrate+0x5a>
  401b42:	697b      	ldr	r3, [r7, #20]
  401b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401b48:	d301      	bcc.n	401b4e <usart_set_async_baudrate+0x5e>
		return 1;
  401b4a:	2301      	movs	r3, #1
  401b4c:	e00f      	b.n	401b6e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  401b4e:	69fb      	ldr	r3, [r7, #28]
  401b50:	2b08      	cmp	r3, #8
  401b52:	d105      	bne.n	401b60 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  401b54:	68fb      	ldr	r3, [r7, #12]
  401b56:	685b      	ldr	r3, [r3, #4]
  401b58:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  401b5c:	68fb      	ldr	r3, [r7, #12]
  401b5e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401b60:	693b      	ldr	r3, [r7, #16]
  401b62:	041a      	lsls	r2, r3, #16
  401b64:	697b      	ldr	r3, [r7, #20]
  401b66:	431a      	orrs	r2, r3
  401b68:	68fb      	ldr	r3, [r7, #12]
  401b6a:	621a      	str	r2, [r3, #32]

	return 0;
  401b6c:	2300      	movs	r3, #0
}
  401b6e:	4618      	mov	r0, r3
  401b70:	3724      	adds	r7, #36	; 0x24
  401b72:	46bd      	mov	sp, r7
  401b74:	bc80      	pop	{r7}
  401b76:	4770      	bx	lr

00401b78 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  401b78:	b580      	push	{r7, lr}
  401b7a:	b082      	sub	sp, #8
  401b7c:	af00      	add	r7, sp, #0
  401b7e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401b80:	6878      	ldr	r0, [r7, #4]
  401b82:	4b0f      	ldr	r3, [pc, #60]	; (401bc0 <usart_reset+0x48>)
  401b84:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  401b86:	687b      	ldr	r3, [r7, #4]
  401b88:	2200      	movs	r2, #0
  401b8a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  401b8c:	687b      	ldr	r3, [r7, #4]
  401b8e:	2200      	movs	r2, #0
  401b90:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401b92:	687b      	ldr	r3, [r7, #4]
  401b94:	2200      	movs	r2, #0
  401b96:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  401b98:	6878      	ldr	r0, [r7, #4]
  401b9a:	4b0a      	ldr	r3, [pc, #40]	; (401bc4 <usart_reset+0x4c>)
  401b9c:	4798      	blx	r3
	usart_reset_rx(p_usart);
  401b9e:	6878      	ldr	r0, [r7, #4]
  401ba0:	4b09      	ldr	r3, [pc, #36]	; (401bc8 <usart_reset+0x50>)
  401ba2:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401ba4:	6878      	ldr	r0, [r7, #4]
  401ba6:	4b09      	ldr	r3, [pc, #36]	; (401bcc <usart_reset+0x54>)
  401ba8:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  401baa:	6878      	ldr	r0, [r7, #4]
  401bac:	4b08      	ldr	r3, [pc, #32]	; (401bd0 <usart_reset+0x58>)
  401bae:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  401bb0:	6878      	ldr	r0, [r7, #4]
  401bb2:	4b08      	ldr	r3, [pc, #32]	; (401bd4 <usart_reset+0x5c>)
  401bb4:	4798      	blx	r3
#endif
}
  401bb6:	bf00      	nop
  401bb8:	3708      	adds	r7, #8
  401bba:	46bd      	mov	sp, r7
  401bbc:	bd80      	pop	{r7, pc}
  401bbe:	bf00      	nop
  401bc0:	00401e35 	.word	0x00401e35
  401bc4:	00401cb5 	.word	0x00401cb5
  401bc8:	00401ce5 	.word	0x00401ce5
  401bcc:	00401d4d 	.word	0x00401d4d
  401bd0:	00401d85 	.word	0x00401d85
  401bd4:	00401d69 	.word	0x00401d69

00401bd8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401bd8:	b580      	push	{r7, lr}
  401bda:	b084      	sub	sp, #16
  401bdc:	af00      	add	r7, sp, #0
  401bde:	60f8      	str	r0, [r7, #12]
  401be0:	60b9      	str	r1, [r7, #8]
  401be2:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401be4:	68f8      	ldr	r0, [r7, #12]
  401be6:	4b1a      	ldr	r3, [pc, #104]	; (401c50 <usart_init_rs232+0x78>)
  401be8:	4798      	blx	r3

	ul_reg_val = 0;
  401bea:	4b1a      	ldr	r3, [pc, #104]	; (401c54 <usart_init_rs232+0x7c>)
  401bec:	2200      	movs	r2, #0
  401bee:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401bf0:	68bb      	ldr	r3, [r7, #8]
  401bf2:	2b00      	cmp	r3, #0
  401bf4:	d009      	beq.n	401c0a <usart_init_rs232+0x32>
  401bf6:	68bb      	ldr	r3, [r7, #8]
  401bf8:	681b      	ldr	r3, [r3, #0]
  401bfa:	687a      	ldr	r2, [r7, #4]
  401bfc:	4619      	mov	r1, r3
  401bfe:	68f8      	ldr	r0, [r7, #12]
  401c00:	4b15      	ldr	r3, [pc, #84]	; (401c58 <usart_init_rs232+0x80>)
  401c02:	4798      	blx	r3
  401c04:	4603      	mov	r3, r0
  401c06:	2b00      	cmp	r3, #0
  401c08:	d001      	beq.n	401c0e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  401c0a:	2301      	movs	r3, #1
  401c0c:	e01b      	b.n	401c46 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401c0e:	68bb      	ldr	r3, [r7, #8]
  401c10:	685a      	ldr	r2, [r3, #4]
  401c12:	68bb      	ldr	r3, [r7, #8]
  401c14:	689b      	ldr	r3, [r3, #8]
  401c16:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401c18:	68bb      	ldr	r3, [r7, #8]
  401c1a:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401c1c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401c1e:	68bb      	ldr	r3, [r7, #8]
  401c20:	68db      	ldr	r3, [r3, #12]
  401c22:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401c24:	4b0b      	ldr	r3, [pc, #44]	; (401c54 <usart_init_rs232+0x7c>)
  401c26:	681b      	ldr	r3, [r3, #0]
  401c28:	4313      	orrs	r3, r2
  401c2a:	4a0a      	ldr	r2, [pc, #40]	; (401c54 <usart_init_rs232+0x7c>)
  401c2c:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  401c2e:	4b09      	ldr	r3, [pc, #36]	; (401c54 <usart_init_rs232+0x7c>)
  401c30:	681b      	ldr	r3, [r3, #0]
  401c32:	4a08      	ldr	r2, [pc, #32]	; (401c54 <usart_init_rs232+0x7c>)
  401c34:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  401c36:	68fb      	ldr	r3, [r7, #12]
  401c38:	685a      	ldr	r2, [r3, #4]
  401c3a:	4b06      	ldr	r3, [pc, #24]	; (401c54 <usart_init_rs232+0x7c>)
  401c3c:	681b      	ldr	r3, [r3, #0]
  401c3e:	431a      	orrs	r2, r3
  401c40:	68fb      	ldr	r3, [r7, #12]
  401c42:	605a      	str	r2, [r3, #4]

	return 0;
  401c44:	2300      	movs	r3, #0
}
  401c46:	4618      	mov	r0, r3
  401c48:	3710      	adds	r7, #16
  401c4a:	46bd      	mov	sp, r7
  401c4c:	bd80      	pop	{r7, pc}
  401c4e:	bf00      	nop
  401c50:	00401b79 	.word	0x00401b79
  401c54:	20000930 	.word	0x20000930
  401c58:	00401af1 	.word	0x00401af1

00401c5c <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401c5c:	b580      	push	{r7, lr}
  401c5e:	b084      	sub	sp, #16
  401c60:	af00      	add	r7, sp, #0
  401c62:	60f8      	str	r0, [r7, #12]
  401c64:	60b9      	str	r1, [r7, #8]
  401c66:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  401c68:	687a      	ldr	r2, [r7, #4]
  401c6a:	68b9      	ldr	r1, [r7, #8]
  401c6c:	68f8      	ldr	r0, [r7, #12]
  401c6e:	4b0a      	ldr	r3, [pc, #40]	; (401c98 <usart_init_hw_handshaking+0x3c>)
  401c70:	4798      	blx	r3
  401c72:	4603      	mov	r3, r0
  401c74:	2b00      	cmp	r3, #0
  401c76:	d001      	beq.n	401c7c <usart_init_hw_handshaking+0x20>
		return 1;
  401c78:	2301      	movs	r3, #1
  401c7a:	e008      	b.n	401c8e <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  401c7c:	68fb      	ldr	r3, [r7, #12]
  401c7e:	685b      	ldr	r3, [r3, #4]
  401c80:	f023 030f 	bic.w	r3, r3, #15
  401c84:	f043 0202 	orr.w	r2, r3, #2
  401c88:	68fb      	ldr	r3, [r7, #12]
  401c8a:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  401c8c:	2300      	movs	r3, #0
}
  401c8e:	4618      	mov	r0, r3
  401c90:	3710      	adds	r7, #16
  401c92:	46bd      	mov	sp, r7
  401c94:	bd80      	pop	{r7, pc}
  401c96:	bf00      	nop
  401c98:	00401bd9 	.word	0x00401bd9

00401c9c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  401c9c:	b480      	push	{r7}
  401c9e:	b083      	sub	sp, #12
  401ca0:	af00      	add	r7, sp, #0
  401ca2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  401ca4:	687b      	ldr	r3, [r7, #4]
  401ca6:	2240      	movs	r2, #64	; 0x40
  401ca8:	601a      	str	r2, [r3, #0]
}
  401caa:	bf00      	nop
  401cac:	370c      	adds	r7, #12
  401cae:	46bd      	mov	sp, r7
  401cb0:	bc80      	pop	{r7}
  401cb2:	4770      	bx	lr

00401cb4 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  401cb4:	b480      	push	{r7}
  401cb6:	b083      	sub	sp, #12
  401cb8:	af00      	add	r7, sp, #0
  401cba:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401cbc:	687b      	ldr	r3, [r7, #4]
  401cbe:	2288      	movs	r2, #136	; 0x88
  401cc0:	601a      	str	r2, [r3, #0]
}
  401cc2:	bf00      	nop
  401cc4:	370c      	adds	r7, #12
  401cc6:	46bd      	mov	sp, r7
  401cc8:	bc80      	pop	{r7}
  401cca:	4770      	bx	lr

00401ccc <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  401ccc:	b480      	push	{r7}
  401cce:	b083      	sub	sp, #12
  401cd0:	af00      	add	r7, sp, #0
  401cd2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401cd4:	687b      	ldr	r3, [r7, #4]
  401cd6:	2210      	movs	r2, #16
  401cd8:	601a      	str	r2, [r3, #0]
}
  401cda:	bf00      	nop
  401cdc:	370c      	adds	r7, #12
  401cde:	46bd      	mov	sp, r7
  401ce0:	bc80      	pop	{r7}
  401ce2:	4770      	bx	lr

00401ce4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401ce4:	b480      	push	{r7}
  401ce6:	b083      	sub	sp, #12
  401ce8:	af00      	add	r7, sp, #0
  401cea:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401cec:	687b      	ldr	r3, [r7, #4]
  401cee:	2224      	movs	r2, #36	; 0x24
  401cf0:	601a      	str	r2, [r3, #0]
}
  401cf2:	bf00      	nop
  401cf4:	370c      	adds	r7, #12
  401cf6:	46bd      	mov	sp, r7
  401cf8:	bc80      	pop	{r7}
  401cfa:	4770      	bx	lr

00401cfc <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  401cfc:	b480      	push	{r7}
  401cfe:	b083      	sub	sp, #12
  401d00:	af00      	add	r7, sp, #0
  401d02:	6078      	str	r0, [r7, #4]
  401d04:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  401d06:	687b      	ldr	r3, [r7, #4]
  401d08:	683a      	ldr	r2, [r7, #0]
  401d0a:	609a      	str	r2, [r3, #8]
}
  401d0c:	bf00      	nop
  401d0e:	370c      	adds	r7, #12
  401d10:	46bd      	mov	sp, r7
  401d12:	bc80      	pop	{r7}
  401d14:	4770      	bx	lr
  401d16:	bf00      	nop

00401d18 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  401d18:	b480      	push	{r7}
  401d1a:	b083      	sub	sp, #12
  401d1c:	af00      	add	r7, sp, #0
  401d1e:	6078      	str	r0, [r7, #4]
  401d20:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  401d22:	687b      	ldr	r3, [r7, #4]
  401d24:	683a      	ldr	r2, [r7, #0]
  401d26:	60da      	str	r2, [r3, #12]
}
  401d28:	bf00      	nop
  401d2a:	370c      	adds	r7, #12
  401d2c:	46bd      	mov	sp, r7
  401d2e:	bc80      	pop	{r7}
  401d30:	4770      	bx	lr
  401d32:	bf00      	nop

00401d34 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  401d34:	b480      	push	{r7}
  401d36:	b083      	sub	sp, #12
  401d38:	af00      	add	r7, sp, #0
  401d3a:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  401d3c:	687b      	ldr	r3, [r7, #4]
  401d3e:	695b      	ldr	r3, [r3, #20]
}
  401d40:	4618      	mov	r0, r3
  401d42:	370c      	adds	r7, #12
  401d44:	46bd      	mov	sp, r7
  401d46:	bc80      	pop	{r7}
  401d48:	4770      	bx	lr
  401d4a:	bf00      	nop

00401d4c <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401d4c:	b480      	push	{r7}
  401d4e:	b083      	sub	sp, #12
  401d50:	af00      	add	r7, sp, #0
  401d52:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401d54:	687b      	ldr	r3, [r7, #4]
  401d56:	f44f 7280 	mov.w	r2, #256	; 0x100
  401d5a:	601a      	str	r2, [r3, #0]
}
  401d5c:	bf00      	nop
  401d5e:	370c      	adds	r7, #12
  401d60:	46bd      	mov	sp, r7
  401d62:	bc80      	pop	{r7}
  401d64:	4770      	bx	lr
  401d66:	bf00      	nop

00401d68 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  401d68:	b480      	push	{r7}
  401d6a:	b083      	sub	sp, #12
  401d6c:	af00      	add	r7, sp, #0
  401d6e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  401d70:	687b      	ldr	r3, [r7, #4]
  401d72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  401d76:	601a      	str	r2, [r3, #0]
}
  401d78:	bf00      	nop
  401d7a:	370c      	adds	r7, #12
  401d7c:	46bd      	mov	sp, r7
  401d7e:	bc80      	pop	{r7}
  401d80:	4770      	bx	lr
  401d82:	bf00      	nop

00401d84 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401d84:	b480      	push	{r7}
  401d86:	b083      	sub	sp, #12
  401d88:	af00      	add	r7, sp, #0
  401d8a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401d8c:	687b      	ldr	r3, [r7, #4]
  401d8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401d92:	601a      	str	r2, [r3, #0]
}
  401d94:	bf00      	nop
  401d96:	370c      	adds	r7, #12
  401d98:	46bd      	mov	sp, r7
  401d9a:	bc80      	pop	{r7}
  401d9c:	4770      	bx	lr
  401d9e:	bf00      	nop

00401da0 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  401da0:	b480      	push	{r7}
  401da2:	b083      	sub	sp, #12
  401da4:	af00      	add	r7, sp, #0
  401da6:	6078      	str	r0, [r7, #4]
  401da8:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401daa:	bf00      	nop
  401dac:	687b      	ldr	r3, [r7, #4]
  401dae:	695b      	ldr	r3, [r3, #20]
  401db0:	f003 0302 	and.w	r3, r3, #2
  401db4:	2b00      	cmp	r3, #0
  401db6:	d0f9      	beq.n	401dac <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401db8:	683b      	ldr	r3, [r7, #0]
  401dba:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401dbe:	687b      	ldr	r3, [r7, #4]
  401dc0:	61da      	str	r2, [r3, #28]

	return 0;
  401dc2:	2300      	movs	r3, #0
}
  401dc4:	4618      	mov	r0, r3
  401dc6:	370c      	adds	r7, #12
  401dc8:	46bd      	mov	sp, r7
  401dca:	bc80      	pop	{r7}
  401dcc:	4770      	bx	lr
  401dce:	bf00      	nop

00401dd0 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  401dd0:	b580      	push	{r7, lr}
  401dd2:	b082      	sub	sp, #8
  401dd4:	af00      	add	r7, sp, #0
  401dd6:	6078      	str	r0, [r7, #4]
  401dd8:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  401dda:	e007      	b.n	401dec <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  401ddc:	683b      	ldr	r3, [r7, #0]
  401dde:	1c5a      	adds	r2, r3, #1
  401de0:	603a      	str	r2, [r7, #0]
  401de2:	781b      	ldrb	r3, [r3, #0]
  401de4:	4619      	mov	r1, r3
  401de6:	6878      	ldr	r0, [r7, #4]
  401de8:	4b04      	ldr	r3, [pc, #16]	; (401dfc <usart_write_line+0x2c>)
  401dea:	4798      	blx	r3
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
	while (*string != '\0') {
  401dec:	683b      	ldr	r3, [r7, #0]
  401dee:	781b      	ldrb	r3, [r3, #0]
  401df0:	2b00      	cmp	r3, #0
  401df2:	d1f3      	bne.n	401ddc <usart_write_line+0xc>
		usart_putchar(p_usart, *string++);
	}
}
  401df4:	bf00      	nop
  401df6:	3708      	adds	r7, #8
  401df8:	46bd      	mov	sp, r7
  401dfa:	bd80      	pop	{r7, pc}
  401dfc:	00401da1 	.word	0x00401da1

00401e00 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  401e00:	b480      	push	{r7}
  401e02:	b083      	sub	sp, #12
  401e04:	af00      	add	r7, sp, #0
  401e06:	6078      	str	r0, [r7, #4]
  401e08:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401e0a:	687b      	ldr	r3, [r7, #4]
  401e0c:	695b      	ldr	r3, [r3, #20]
  401e0e:	f003 0301 	and.w	r3, r3, #1
  401e12:	2b00      	cmp	r3, #0
  401e14:	d101      	bne.n	401e1a <usart_read+0x1a>
		return 1;
  401e16:	2301      	movs	r3, #1
  401e18:	e006      	b.n	401e28 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401e1a:	687b      	ldr	r3, [r7, #4]
  401e1c:	699b      	ldr	r3, [r3, #24]
  401e1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401e22:	683b      	ldr	r3, [r7, #0]
  401e24:	601a      	str	r2, [r3, #0]

	return 0;
  401e26:	2300      	movs	r3, #0
}
  401e28:	4618      	mov	r0, r3
  401e2a:	370c      	adds	r7, #12
  401e2c:	46bd      	mov	sp, r7
  401e2e:	bc80      	pop	{r7}
  401e30:	4770      	bx	lr
  401e32:	bf00      	nop

00401e34 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  401e34:	b480      	push	{r7}
  401e36:	b083      	sub	sp, #12
  401e38:	af00      	add	r7, sp, #0
  401e3a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401e3c:	687b      	ldr	r3, [r7, #4]
  401e3e:	4a04      	ldr	r2, [pc, #16]	; (401e50 <usart_disable_writeprotect+0x1c>)
  401e40:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401e44:	bf00      	nop
  401e46:	370c      	adds	r7, #12
  401e48:	46bd      	mov	sp, r7
  401e4a:	bc80      	pop	{r7}
  401e4c:	4770      	bx	lr
  401e4e:	bf00      	nop
  401e50:	55534100 	.word	0x55534100

00401e54 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  401e54:	b480      	push	{r7}
  401e56:	b083      	sub	sp, #12
  401e58:	af00      	add	r7, sp, #0
  401e5a:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  401e5c:	687b      	ldr	r3, [r7, #4]
  401e5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401e62:	605a      	str	r2, [r3, #4]

}
  401e64:	bf00      	nop
  401e66:	370c      	adds	r7, #12
  401e68:	46bd      	mov	sp, r7
  401e6a:	bc80      	pop	{r7}
  401e6c:	4770      	bx	lr
  401e6e:	bf00      	nop

00401e70 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401e70:	b480      	push	{r7}
  401e72:	b083      	sub	sp, #12
  401e74:	af00      	add	r7, sp, #0
  401e76:	4603      	mov	r3, r0
  401e78:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401e7a:	4908      	ldr	r1, [pc, #32]	; (401e9c <NVIC_EnableIRQ+0x2c>)
  401e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e80:	095b      	lsrs	r3, r3, #5
  401e82:	79fa      	ldrb	r2, [r7, #7]
  401e84:	f002 021f 	and.w	r2, r2, #31
  401e88:	2001      	movs	r0, #1
  401e8a:	fa00 f202 	lsl.w	r2, r0, r2
  401e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401e92:	bf00      	nop
  401e94:	370c      	adds	r7, #12
  401e96:	46bd      	mov	sp, r7
  401e98:	bc80      	pop	{r7}
  401e9a:	4770      	bx	lr
  401e9c:	e000e100 	.word	0xe000e100

00401ea0 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  401ea0:	b480      	push	{r7}
  401ea2:	b083      	sub	sp, #12
  401ea4:	af00      	add	r7, sp, #0
  401ea6:	4603      	mov	r3, r0
  401ea8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401eaa:	4909      	ldr	r1, [pc, #36]	; (401ed0 <NVIC_DisableIRQ+0x30>)
  401eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401eb0:	095b      	lsrs	r3, r3, #5
  401eb2:	79fa      	ldrb	r2, [r7, #7]
  401eb4:	f002 021f 	and.w	r2, r2, #31
  401eb8:	2001      	movs	r0, #1
  401eba:	fa00 f202 	lsl.w	r2, r0, r2
  401ebe:	3320      	adds	r3, #32
  401ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401ec4:	bf00      	nop
  401ec6:	370c      	adds	r7, #12
  401ec8:	46bd      	mov	sp, r7
  401eca:	bc80      	pop	{r7}
  401ecc:	4770      	bx	lr
  401ece:	bf00      	nop
  401ed0:	e000e100 	.word	0xe000e100

00401ed4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  401ed4:	b480      	push	{r7}
  401ed6:	b083      	sub	sp, #12
  401ed8:	af00      	add	r7, sp, #0
  401eda:	4603      	mov	r3, r0
  401edc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401ede:	4909      	ldr	r1, [pc, #36]	; (401f04 <NVIC_ClearPendingIRQ+0x30>)
  401ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401ee4:	095b      	lsrs	r3, r3, #5
  401ee6:	79fa      	ldrb	r2, [r7, #7]
  401ee8:	f002 021f 	and.w	r2, r2, #31
  401eec:	2001      	movs	r0, #1
  401eee:	fa00 f202 	lsl.w	r2, r0, r2
  401ef2:	3360      	adds	r3, #96	; 0x60
  401ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401ef8:	bf00      	nop
  401efa:	370c      	adds	r7, #12
  401efc:	46bd      	mov	sp, r7
  401efe:	bc80      	pop	{r7}
  401f00:	4770      	bx	lr
  401f02:	bf00      	nop
  401f04:	e000e100 	.word	0xe000e100

00401f08 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401f08:	b480      	push	{r7}
  401f0a:	b083      	sub	sp, #12
  401f0c:	af00      	add	r7, sp, #0
  401f0e:	4603      	mov	r3, r0
  401f10:	6039      	str	r1, [r7, #0]
  401f12:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401f18:	2b00      	cmp	r3, #0
  401f1a:	da0b      	bge.n	401f34 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401f1c:	490d      	ldr	r1, [pc, #52]	; (401f54 <NVIC_SetPriority+0x4c>)
  401f1e:	79fb      	ldrb	r3, [r7, #7]
  401f20:	f003 030f 	and.w	r3, r3, #15
  401f24:	3b04      	subs	r3, #4
  401f26:	683a      	ldr	r2, [r7, #0]
  401f28:	b2d2      	uxtb	r2, r2
  401f2a:	0112      	lsls	r2, r2, #4
  401f2c:	b2d2      	uxtb	r2, r2
  401f2e:	440b      	add	r3, r1
  401f30:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  401f32:	e009      	b.n	401f48 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401f34:	4908      	ldr	r1, [pc, #32]	; (401f58 <NVIC_SetPriority+0x50>)
  401f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401f3a:	683a      	ldr	r2, [r7, #0]
  401f3c:	b2d2      	uxtb	r2, r2
  401f3e:	0112      	lsls	r2, r2, #4
  401f40:	b2d2      	uxtb	r2, r2
  401f42:	440b      	add	r3, r1
  401f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  401f48:	bf00      	nop
  401f4a:	370c      	adds	r7, #12
  401f4c:	46bd      	mov	sp, r7
  401f4e:	bc80      	pop	{r7}
  401f50:	4770      	bx	lr
  401f52:	bf00      	nop
  401f54:	e000ed00 	.word	0xe000ed00
  401f58:	e000e100 	.word	0xe000e100

00401f5c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401f5c:	b480      	push	{r7}
  401f5e:	b083      	sub	sp, #12
  401f60:	af00      	add	r7, sp, #0
  401f62:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401f64:	687b      	ldr	r3, [r7, #4]
  401f66:	2b07      	cmp	r3, #7
  401f68:	d825      	bhi.n	401fb6 <osc_get_rate+0x5a>
  401f6a:	a201      	add	r2, pc, #4	; (adr r2, 401f70 <osc_get_rate+0x14>)
  401f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401f70:	00401f91 	.word	0x00401f91
  401f74:	00401f97 	.word	0x00401f97
  401f78:	00401f9d 	.word	0x00401f9d
  401f7c:	00401fa3 	.word	0x00401fa3
  401f80:	00401fa7 	.word	0x00401fa7
  401f84:	00401fab 	.word	0x00401fab
  401f88:	00401faf 	.word	0x00401faf
  401f8c:	00401fb3 	.word	0x00401fb3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401f90:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401f94:	e010      	b.n	401fb8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  401f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401f9a:	e00d      	b.n	401fb8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401fa0:	e00a      	b.n	401fb8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  401fa2:	4b08      	ldr	r3, [pc, #32]	; (401fc4 <osc_get_rate+0x68>)
  401fa4:	e008      	b.n	401fb8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  401fa6:	4b08      	ldr	r3, [pc, #32]	; (401fc8 <osc_get_rate+0x6c>)
  401fa8:	e006      	b.n	401fb8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  401faa:	4b08      	ldr	r3, [pc, #32]	; (401fcc <osc_get_rate+0x70>)
  401fac:	e004      	b.n	401fb8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  401fae:	4b07      	ldr	r3, [pc, #28]	; (401fcc <osc_get_rate+0x70>)
  401fb0:	e002      	b.n	401fb8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  401fb2:	4b06      	ldr	r3, [pc, #24]	; (401fcc <osc_get_rate+0x70>)
  401fb4:	e000      	b.n	401fb8 <osc_get_rate+0x5c>
	}

	return 0;
  401fb6:	2300      	movs	r3, #0
}
  401fb8:	4618      	mov	r0, r3
  401fba:	370c      	adds	r7, #12
  401fbc:	46bd      	mov	sp, r7
  401fbe:	bc80      	pop	{r7}
  401fc0:	4770      	bx	lr
  401fc2:	bf00      	nop
  401fc4:	003d0900 	.word	0x003d0900
  401fc8:	007a1200 	.word	0x007a1200
  401fcc:	00b71b00 	.word	0x00b71b00

00401fd0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401fd0:	b580      	push	{r7, lr}
  401fd2:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_PLL1_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLBCK) {
		return pll_get_default_rate(1);
  401fd4:	2006      	movs	r0, #6
  401fd6:	4b04      	ldr	r3, [pc, #16]	; (401fe8 <sysclk_get_main_hz+0x18>)
  401fd8:	4798      	blx	r3
  401fda:	4602      	mov	r2, r0
  401fdc:	4613      	mov	r3, r2
  401fde:	009b      	lsls	r3, r3, #2
  401fe0:	4413      	add	r3, r2
  401fe2:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401fe4:	4618      	mov	r0, r3
  401fe6:	bd80      	pop	{r7, pc}
  401fe8:	00401f5d 	.word	0x00401f5d

00401fec <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401fec:	b580      	push	{r7, lr}
  401fee:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401ff0:	4b02      	ldr	r3, [pc, #8]	; (401ffc <sysclk_get_cpu_hz+0x10>)
  401ff2:	4798      	blx	r3
  401ff4:	4603      	mov	r3, r0
  401ff6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401ff8:	4618      	mov	r0, r3
  401ffa:	bd80      	pop	{r7, pc}
  401ffc:	00401fd1 	.word	0x00401fd1

00402000 <vsync_handler>:
volatile uint32_t g_ul_vsync_flag = false;



void vsync_handler(uint32_t ul_id, uint32_t ul_mask)
{
  402000:	b480      	push	{r7}
  402002:	b083      	sub	sp, #12
  402004:	af00      	add	r7, sp, #0
  402006:	6078      	str	r0, [r7, #4]
  402008:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	g_ul_vsync_flag = true;	
  40200a:	4b04      	ldr	r3, [pc, #16]	; (40201c <vsync_handler+0x1c>)
  40200c:	2201      	movs	r2, #1
  40200e:	601a      	str	r2, [r3, #0]
}
  402010:	bf00      	nop
  402012:	370c      	adds	r7, #12
  402014:	46bd      	mov	sp, r7
  402016:	bc80      	pop	{r7}
  402018:	4770      	bx	lr
  40201a:	bf00      	nop
  40201c:	20000934 	.word	0x20000934

00402020 <init_vsync_interrupts>:

void init_vsync_interrupts(void)
{
  402020:	b590      	push	{r4, r7, lr}
  402022:	b083      	sub	sp, #12
  402024:	af02      	add	r7, sp, #8
	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(OV_VSYNC_PIO, OV_VSYNC_ID, OV_VSYNC_MASK,
  402026:	4b08      	ldr	r3, [pc, #32]	; (402048 <init_vsync_interrupts+0x28>)
  402028:	9300      	str	r3, [sp, #0]
  40202a:	2301      	movs	r3, #1
  40202c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402030:	210b      	movs	r1, #11
  402032:	4806      	ldr	r0, [pc, #24]	; (40204c <init_vsync_interrupts+0x2c>)
  402034:	4c06      	ldr	r4, [pc, #24]	; (402050 <init_vsync_interrupts+0x30>)
  402036:	47a0      	blx	r4
			OV_VSYNC_TYPE, vsync_handler);

	/* Enable PIO controller IRQs */
	NVIC_EnableIRQ((IRQn_Type)OV_VSYNC_ID); 
  402038:	200b      	movs	r0, #11
  40203a:	4b06      	ldr	r3, [pc, #24]	; (402054 <init_vsync_interrupts+0x34>)
  40203c:	4798      	blx	r3
}
  40203e:	bf00      	nop
  402040:	3704      	adds	r7, #4
  402042:	46bd      	mov	sp, r7
  402044:	bd90      	pop	{r4, r7, pc}
  402046:	bf00      	nop
  402048:	00402001 	.word	0x00402001
  40204c:	400e0e00 	.word	0x400e0e00
  402050:	00401329 	.word	0x00401329
  402054:	00401e71 	.word	0x00401e71

00402058 <pio_capture_init>:

void pio_capture_init(Pio *p_pio, uint32_t ul_id)
{
  402058:	b580      	push	{r7, lr}
  40205a:	b082      	sub	sp, #8
  40205c:	af00      	add	r7, sp, #0
  40205e:	6078      	str	r0, [r7, #4]
  402060:	6039      	str	r1, [r7, #0]
	/* Enable periphral clock */
	pmc_enable_periph_clk(ul_id);
  402062:	6838      	ldr	r0, [r7, #0]
  402064:	4b1a      	ldr	r3, [pc, #104]	; (4020d0 <pio_capture_init+0x78>)
  402066:	4798      	blx	r3

	/* Disable pio capture */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  402068:	687b      	ldr	r3, [r7, #4]
  40206a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  40206e:	f023 0201 	bic.w	r2, r3, #1
  402072:	687b      	ldr	r3, [r7, #4]
  402074:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Disable rxbuff interrupt */
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  402078:	687b      	ldr	r3, [r7, #4]
  40207a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
  40207e:	f043 0208 	orr.w	r2, r3, #8
  402082:	687b      	ldr	r3, [r7, #4]
  402084:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	/* 32bit width*/
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  402088:	687b      	ldr	r3, [r7, #4]
  40208a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  40208e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
  402092:	687b      	ldr	r3, [r7, #4]
  402094:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  402098:	687b      	ldr	r3, [r7, #4]
  40209a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  40209e:	f043 0220 	orr.w	r2, r3, #32
  4020a2:	687b      	ldr	r3, [r7, #4]
  4020a4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Only HSYNC and VSYNC enabled */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  4020a8:	687b      	ldr	r3, [r7, #4]
  4020aa:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4020ae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
  4020b2:	687b      	ldr	r3, [r7, #4]
  4020b4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  4020b8:	687b      	ldr	r3, [r7, #4]
  4020ba:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4020be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  4020c2:	687b      	ldr	r3, [r7, #4]
  4020c4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

// 	/* Samples only data with even index */
// 	p_pio->PIO_PCMR |= PIO_PCMR_HALFS;
// 	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_FRSTS);
	
}
  4020c8:	bf00      	nop
  4020ca:	3708      	adds	r7, #8
  4020cc:	46bd      	mov	sp, r7
  4020ce:	bd80      	pop	{r7, pc}
  4020d0:	00401695 	.word	0x00401695

004020d4 <pio_capture_to_buffer>:

uint8_t pio_capture_to_buffer(Pio *p_pio, uint8_t *uc_buf ,uint32_t ul_size)
{
  4020d4:	b480      	push	{r7}
  4020d6:	b085      	sub	sp, #20
  4020d8:	af00      	add	r7, sp, #0
  4020da:	60f8      	str	r0, [r7, #12]
  4020dc:	60b9      	str	r1, [r7, #8]
  4020de:	607a      	str	r2, [r7, #4]
	/* Check if the first PDC bank is free */
	if ((p_pio->PIO_RCR == 0) && (p_pio->PIO_RNCR == 0)) {
  4020e0:	68fb      	ldr	r3, [r7, #12]
  4020e2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
  4020e6:	2b00      	cmp	r3, #0
  4020e8:	d112      	bne.n	402110 <pio_capture_to_buffer+0x3c>
  4020ea:	68fb      	ldr	r3, [r7, #12]
  4020ec:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
  4020f0:	2b00      	cmp	r3, #0
  4020f2:	d10d      	bne.n	402110 <pio_capture_to_buffer+0x3c>
		p_pio->PIO_RPR = (uint32_t)uc_buf;
  4020f4:	68ba      	ldr	r2, [r7, #8]
  4020f6:	68fb      	ldr	r3, [r7, #12]
  4020f8:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		p_pio->PIO_RCR = ul_size;
  4020fc:	68fb      	ldr	r3, [r7, #12]
  4020fe:	687a      	ldr	r2, [r7, #4]
  402100:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
		p_pio->PIO_PTCR = PIO_PTCR_RXTEN;
  402104:	68fb      	ldr	r3, [r7, #12]
  402106:	2201      	movs	r2, #1
  402108:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		return 1;
  40210c:	2301      	movs	r3, #1
  40210e:	e00f      	b.n	402130 <pio_capture_to_buffer+0x5c>
		} else if (p_pio->PIO_RNCR == 0) {
  402110:	68fb      	ldr	r3, [r7, #12]
  402112:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
  402116:	2b00      	cmp	r3, #0
  402118:	d109      	bne.n	40212e <pio_capture_to_buffer+0x5a>
		p_pio->PIO_RNPR = (uint32_t)uc_buf;
  40211a:	68ba      	ldr	r2, [r7, #8]
  40211c:	68fb      	ldr	r3, [r7, #12]
  40211e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
		p_pio->PIO_RNCR = ul_size;
  402122:	68fb      	ldr	r3, [r7, #12]
  402124:	687a      	ldr	r2, [r7, #4]
  402126:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
		return 1;
  40212a:	2301      	movs	r3, #1
  40212c:	e000      	b.n	402130 <pio_capture_to_buffer+0x5c>
		} else {
		return 0;
  40212e:	2300      	movs	r3, #0
	}
}
  402130:	4618      	mov	r0, r3
  402132:	3714      	adds	r7, #20
  402134:	46bd      	mov	sp, r7
  402136:	bc80      	pop	{r7}
  402138:	4770      	bx	lr
  40213a:	bf00      	nop

0040213c <init_camera>:

void init_camera(void)
{ 
  40213c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402140:	b087      	sub	sp, #28
  402142:	af00      	add	r7, sp, #0
	init_vsync_interrupts();
  402144:	4b52      	ldr	r3, [pc, #328]	; (402290 <init_camera+0x154>)
  402146:	4798      	blx	r3
    configure_twi();
  402148:	4b52      	ldr	r3, [pc, #328]	; (402294 <init_camera+0x158>)
  40214a:	4798      	blx	r3
	/* Init PCK1 to work at 24 Mhz */
	/* 96/4=24 Mhz */
	PMC->PMC_PCK[1] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLA_CLK);
  40214c:	4b52      	ldr	r3, [pc, #328]	; (402298 <init_camera+0x15c>)
  40214e:	2222      	movs	r2, #34	; 0x22
  402150:	645a      	str	r2, [r3, #68]	; 0x44
	PMC->PMC_SCER = PMC_SCER_PCK1;
  402152:	4b51      	ldr	r3, [pc, #324]	; (402298 <init_camera+0x15c>)
  402154:	f44f 7200 	mov.w	r2, #512	; 0x200
  402158:	601a      	str	r2, [r3, #0]
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK1)) {
  40215a:	bf00      	nop
  40215c:	4b4e      	ldr	r3, [pc, #312]	; (402298 <init_camera+0x15c>)
  40215e:	689b      	ldr	r3, [r3, #8]
  402160:	f403 7300 	and.w	r3, r3, #512	; 0x200
  402164:	2b00      	cmp	r3, #0
  402166:	d0f9      	beq.n	40215c <init_camera+0x20>
	}
	delay_ms(3000);
  402168:	4b4c      	ldr	r3, [pc, #304]	; (40229c <init_camera+0x160>)
  40216a:	4798      	blx	r3
  40216c:	4603      	mov	r3, r0
  40216e:	4619      	mov	r1, r3
  402170:	f04f 0200 	mov.w	r2, #0
  402174:	460b      	mov	r3, r1
  402176:	4614      	mov	r4, r2
  402178:	18db      	adds	r3, r3, r3
  40217a:	eb44 0404 	adc.w	r4, r4, r4
  40217e:	185b      	adds	r3, r3, r1
  402180:	eb44 0402 	adc.w	r4, r4, r2
  402184:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
  402188:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
  40218c:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
  402190:	4653      	mov	r3, sl
  402192:	465c      	mov	r4, fp
  402194:	185b      	adds	r3, r3, r1
  402196:	eb44 0402 	adc.w	r4, r4, r2
  40219a:	ea4f 1904 	mov.w	r9, r4, lsl #4
  40219e:	ea49 7913 	orr.w	r9, r9, r3, lsr #28
  4021a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
  4021a6:	ebb8 0803 	subs.w	r8, r8, r3
  4021aa:	eb69 0904 	sbc.w	r9, r9, r4
  4021ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
  4021b2:	617b      	str	r3, [r7, #20]
  4021b4:	697b      	ldr	r3, [r7, #20]
  4021b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
  4021ba:	617b      	str	r3, [r7, #20]
  4021bc:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  4021c0:	613b      	str	r3, [r7, #16]
  4021c2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
  4021c6:	4641      	mov	r1, r8
  4021c8:	464a      	mov	r2, r9
  4021ca:	f243 63af 	movw	r3, #13999	; 0x36af
  4021ce:	f04f 0400 	mov.w	r4, #0
  4021d2:	eb11 0803 	adds.w	r8, r1, r3
  4021d6:	eb42 0904 	adc.w	r9, r2, r4
  4021da:	4640      	mov	r0, r8
  4021dc:	4649      	mov	r1, r9
  4021de:	4c30      	ldr	r4, [pc, #192]	; (4022a0 <init_camera+0x164>)
  4021e0:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4021e4:	f04f 0300 	mov.w	r3, #0
  4021e8:	47a0      	blx	r4
  4021ea:	4603      	mov	r3, r0
  4021ec:	460c      	mov	r4, r1
  4021ee:	4618      	mov	r0, r3
  4021f0:	4b2c      	ldr	r3, [pc, #176]	; (4022a4 <init_camera+0x168>)
  4021f2:	4798      	blx	r3
	configure_camera();
  4021f4:	4b2c      	ldr	r3, [pc, #176]	; (4022a8 <init_camera+0x16c>)
  4021f6:	4798      	blx	r3
	pio_capture_init(OV_DATA_BUS_PIO ,OV_DATA_BUS_ID);
  4021f8:	210b      	movs	r1, #11
  4021fa:	482c      	ldr	r0, [pc, #176]	; (4022ac <init_camera+0x170>)
  4021fc:	4b2c      	ldr	r3, [pc, #176]	; (4022b0 <init_camera+0x174>)
  4021fe:	4798      	blx	r3
	/* Wait 3 seconds to let the image sensor to adapt to environment */
	delay_ms(3000);
  402200:	4b26      	ldr	r3, [pc, #152]	; (40229c <init_camera+0x160>)
  402202:	4798      	blx	r3
  402204:	4603      	mov	r3, r0
  402206:	4619      	mov	r1, r3
  402208:	f04f 0200 	mov.w	r2, #0
  40220c:	460b      	mov	r3, r1
  40220e:	4614      	mov	r4, r2
  402210:	18db      	adds	r3, r3, r3
  402212:	eb44 0404 	adc.w	r4, r4, r4
  402216:	185b      	adds	r3, r3, r1
  402218:	eb44 0402 	adc.w	r4, r4, r2
  40221c:	00e0      	lsls	r0, r4, #3
  40221e:	60f8      	str	r0, [r7, #12]
  402220:	68f8      	ldr	r0, [r7, #12]
  402222:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
  402226:	60f8      	str	r0, [r7, #12]
  402228:	00db      	lsls	r3, r3, #3
  40222a:	60bb      	str	r3, [r7, #8]
  40222c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  402230:	185b      	adds	r3, r3, r1
  402232:	eb44 0402 	adc.w	r4, r4, r2
  402236:	0126      	lsls	r6, r4, #4
  402238:	ea46 7613 	orr.w	r6, r6, r3, lsr #28
  40223c:	011d      	lsls	r5, r3, #4
  40223e:	1aed      	subs	r5, r5, r3
  402240:	eb66 0604 	sbc.w	r6, r6, r4
  402244:	00f3      	lsls	r3, r6, #3
  402246:	607b      	str	r3, [r7, #4]
  402248:	687b      	ldr	r3, [r7, #4]
  40224a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
  40224e:	607b      	str	r3, [r7, #4]
  402250:	00eb      	lsls	r3, r5, #3
  402252:	603b      	str	r3, [r7, #0]
  402254:	e9d7 5600 	ldrd	r5, r6, [r7]
  402258:	4629      	mov	r1, r5
  40225a:	4632      	mov	r2, r6
  40225c:	f243 63af 	movw	r3, #13999	; 0x36af
  402260:	f04f 0400 	mov.w	r4, #0
  402264:	18cd      	adds	r5, r1, r3
  402266:	eb42 0604 	adc.w	r6, r2, r4
  40226a:	4628      	mov	r0, r5
  40226c:	4631      	mov	r1, r6
  40226e:	4c0c      	ldr	r4, [pc, #48]	; (4022a0 <init_camera+0x164>)
  402270:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402274:	f04f 0300 	mov.w	r3, #0
  402278:	47a0      	blx	r4
  40227a:	4603      	mov	r3, r0
  40227c:	460c      	mov	r4, r1
  40227e:	4618      	mov	r0, r3
  402280:	4b08      	ldr	r3, [pc, #32]	; (4022a4 <init_camera+0x168>)
  402282:	4798      	blx	r3
}
  402284:	bf00      	nop
  402286:	371c      	adds	r7, #28
  402288:	46bd      	mov	sp, r7
  40228a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40228e:	bf00      	nop
  402290:	00402021 	.word	0x00402021
  402294:	004022b5 	.word	0x004022b5
  402298:	400e0400 	.word	0x400e0400
  40229c:	00401fed 	.word	0x00401fed
  4022a0:	004034f5 	.word	0x004034f5
  4022a4:	20000001 	.word	0x20000001
  4022a8:	0040231d 	.word	0x0040231d
  4022ac:	400e0e00 	.word	0x400e0e00
  4022b0:	00402059 	.word	0x00402059

004022b4 <configure_twi>:

void configure_twi(void)
{
  4022b4:	b580      	push	{r7, lr}
  4022b6:	b084      	sub	sp, #16
  4022b8:	af00      	add	r7, sp, #0
	twi_options_t opt;
	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_BOARD_TWI);
  4022ba:	2013      	movs	r0, #19
  4022bc:	4b0e      	ldr	r3, [pc, #56]	; (4022f8 <configure_twi+0x44>)
  4022be:	4798      	blx	r3

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
  4022c0:	4b0e      	ldr	r3, [pc, #56]	; (4022fc <configure_twi+0x48>)
  4022c2:	4798      	blx	r3
  4022c4:	4603      	mov	r3, r0
  4022c6:	607b      	str	r3, [r7, #4]
	opt.speed      = TWI_CLK;
  4022c8:	4b0d      	ldr	r3, [pc, #52]	; (402300 <configure_twi+0x4c>)
  4022ca:	60bb      	str	r3, [r7, #8]
	twi_master_init(BOARD_TWI, &opt);
  4022cc:	1d3b      	adds	r3, r7, #4
  4022ce:	4619      	mov	r1, r3
  4022d0:	480c      	ldr	r0, [pc, #48]	; (402304 <configure_twi+0x50>)
  4022d2:	4b0d      	ldr	r3, [pc, #52]	; (402308 <configure_twi+0x54>)
  4022d4:	4798      	blx	r3

	/* Configure TWI interrupts */
	NVIC_DisableIRQ(BOARD_TWI_IRQn);
  4022d6:	2013      	movs	r0, #19
  4022d8:	4b0c      	ldr	r3, [pc, #48]	; (40230c <configure_twi+0x58>)
  4022da:	4798      	blx	r3
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
  4022dc:	2013      	movs	r0, #19
  4022de:	4b0c      	ldr	r3, [pc, #48]	; (402310 <configure_twi+0x5c>)
  4022e0:	4798      	blx	r3
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
  4022e2:	2100      	movs	r1, #0
  4022e4:	2013      	movs	r0, #19
  4022e6:	4b0b      	ldr	r3, [pc, #44]	; (402314 <configure_twi+0x60>)
  4022e8:	4798      	blx	r3
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
  4022ea:	2013      	movs	r0, #19
  4022ec:	4b0a      	ldr	r3, [pc, #40]	; (402318 <configure_twi+0x64>)
  4022ee:	4798      	blx	r3
}
  4022f0:	bf00      	nop
  4022f2:	3710      	adds	r7, #16
  4022f4:	46bd      	mov	sp, r7
  4022f6:	bd80      	pop	{r7, pc}
  4022f8:	00401695 	.word	0x00401695
  4022fc:	00401fed 	.word	0x00401fed
  402300:	00061a80 	.word	0x00061a80
  402304:	40018000 	.word	0x40018000
  402308:	00401739 	.word	0x00401739
  40230c:	00401ea1 	.word	0x00401ea1
  402310:	00401ed5 	.word	0x00401ed5
  402314:	00401f09 	.word	0x00401f09
  402318:	00401e71 	.word	0x00401e71

0040231c <configure_camera>:

void configure_camera(void)
{
  40231c:	b580      	push	{r7, lr}
  40231e:	b086      	sub	sp, #24
  402320:	af00      	add	r7, sp, #0
	
	/* ov2640 Initialization 
	// First, make sure reg 0xFF=1  */
	const uint8_t cont_reg_val = 1;
  402322:	2301      	movs	r3, #1
  402324:	75fb      	strb	r3, [r7, #23]
	twi_packet_t init_packet = {
  402326:	463b      	mov	r3, r7
  402328:	2200      	movs	r2, #0
  40232a:	601a      	str	r2, [r3, #0]
  40232c:	605a      	str	r2, [r3, #4]
  40232e:	609a      	str	r2, [r3, #8]
  402330:	60da      	str	r2, [r3, #12]
  402332:	611a      	str	r2, [r3, #16]
  402334:	23ff      	movs	r3, #255	; 0xff
  402336:	703b      	strb	r3, [r7, #0]
  402338:	2301      	movs	r3, #1
  40233a:	607b      	str	r3, [r7, #4]
  40233c:	f107 0317 	add.w	r3, r7, #23
  402340:	60bb      	str	r3, [r7, #8]
  402342:	2301      	movs	r3, #1
  402344:	60fb      	str	r3, [r7, #12]
  402346:	2330      	movs	r3, #48	; 0x30
  402348:	743b      	strb	r3, [r7, #16]
		.addr_length  = 1,                         // TWI slave memory address data size
		.chip         = OV_I2C_SENSOR_ADDRESS,     // TWI slave bus address
		.buffer       = &cont_reg_val,             // transfer data destination buffer
		.length       = 1                          // transfer data size (bytes)
	};
	ov_write_reg(BOARD_TWI, &init_packet);
  40234a:	463b      	mov	r3, r7
  40234c:	4619      	mov	r1, r3
  40234e:	480f      	ldr	r0, [pc, #60]	; (40238c <configure_camera+0x70>)
  402350:	4b0f      	ldr	r3, [pc, #60]	; (402390 <configure_camera+0x74>)
  402352:	4798      	blx	r3
	while (ov_init(BOARD_TWI) == 1) {
  402354:	bf00      	nop
  402356:	480d      	ldr	r0, [pc, #52]	; (40238c <configure_camera+0x70>)
  402358:	4b0e      	ldr	r3, [pc, #56]	; (402394 <configure_camera+0x78>)
  40235a:	4798      	blx	r3
  40235c:	4603      	mov	r3, r0
  40235e:	2b01      	cmp	r3, #1
  402360:	d0f9      	beq.n	402356 <configure_camera+0x3a>
	}
	
	/* ov2640 configuration */
	ov_configure(BOARD_TWI, JPEG_INIT);
  402362:	2100      	movs	r1, #0
  402364:	4809      	ldr	r0, [pc, #36]	; (40238c <configure_camera+0x70>)
  402366:	4b0c      	ldr	r3, [pc, #48]	; (402398 <configure_camera+0x7c>)
  402368:	4798      	blx	r3
	ov_configure(BOARD_TWI, YUV422);
  40236a:	2101      	movs	r1, #1
  40236c:	4807      	ldr	r0, [pc, #28]	; (40238c <configure_camera+0x70>)
  40236e:	4b0a      	ldr	r3, [pc, #40]	; (402398 <configure_camera+0x7c>)
  402370:	4798      	blx	r3
	
	ov_configure(BOARD_TWI, JPEG);
  402372:	2102      	movs	r1, #2
  402374:	4805      	ldr	r0, [pc, #20]	; (40238c <configure_camera+0x70>)
  402376:	4b08      	ldr	r3, [pc, #32]	; (402398 <configure_camera+0x7c>)
  402378:	4798      	blx	r3
	ov_configure(BOARD_TWI, JPEG_640x480);
  40237a:	2104      	movs	r1, #4
  40237c:	4803      	ldr	r0, [pc, #12]	; (40238c <configure_camera+0x70>)
  40237e:	4b06      	ldr	r3, [pc, #24]	; (402398 <configure_camera+0x7c>)
  402380:	4798      	blx	r3
	//ov_configure_finish(BOARD_TWI);
}
  402382:	bf00      	nop
  402384:	3718      	adds	r7, #24
  402386:	46bd      	mov	sp, r7
  402388:	bd80      	pop	{r7, pc}
  40238a:	bf00      	nop
  40238c:	40018000 	.word	0x40018000
  402390:	00402ba1 	.word	0x00402ba1
  402394:	00402c99 	.word	0x00402c99
  402398:	00402d25 	.word	0x00402d25

0040239c <start_capture>:


uint8_t start_capture(void)
{   /* clearing the image buffer */
  40239c:	b580      	push	{r7, lr}
  40239e:	b082      	sub	sp, #8
  4023a0:	af00      	add	r7, sp, #0

	//for(int ii=0; ii<array_size; ii++) image_buf[ii] = 0;
	
	uint8_t im_error;
	/* Enable vsync interrupt*/
	pio_enable_interrupt(OV_VSYNC_PIO, OV_VSYNC_MASK);
  4023a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4023a6:	4815      	ldr	r0, [pc, #84]	; (4023fc <start_capture+0x60>)
  4023a8:	4b15      	ldr	r3, [pc, #84]	; (402400 <start_capture+0x64>)
  4023aa:	4798      	blx	r3

	/* Capture acquisition will start on rising edge of Vsync signal.
	 * So wait g_vsync_flag = 1 before start process
	 */
	while (!g_ul_vsync_flag) {
  4023ac:	bf00      	nop
  4023ae:	4b15      	ldr	r3, [pc, #84]	; (402404 <start_capture+0x68>)
  4023b0:	681b      	ldr	r3, [r3, #0]
  4023b2:	2b00      	cmp	r3, #0
  4023b4:	d0fb      	beq.n	4023ae <start_capture+0x12>
	}

	/* Disable vsync interrupt*/
	pio_disable_interrupt(OV_VSYNC_PIO, OV_VSYNC_MASK);
  4023b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4023ba:	4810      	ldr	r0, [pc, #64]	; (4023fc <start_capture+0x60>)
  4023bc:	4b12      	ldr	r3, [pc, #72]	; (402408 <start_capture+0x6c>)
  4023be:	4798      	blx	r3

	/* Enable pio capture*/
	pio_capture_enable(OV_DATA_BUS_PIO);
  4023c0:	480e      	ldr	r0, [pc, #56]	; (4023fc <start_capture+0x60>)
  4023c2:	4b12      	ldr	r3, [pc, #72]	; (40240c <start_capture+0x70>)
  4023c4:	4798      	blx	r3

	
	im_error = pio_capture_to_buffer(OV_DATA_BUS_PIO, image_buf,(array_size)>>2);
  4023c6:	f246 12a8 	movw	r2, #25000	; 0x61a8
  4023ca:	4911      	ldr	r1, [pc, #68]	; (402410 <start_capture+0x74>)
  4023cc:	480b      	ldr	r0, [pc, #44]	; (4023fc <start_capture+0x60>)
  4023ce:	4b11      	ldr	r3, [pc, #68]	; (402414 <start_capture+0x78>)
  4023d0:	4798      	blx	r3
  4023d2:	4603      	mov	r3, r0
  4023d4:	71fb      	strb	r3, [r7, #7]

	/* Wait end of capture*/
	while (!((OV_DATA_BUS_PIO->PIO_PCISR & PIO_PCIMR_RXBUFF) ==
  4023d6:	bf00      	nop
  4023d8:	4b08      	ldr	r3, [pc, #32]	; (4023fc <start_capture+0x60>)
  4023da:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
  4023de:	f003 0308 	and.w	r3, r3, #8
  4023e2:	2b00      	cmp	r3, #0
  4023e4:	d0f8      	beq.n	4023d8 <start_capture+0x3c>
			PIO_PCIMR_RXBUFF)) {
	}

	/* Disable pio capture*/
	pio_capture_disable(OV_DATA_BUS_PIO);
  4023e6:	4805      	ldr	r0, [pc, #20]	; (4023fc <start_capture+0x60>)
  4023e8:	4b0b      	ldr	r3, [pc, #44]	; (402418 <start_capture+0x7c>)
  4023ea:	4798      	blx	r3

	/* Reset vsync flag*/
	g_ul_vsync_flag = false;
  4023ec:	4b05      	ldr	r3, [pc, #20]	; (402404 <start_capture+0x68>)
  4023ee:	2200      	movs	r2, #0
  4023f0:	601a      	str	r2, [r3, #0]
	
	return im_error;
  4023f2:	79fb      	ldrb	r3, [r7, #7]
}
  4023f4:	4618      	mov	r0, r3
  4023f6:	3708      	adds	r7, #8
  4023f8:	46bd      	mov	sp, r7
  4023fa:	bd80      	pop	{r7, pc}
  4023fc:	400e0e00 	.word	0x400e0e00
  402400:	00400fc1 	.word	0x00400fc1
  402404:	20000934 	.word	0x20000934
  402408:	00400fdd 	.word	0x00400fdd
  40240c:	004011fd 	.word	0x004011fd
  402410:	20003088 	.word	0x20003088
  402414:	004020d5 	.word	0x004020d5
  402418:	00401229 	.word	0x00401229

0040241c <find_image_len>:

uint8_t find_image_len(void)
{
  40241c:	b480      	push	{r7}
  40241e:	b085      	sub	sp, #20
  402420:	af00      	add	r7, sp, #0
	uint8_t len_found = false;
  402422:	2300      	movs	r3, #0
  402424:	73fb      	strb	r3, [r7, #15]
	
	for( uint32_t i = 0; i< array_size; i++)
  402426:	2300      	movs	r3, #0
  402428:	60bb      	str	r3, [r7, #8]
  40242a:	e014      	b.n	402456 <find_image_len+0x3a>
	{
	if ((image_buf[i] == 255)&& (image_buf[i+1] == 216))//&& (image_buf[i+2] = 0xD)&& (image_buf[i+3] = 0x9))
  40242c:	4a20      	ldr	r2, [pc, #128]	; (4024b0 <find_image_len+0x94>)
  40242e:	68bb      	ldr	r3, [r7, #8]
  402430:	4413      	add	r3, r2
  402432:	781b      	ldrb	r3, [r3, #0]
  402434:	b2db      	uxtb	r3, r3
  402436:	2bff      	cmp	r3, #255	; 0xff
  402438:	d10a      	bne.n	402450 <find_image_len+0x34>
  40243a:	68bb      	ldr	r3, [r7, #8]
  40243c:	3301      	adds	r3, #1
  40243e:	4a1c      	ldr	r2, [pc, #112]	; (4024b0 <find_image_len+0x94>)
  402440:	5cd3      	ldrb	r3, [r2, r3]
  402442:	b2db      	uxtb	r3, r3
  402444:	2bd8      	cmp	r3, #216	; 0xd8
  402446:	d103      	bne.n	402450 <find_image_len+0x34>
		{	im_start = i;
  402448:	4a1a      	ldr	r2, [pc, #104]	; (4024b4 <find_image_len+0x98>)
  40244a:	68bb      	ldr	r3, [r7, #8]
  40244c:	6013      	str	r3, [r2, #0]
			break;
  40244e:	e006      	b.n	40245e <find_image_len+0x42>

uint8_t find_image_len(void)
{
	uint8_t len_found = false;
	
	for( uint32_t i = 0; i< array_size; i++)
  402450:	68bb      	ldr	r3, [r7, #8]
  402452:	3301      	adds	r3, #1
  402454:	60bb      	str	r3, [r7, #8]
  402456:	68bb      	ldr	r3, [r7, #8]
  402458:	4a17      	ldr	r2, [pc, #92]	; (4024b8 <find_image_len+0x9c>)
  40245a:	4293      	cmp	r3, r2
  40245c:	d9e6      	bls.n	40242c <find_image_len+0x10>
		{	im_start = i;
			break;
		}
	}
	
	for( uint32_t j = im_start; j< array_size; j++)
  40245e:	4b15      	ldr	r3, [pc, #84]	; (4024b4 <find_image_len+0x98>)
  402460:	681b      	ldr	r3, [r3, #0]
  402462:	607b      	str	r3, [r7, #4]
  402464:	e01a      	b.n	40249c <find_image_len+0x80>
	{
	if ((image_buf[j] == 255)&& (image_buf[j+1] == 217))//&& (image_buf[i+2] = 0xD)&& (image_buf[i+3] = 0x9))
  402466:	4a12      	ldr	r2, [pc, #72]	; (4024b0 <find_image_len+0x94>)
  402468:	687b      	ldr	r3, [r7, #4]
  40246a:	4413      	add	r3, r2
  40246c:	781b      	ldrb	r3, [r3, #0]
  40246e:	b2db      	uxtb	r3, r3
  402470:	2bff      	cmp	r3, #255	; 0xff
  402472:	d110      	bne.n	402496 <find_image_len+0x7a>
  402474:	687b      	ldr	r3, [r7, #4]
  402476:	3301      	adds	r3, #1
  402478:	4a0d      	ldr	r2, [pc, #52]	; (4024b0 <find_image_len+0x94>)
  40247a:	5cd3      	ldrb	r3, [r2, r3]
  40247c:	b2db      	uxtb	r3, r3
  40247e:	2bd9      	cmp	r3, #217	; 0xd9
  402480:	d109      	bne.n	402496 <find_image_len+0x7a>
		{	im_length = j+2 - im_start;
  402482:	4b0c      	ldr	r3, [pc, #48]	; (4024b4 <find_image_len+0x98>)
  402484:	681b      	ldr	r3, [r3, #0]
  402486:	687a      	ldr	r2, [r7, #4]
  402488:	1ad3      	subs	r3, r2, r3
  40248a:	3302      	adds	r3, #2
  40248c:	4a0b      	ldr	r2, [pc, #44]	; (4024bc <find_image_len+0xa0>)
  40248e:	6013      	str	r3, [r2, #0]
			len_found = true;
  402490:	2301      	movs	r3, #1
  402492:	73fb      	strb	r3, [r7, #15]
			break;
  402494:	e006      	b.n	4024a4 <find_image_len+0x88>
		{	im_start = i;
			break;
		}
	}
	
	for( uint32_t j = im_start; j< array_size; j++)
  402496:	687b      	ldr	r3, [r7, #4]
  402498:	3301      	adds	r3, #1
  40249a:	607b      	str	r3, [r7, #4]
  40249c:	687b      	ldr	r3, [r7, #4]
  40249e:	4a06      	ldr	r2, [pc, #24]	; (4024b8 <find_image_len+0x9c>)
  4024a0:	4293      	cmp	r3, r2
  4024a2:	d9e0      	bls.n	402466 <find_image_len+0x4a>
		{	im_length = j+2 - im_start;
			len_found = true;
			break;
		}
	}
	return len_found;
  4024a4:	7bfb      	ldrb	r3, [r7, #15]
	
  4024a6:	4618      	mov	r0, r3
  4024a8:	3714      	adds	r7, #20
  4024aa:	46bd      	mov	sp, r7
  4024ac:	bc80      	pop	{r7}
  4024ae:	4770      	bx	lr
  4024b0:	20003088 	.word	0x20003088
  4024b4:	20003084 	.word	0x20003084
  4024b8:	0001869f 	.word	0x0001869f
  4024bc:	20003080 	.word	0x20003080

004024c0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4024c0:	b480      	push	{r7}
  4024c2:	b083      	sub	sp, #12
  4024c4:	af00      	add	r7, sp, #0
  4024c6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4024c8:	687b      	ldr	r3, [r7, #4]
  4024ca:	2b07      	cmp	r3, #7
  4024cc:	d825      	bhi.n	40251a <osc_get_rate+0x5a>
  4024ce:	a201      	add	r2, pc, #4	; (adr r2, 4024d4 <osc_get_rate+0x14>)
  4024d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4024d4:	004024f5 	.word	0x004024f5
  4024d8:	004024fb 	.word	0x004024fb
  4024dc:	00402501 	.word	0x00402501
  4024e0:	00402507 	.word	0x00402507
  4024e4:	0040250b 	.word	0x0040250b
  4024e8:	0040250f 	.word	0x0040250f
  4024ec:	00402513 	.word	0x00402513
  4024f0:	00402517 	.word	0x00402517
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4024f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4024f8:	e010      	b.n	40251c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4024fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4024fe:	e00d      	b.n	40251c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  402500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402504:	e00a      	b.n	40251c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  402506:	4b08      	ldr	r3, [pc, #32]	; (402528 <osc_get_rate+0x68>)
  402508:	e008      	b.n	40251c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40250a:	4b08      	ldr	r3, [pc, #32]	; (40252c <osc_get_rate+0x6c>)
  40250c:	e006      	b.n	40251c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40250e:	4b08      	ldr	r3, [pc, #32]	; (402530 <osc_get_rate+0x70>)
  402510:	e004      	b.n	40251c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  402512:	4b07      	ldr	r3, [pc, #28]	; (402530 <osc_get_rate+0x70>)
  402514:	e002      	b.n	40251c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  402516:	4b06      	ldr	r3, [pc, #24]	; (402530 <osc_get_rate+0x70>)
  402518:	e000      	b.n	40251c <osc_get_rate+0x5c>
	}

	return 0;
  40251a:	2300      	movs	r3, #0
}
  40251c:	4618      	mov	r0, r3
  40251e:	370c      	adds	r7, #12
  402520:	46bd      	mov	sp, r7
  402522:	bc80      	pop	{r7}
  402524:	4770      	bx	lr
  402526:	bf00      	nop
  402528:	003d0900 	.word	0x003d0900
  40252c:	007a1200 	.word	0x007a1200
  402530:	00b71b00 	.word	0x00b71b00

00402534 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  402534:	b580      	push	{r7, lr}
  402536:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_PLL1_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLBCK) {
		return pll_get_default_rate(1);
  402538:	2006      	movs	r0, #6
  40253a:	4b04      	ldr	r3, [pc, #16]	; (40254c <sysclk_get_main_hz+0x18>)
  40253c:	4798      	blx	r3
  40253e:	4602      	mov	r2, r0
  402540:	4613      	mov	r3, r2
  402542:	009b      	lsls	r3, r3, #2
  402544:	4413      	add	r3, r2
  402546:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  402548:	4618      	mov	r0, r3
  40254a:	bd80      	pop	{r7, pc}
  40254c:	004024c1 	.word	0x004024c1

00402550 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  402550:	b580      	push	{r7, lr}
  402552:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402554:	4b02      	ldr	r3, [pc, #8]	; (402560 <sysclk_get_cpu_hz+0x10>)
  402556:	4798      	blx	r3
  402558:	4603      	mov	r3, r0
  40255a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40255c:	4618      	mov	r0, r3
  40255e:	bd80      	pop	{r7, pc}
  402560:	00402535 	.word	0x00402535

00402564 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402564:	b580      	push	{r7, lr}
  402566:	b082      	sub	sp, #8
  402568:	af00      	add	r7, sp, #0
  40256a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40256c:	6878      	ldr	r0, [r7, #4]
  40256e:	4b03      	ldr	r3, [pc, #12]	; (40257c <sysclk_enable_peripheral_clock+0x18>)
  402570:	4798      	blx	r3
}
  402572:	bf00      	nop
  402574:	3708      	adds	r7, #8
  402576:	46bd      	mov	sp, r7
  402578:	bd80      	pop	{r7, pc}
  40257a:	bf00      	nop
  40257c:	00401695 	.word	0x00401695

00402580 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  402580:	b580      	push	{r7, lr}
  402582:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  402584:	200b      	movs	r0, #11
  402586:	4b03      	ldr	r3, [pc, #12]	; (402594 <ioport_init+0x14>)
  402588:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40258a:	200c      	movs	r0, #12
  40258c:	4b01      	ldr	r3, [pc, #4]	; (402594 <ioport_init+0x14>)
  40258e:	4798      	blx	r3
	arch_ioport_init();
}
  402590:	bf00      	nop
  402592:	bd80      	pop	{r7, pc}
  402594:	00402565 	.word	0x00402565

00402598 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  402598:	b480      	push	{r7}
  40259a:	b08d      	sub	sp, #52	; 0x34
  40259c:	af00      	add	r7, sp, #0
  40259e:	6078      	str	r0, [r7, #4]
  4025a0:	460b      	mov	r3, r1
  4025a2:	70fb      	strb	r3, [r7, #3]
  4025a4:	687b      	ldr	r3, [r7, #4]
  4025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  4025a8:	78fb      	ldrb	r3, [r7, #3]
  4025aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4025ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4025b0:	627b      	str	r3, [r7, #36]	; 0x24
  4025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4025b4:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4025b6:	6a3b      	ldr	r3, [r7, #32]
  4025b8:	095b      	lsrs	r3, r3, #5
  4025ba:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4025bc:	69fb      	ldr	r3, [r7, #28]
  4025be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4025c2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4025c6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4025c8:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4025ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4025ce:	2b01      	cmp	r3, #1
  4025d0:	d109      	bne.n	4025e6 <ioport_set_pin_dir+0x4e>
  4025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4025d4:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4025d6:	697b      	ldr	r3, [r7, #20]
  4025d8:	f003 031f 	and.w	r3, r3, #31
  4025dc:	2201      	movs	r2, #1
  4025de:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4025e0:	69bb      	ldr	r3, [r7, #24]
  4025e2:	611a      	str	r2, [r3, #16]
  4025e4:	e00c      	b.n	402600 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4025e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4025ea:	2b00      	cmp	r3, #0
  4025ec:	d108      	bne.n	402600 <ioport_set_pin_dir+0x68>
  4025ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4025f0:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4025f2:	693b      	ldr	r3, [r7, #16]
  4025f4:	f003 031f 	and.w	r3, r3, #31
  4025f8:	2201      	movs	r2, #1
  4025fa:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4025fc:	69bb      	ldr	r3, [r7, #24]
  4025fe:	615a      	str	r2, [r3, #20]
  402600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402602:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402604:	68fb      	ldr	r3, [r7, #12]
  402606:	f003 031f 	and.w	r3, r3, #31
  40260a:	2201      	movs	r2, #1
  40260c:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40260e:	69bb      	ldr	r3, [r7, #24]
  402610:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  402614:	bf00      	nop
  402616:	3734      	adds	r7, #52	; 0x34
  402618:	46bd      	mov	sp, r7
  40261a:	bc80      	pop	{r7}
  40261c:	4770      	bx	lr
  40261e:	bf00      	nop

00402620 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  402620:	b480      	push	{r7}
  402622:	b08b      	sub	sp, #44	; 0x2c
  402624:	af00      	add	r7, sp, #0
  402626:	6078      	str	r0, [r7, #4]
  402628:	460b      	mov	r3, r1
  40262a:	70fb      	strb	r3, [r7, #3]
  40262c:	687b      	ldr	r3, [r7, #4]
  40262e:	627b      	str	r3, [r7, #36]	; 0x24
  402630:	78fb      	ldrb	r3, [r7, #3]
  402632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402638:	61fb      	str	r3, [r7, #28]
  40263a:	69fb      	ldr	r3, [r7, #28]
  40263c:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40263e:	69bb      	ldr	r3, [r7, #24]
  402640:	095b      	lsrs	r3, r3, #5
  402642:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402644:	697b      	ldr	r3, [r7, #20]
  402646:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40264a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40264e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402650:	613b      	str	r3, [r7, #16]

	if (level) {
  402652:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402656:	2b00      	cmp	r3, #0
  402658:	d009      	beq.n	40266e <ioport_set_pin_level+0x4e>
  40265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40265c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40265e:	68fb      	ldr	r3, [r7, #12]
  402660:	f003 031f 	and.w	r3, r3, #31
  402664:	2201      	movs	r2, #1
  402666:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402668:	693b      	ldr	r3, [r7, #16]
  40266a:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  40266c:	e008      	b.n	402680 <ioport_set_pin_level+0x60>
  40266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402670:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402672:	68bb      	ldr	r3, [r7, #8]
  402674:	f003 031f 	and.w	r3, r3, #31
  402678:	2201      	movs	r2, #1
  40267a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40267c:	693b      	ldr	r3, [r7, #16]
  40267e:	635a      	str	r2, [r3, #52]	; 0x34
  402680:	bf00      	nop
  402682:	372c      	adds	r7, #44	; 0x2c
  402684:	46bd      	mov	sp, r7
  402686:	bc80      	pop	{r7}
  402688:	4770      	bx	lr
  40268a:	bf00      	nop

0040268c <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  40268c:	b480      	push	{r7}
  40268e:	b089      	sub	sp, #36	; 0x24
  402690:	af00      	add	r7, sp, #0
  402692:	6078      	str	r0, [r7, #4]
  402694:	687b      	ldr	r3, [r7, #4]
  402696:	61fb      	str	r3, [r7, #28]
  402698:	69fb      	ldr	r3, [r7, #28]
  40269a:	61bb      	str	r3, [r7, #24]
  40269c:	69bb      	ldr	r3, [r7, #24]
  40269e:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4026a0:	697b      	ldr	r3, [r7, #20]
  4026a2:	095b      	lsrs	r3, r3, #5
  4026a4:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4026a6:	693b      	ldr	r3, [r7, #16]
  4026a8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4026ac:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4026b0:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4026b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4026b4:	69fb      	ldr	r3, [r7, #28]
  4026b6:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4026b8:	68fb      	ldr	r3, [r7, #12]
  4026ba:	f003 031f 	and.w	r3, r3, #31
  4026be:	2101      	movs	r1, #1
  4026c0:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4026c4:	4013      	ands	r3, r2
  4026c6:	2b00      	cmp	r3, #0
  4026c8:	bf14      	ite	ne
  4026ca:	2301      	movne	r3, #1
  4026cc:	2300      	moveq	r3, #0
  4026ce:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  4026d0:	4618      	mov	r0, r3
  4026d2:	3724      	adds	r7, #36	; 0x24
  4026d4:	46bd      	mov	sp, r7
  4026d6:	bc80      	pop	{r7}
  4026d8:	4770      	bx	lr
  4026da:	bf00      	nop

004026dc <main>:
#include "board.h"
#include "conf_board.h"
#include "conf_clock.h"

int main (void)
{
  4026dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026e0:	b087      	sub	sp, #28
  4026e2:	af00      	add	r7, sp, #0
	sysclk_init();
  4026e4:	4b7d      	ldr	r3, [pc, #500]	; (4028dc <main+0x200>)
  4026e6:	4798      	blx	r3
	board_init();
  4026e8:	4b7d      	ldr	r3, [pc, #500]	; (4028e0 <main+0x204>)
  4026ea:	4798      	blx	r3
	ioport_init();
  4026ec:	4b7d      	ldr	r3, [pc, #500]	; (4028e4 <main+0x208>)
  4026ee:	4798      	blx	r3
	wdt_disable(WDT);
  4026f0:	487d      	ldr	r0, [pc, #500]	; (4028e8 <main+0x20c>)
  4026f2:	4b7e      	ldr	r3, [pc, #504]	; (4028ec <main+0x210>)
  4026f4:	4798      	blx	r3
    pmc_enable_pllack(7, 0x1, 1); /* PLLA work at 96 Mhz */
  4026f6:	2201      	movs	r2, #1
  4026f8:	2101      	movs	r1, #1
  4026fa:	2007      	movs	r0, #7
  4026fc:	4b7c      	ldr	r3, [pc, #496]	; (4028f0 <main+0x214>)
  4026fe:	4798      	blx	r3
	configure_usart_wifi();
  402700:	4b7c      	ldr	r3, [pc, #496]	; (4028f4 <main+0x218>)
  402702:	4798      	blx	r3
	wifi_web_setup_flag=false;
  402704:	4b7c      	ldr	r3, [pc, #496]	; (4028f8 <main+0x21c>)
  402706:	2200      	movs	r2, #0
  402708:	601a      	str	r2, [r3, #0]
	configure_wifi_comm_pin();
  40270a:	4b7c      	ldr	r3, [pc, #496]	; (4028fc <main+0x220>)
  40270c:	4798      	blx	r3
	configure_wifi_web_setup_pin();
  40270e:	4b7c      	ldr	r3, [pc, #496]	; (402900 <main+0x224>)
  402710:	4798      	blx	r3
	configure_tc();
  402712:	4b7c      	ldr	r3, [pc, #496]	; (402904 <main+0x228>)
  402714:	4798      	blx	r3
	ioport_set_pin_dir(USART0_RTS_IDX,IOPORT_DIR_OUTPUT);
  402716:	2101      	movs	r1, #1
  402718:	2007      	movs	r0, #7
  40271a:	4b7b      	ldr	r3, [pc, #492]	; (402908 <main+0x22c>)
  40271c:	4798      	blx	r3
	ioport_set_pin_level(USART0_RTS_IDX,false);
  40271e:	2100      	movs	r1, #0
  402720:	2007      	movs	r0, #7
  402722:	4b7a      	ldr	r3, [pc, #488]	; (40290c <main+0x230>)
  402724:	4798      	blx	r3
	ioport_set_pin_level(OV_RESET,false);
  402726:	2100      	movs	r1, #0
  402728:	2014      	movs	r0, #20
  40272a:	4b78      	ldr	r3, [pc, #480]	; (40290c <main+0x230>)
  40272c:	4798      	blx	r3
	delay_ms(1);
  40272e:	4b78      	ldr	r3, [pc, #480]	; (402910 <main+0x234>)
  402730:	4798      	blx	r3
  402732:	4603      	mov	r3, r0
  402734:	f04f 0400 	mov.w	r4, #0
  402738:	f243 61af 	movw	r1, #13999	; 0x36af
  40273c:	f04f 0200 	mov.w	r2, #0
  402740:	eb13 0801 	adds.w	r8, r3, r1
  402744:	eb44 0902 	adc.w	r9, r4, r2
  402748:	4640      	mov	r0, r8
  40274a:	4649      	mov	r1, r9
  40274c:	4c71      	ldr	r4, [pc, #452]	; (402914 <main+0x238>)
  40274e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402752:	f04f 0300 	mov.w	r3, #0
  402756:	47a0      	blx	r4
  402758:	4603      	mov	r3, r0
  40275a:	460c      	mov	r4, r1
  40275c:	4618      	mov	r0, r3
  40275e:	4b6e      	ldr	r3, [pc, #440]	; (402918 <main+0x23c>)
  402760:	4798      	blx	r3
	ioport_set_pin_level(OV_RESET,true);
  402762:	2101      	movs	r1, #1
  402764:	2014      	movs	r0, #20
  402766:	4b69      	ldr	r3, [pc, #420]	; (40290c <main+0x230>)
  402768:	4798      	blx	r3
	init_camera();
  40276a:	4b6c      	ldr	r3, [pc, #432]	; (40291c <main+0x240>)
  40276c:	4798      	blx	r3
	uint8_t find_len = false;
  40276e:	2300      	movs	r3, #0
  402770:	75fb      	strb	r3, [r7, #23]
	uint8_t cap = false;
  402772:	2300      	movs	r3, #0
  402774:	75bb      	strb	r3, [r7, #22]

	/* Reset Wifi and wait for network */
	ioport_set_pin_level(WIFI_RESET, false);
  402776:	2100      	movs	r1, #0
  402778:	2020      	movs	r0, #32
  40277a:	4b64      	ldr	r3, [pc, #400]	; (40290c <main+0x230>)
  40277c:	4798      	blx	r3
	delay_ms(100);
  40277e:	4b64      	ldr	r3, [pc, #400]	; (402910 <main+0x234>)
  402780:	4798      	blx	r3
  402782:	4603      	mov	r3, r0
  402784:	4619      	mov	r1, r3
  402786:	f04f 0200 	mov.w	r2, #0
  40278a:	460b      	mov	r3, r1
  40278c:	4614      	mov	r4, r2
  40278e:	18db      	adds	r3, r3, r3
  402790:	eb44 0404 	adc.w	r4, r4, r4
  402794:	185b      	adds	r3, r3, r1
  402796:	eb44 0402 	adc.w	r4, r4, r2
  40279a:	0160      	lsls	r0, r4, #5
  40279c:	60f8      	str	r0, [r7, #12]
  40279e:	68f8      	ldr	r0, [r7, #12]
  4027a0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  4027a4:	60f8      	str	r0, [r7, #12]
  4027a6:	0158      	lsls	r0, r3, #5
  4027a8:	60b8      	str	r0, [r7, #8]
  4027aa:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
  4027ae:	eb18 0803 	adds.w	r8, r8, r3
  4027b2:	eb49 0904 	adc.w	r9, r9, r4
  4027b6:	4643      	mov	r3, r8
  4027b8:	464c      	mov	r4, r9
  4027ba:	185b      	adds	r3, r3, r1
  4027bc:	eb44 0402 	adc.w	r4, r4, r2
  4027c0:	f243 61af 	movw	r1, #13999	; 0x36af
  4027c4:	f04f 0200 	mov.w	r2, #0
  4027c8:	eb13 0801 	adds.w	r8, r3, r1
  4027cc:	eb44 0902 	adc.w	r9, r4, r2
  4027d0:	4640      	mov	r0, r8
  4027d2:	4649      	mov	r1, r9
  4027d4:	4c4f      	ldr	r4, [pc, #316]	; (402914 <main+0x238>)
  4027d6:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4027da:	f04f 0300 	mov.w	r3, #0
  4027de:	47a0      	blx	r4
  4027e0:	4603      	mov	r3, r0
  4027e2:	460c      	mov	r4, r1
  4027e4:	4618      	mov	r0, r3
  4027e6:	4b4c      	ldr	r3, [pc, #304]	; (402918 <main+0x23c>)
  4027e8:	4798      	blx	r3
	ioport_set_pin_level(WIFI_RESET, true);
  4027ea:	2101      	movs	r1, #1
  4027ec:	2020      	movs	r0, #32
  4027ee:	4b47      	ldr	r3, [pc, #284]	; (40290c <main+0x230>)
  4027f0:	4798      	blx	r3
	
	
	while (!ioport_get_pin_level(NETWORK)){}
  4027f2:	bf00      	nop
  4027f4:	202b      	movs	r0, #43	; 0x2b
  4027f6:	4b4a      	ldr	r3, [pc, #296]	; (402920 <main+0x244>)
  4027f8:	4798      	blx	r3
  4027fa:	4603      	mov	r3, r0
  4027fc:	f083 0301 	eor.w	r3, r3, #1
  402800:	b2db      	uxtb	r3, r3
  402802:	2b00      	cmp	r3, #0
  402804:	d1f6      	bne.n	4027f4 <main+0x118>
	
	
	while(1)
	{	
		
		while (!ioport_get_pin_level(NETWORK)){}
  402806:	bf00      	nop
  402808:	202b      	movs	r0, #43	; 0x2b
  40280a:	4b45      	ldr	r3, [pc, #276]	; (402920 <main+0x244>)
  40280c:	4798      	blx	r3
  40280e:	4603      	mov	r3, r0
  402810:	f083 0301 	eor.w	r3, r3, #1
  402814:	b2db      	uxtb	r3, r3
  402816:	2b00      	cmp	r3, #0
  402818:	d1f6      	bne.n	402808 <main+0x12c>
		while(!stream_flag){
  40281a:	e03e      	b.n	40289a <main+0x1be>
		write_wifi_command("poll all\r\n", 1); 
  40281c:	2101      	movs	r1, #1
  40281e:	4841      	ldr	r0, [pc, #260]	; (402924 <main+0x248>)
  402820:	4b41      	ldr	r3, [pc, #260]	; (402928 <main+0x24c>)
  402822:	4798      	blx	r3
		
		delay_ms(500);
  402824:	4b3a      	ldr	r3, [pc, #232]	; (402910 <main+0x234>)
  402826:	4798      	blx	r3
  402828:	4603      	mov	r3, r0
  40282a:	4619      	mov	r1, r3
  40282c:	f04f 0200 	mov.w	r2, #0
  402830:	460b      	mov	r3, r1
  402832:	4614      	mov	r4, r2
  402834:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  402838:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  40283c:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  402840:	4653      	mov	r3, sl
  402842:	465c      	mov	r4, fp
  402844:	0166      	lsls	r6, r4, #5
  402846:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  40284a:	015d      	lsls	r5, r3, #5
  40284c:	1aed      	subs	r5, r5, r3
  40284e:	eb66 0604 	sbc.w	r6, r6, r4
  402852:	186d      	adds	r5, r5, r1
  402854:	eb46 0602 	adc.w	r6, r6, r2
  402858:	00b3      	lsls	r3, r6, #2
  40285a:	607b      	str	r3, [r7, #4]
  40285c:	687b      	ldr	r3, [r7, #4]
  40285e:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
  402862:	607b      	str	r3, [r7, #4]
  402864:	00ab      	lsls	r3, r5, #2
  402866:	603b      	str	r3, [r7, #0]
  402868:	e9d7 5600 	ldrd	r5, r6, [r7]
  40286c:	4629      	mov	r1, r5
  40286e:	4632      	mov	r2, r6
  402870:	f243 63af 	movw	r3, #13999	; 0x36af
  402874:	f04f 0400 	mov.w	r4, #0
  402878:	eb11 0803 	adds.w	r8, r1, r3
  40287c:	eb42 0904 	adc.w	r9, r2, r4
  402880:	4640      	mov	r0, r8
  402882:	4649      	mov	r1, r9
  402884:	4c23      	ldr	r4, [pc, #140]	; (402914 <main+0x238>)
  402886:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40288a:	f04f 0300 	mov.w	r3, #0
  40288e:	47a0      	blx	r4
  402890:	4603      	mov	r3, r0
  402892:	460c      	mov	r4, r1
  402894:	4618      	mov	r0, r3
  402896:	4b20      	ldr	r3, [pc, #128]	; (402918 <main+0x23c>)
  402898:	4798      	blx	r3
	
	while(1)
	{	
		
		while (!ioport_get_pin_level(NETWORK)){}
		while(!stream_flag){
  40289a:	4b24      	ldr	r3, [pc, #144]	; (40292c <main+0x250>)
  40289c:	681b      	ldr	r3, [r3, #0]
  40289e:	2b00      	cmp	r3, #0
  4028a0:	d0bc      	beq.n	40281c <main+0x140>
		write_wifi_command("poll all\r\n", 1); 
		
		delay_ms(500);
		}
		stream_flag = false;
  4028a2:	4b22      	ldr	r3, [pc, #136]	; (40292c <main+0x250>)
  4028a4:	2200      	movs	r2, #0
  4028a6:	601a      	str	r2, [r3, #0]
	    cap = start_capture();
  4028a8:	4b21      	ldr	r3, [pc, #132]	; (402930 <main+0x254>)
  4028aa:	4798      	blx	r3
  4028ac:	4603      	mov	r3, r0
  4028ae:	75bb      	strb	r3, [r7, #22]
	
		while(!cap){}
  4028b0:	7dbb      	ldrb	r3, [r7, #22]
  4028b2:	2b00      	cmp	r3, #0
  4028b4:	d0fc      	beq.n	4028b0 <main+0x1d4>
		
		find_len = find_image_len();
  4028b6:	4b1f      	ldr	r3, [pc, #124]	; (402934 <main+0x258>)
  4028b8:	4798      	blx	r3
  4028ba:	4603      	mov	r3, r0
  4028bc:	75fb      	strb	r3, [r7, #23]
		cap = false;
  4028be:	2300      	movs	r3, #0
  4028c0:	75bb      	strb	r3, [r7, #22]

		while(!find_len) {}
  4028c2:	7dfb      	ldrb	r3, [r7, #23]
  4028c4:	2b00      	cmp	r3, #0
  4028c6:	d0fc      	beq.n	4028c2 <main+0x1e6>

		write_image_to_file();
  4028c8:	4b1b      	ldr	r3, [pc, #108]	; (402938 <main+0x25c>)
  4028ca:	4798      	blx	r3
		find_len = false;
  4028cc:	2300      	movs	r3, #0
  4028ce:	75fb      	strb	r3, [r7, #23]

		write_wifi_command("stream_write 0 1\r\n ", 1);	
  4028d0:	2101      	movs	r1, #1
  4028d2:	481a      	ldr	r0, [pc, #104]	; (40293c <main+0x260>)
  4028d4:	4b14      	ldr	r3, [pc, #80]	; (402928 <main+0x24c>)
  4028d6:	4798      	blx	r3
	}
  4028d8:	e795      	b.n	402806 <main+0x12a>
  4028da:	bf00      	nop
  4028dc:	00400c8d 	.word	0x00400c8d
  4028e0:	004030ad 	.word	0x004030ad
  4028e4:	00402581 	.word	0x00402581
  4028e8:	400e1450 	.word	0x400e1450
  4028ec:	00401e55 	.word	0x00401e55
  4028f0:	004015e1 	.word	0x004015e1
  4028f4:	004005f5 	.word	0x004005f5
  4028f8:	200008a8 	.word	0x200008a8
  4028fc:	004005a5 	.word	0x004005a5
  402900:	0040075d 	.word	0x0040075d
  402904:	00402f71 	.word	0x00402f71
  402908:	00402599 	.word	0x00402599
  40290c:	00402621 	.word	0x00402621
  402910:	00402551 	.word	0x00402551
  402914:	004034f5 	.word	0x004034f5
  402918:	20000001 	.word	0x20000001
  40291c:	0040213d 	.word	0x0040213d
  402920:	0040268d 	.word	0x0040268d
  402924:	0040875c 	.word	0x0040875c
  402928:	004007bd 	.word	0x004007bd
  40292c:	200008b0 	.word	0x200008b0
  402930:	0040239d 	.word	0x0040239d
  402934:	0040241d 	.word	0x0040241d
  402938:	0040081d 	.word	0x0040081d
  40293c:	00408768 	.word	0x00408768

00402940 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  402940:	b480      	push	{r7}
  402942:	b083      	sub	sp, #12
  402944:	af00      	add	r7, sp, #0
  402946:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402948:	687b      	ldr	r3, [r7, #4]
  40294a:	2b07      	cmp	r3, #7
  40294c:	d825      	bhi.n	40299a <osc_get_rate+0x5a>
  40294e:	a201      	add	r2, pc, #4	; (adr r2, 402954 <osc_get_rate+0x14>)
  402950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402954:	00402975 	.word	0x00402975
  402958:	0040297b 	.word	0x0040297b
  40295c:	00402981 	.word	0x00402981
  402960:	00402987 	.word	0x00402987
  402964:	0040298b 	.word	0x0040298b
  402968:	0040298f 	.word	0x0040298f
  40296c:	00402993 	.word	0x00402993
  402970:	00402997 	.word	0x00402997
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  402974:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402978:	e010      	b.n	40299c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40297a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40297e:	e00d      	b.n	40299c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  402980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402984:	e00a      	b.n	40299c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  402986:	4b08      	ldr	r3, [pc, #32]	; (4029a8 <osc_get_rate+0x68>)
  402988:	e008      	b.n	40299c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40298a:	4b08      	ldr	r3, [pc, #32]	; (4029ac <osc_get_rate+0x6c>)
  40298c:	e006      	b.n	40299c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40298e:	4b08      	ldr	r3, [pc, #32]	; (4029b0 <osc_get_rate+0x70>)
  402990:	e004      	b.n	40299c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  402992:	4b07      	ldr	r3, [pc, #28]	; (4029b0 <osc_get_rate+0x70>)
  402994:	e002      	b.n	40299c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  402996:	4b06      	ldr	r3, [pc, #24]	; (4029b0 <osc_get_rate+0x70>)
  402998:	e000      	b.n	40299c <osc_get_rate+0x5c>
	}

	return 0;
  40299a:	2300      	movs	r3, #0
}
  40299c:	4618      	mov	r0, r3
  40299e:	370c      	adds	r7, #12
  4029a0:	46bd      	mov	sp, r7
  4029a2:	bc80      	pop	{r7}
  4029a4:	4770      	bx	lr
  4029a6:	bf00      	nop
  4029a8:	003d0900 	.word	0x003d0900
  4029ac:	007a1200 	.word	0x007a1200
  4029b0:	00b71b00 	.word	0x00b71b00

004029b4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4029b4:	b580      	push	{r7, lr}
  4029b6:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_PLL1_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLBCK) {
		return pll_get_default_rate(1);
  4029b8:	2006      	movs	r0, #6
  4029ba:	4b04      	ldr	r3, [pc, #16]	; (4029cc <sysclk_get_main_hz+0x18>)
  4029bc:	4798      	blx	r3
  4029be:	4602      	mov	r2, r0
  4029c0:	4613      	mov	r3, r2
  4029c2:	009b      	lsls	r3, r3, #2
  4029c4:	4413      	add	r3, r2
  4029c6:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4029c8:	4618      	mov	r0, r3
  4029ca:	bd80      	pop	{r7, pc}
  4029cc:	00402941 	.word	0x00402941

004029d0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4029d0:	b580      	push	{r7, lr}
  4029d2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4029d4:	4b02      	ldr	r3, [pc, #8]	; (4029e0 <sysclk_get_cpu_hz+0x10>)
  4029d6:	4798      	blx	r3
  4029d8:	4603      	mov	r3, r0
  4029da:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4029dc:	4618      	mov	r0, r3
  4029de:	bd80      	pop	{r7, pc}
  4029e0:	004029b5 	.word	0x004029b5

004029e4 <ov_id>:
 *
 * \param p_twi TWI interface.
 * \return PID and VER.
 */
static uint32_t ov_id(Twi* const p_twi)
{
  4029e4:	b580      	push	{r7, lr}
  4029e6:	b08e      	sub	sp, #56	; 0x38
  4029e8:	af00      	add	r7, sp, #0
  4029ea:	6078      	str	r0, [r7, #4]
	twi_packet_t packet_pid;
	twi_packet_t packet_ver;
	uint32_t ul_id = 0;
  4029ec:	2300      	movs	r3, #0
  4029ee:	60fb      	str	r3, [r7, #12]
	uint32_t ul_ver = 0;
  4029f0:	2300      	movs	r3, #0
  4029f2:	60bb      	str	r3, [r7, #8]

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  4029f4:	2330      	movs	r3, #48	; 0x30
  4029f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	packet_pid.addr[0] = OV2640_PIDH;
  4029fa:	230a      	movs	r3, #10
  4029fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	packet_pid.addr_length = 1;
  402a00:	2301      	movs	r3, #1
  402a02:	62bb      	str	r3, [r7, #40]	; 0x28
	packet_pid.buffer = &ul_id;
  402a04:	f107 030c 	add.w	r3, r7, #12
  402a08:	62fb      	str	r3, [r7, #44]	; 0x2c
	packet_pid.length = 1;
  402a0a:	2301      	movs	r3, #1
  402a0c:	633b      	str	r3, [r7, #48]	; 0x30

	ov_read_reg(p_twi, &packet_pid);
  402a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402a12:	4619      	mov	r1, r3
  402a14:	6878      	ldr	r0, [r7, #4]
  402a16:	4b0e      	ldr	r3, [pc, #56]	; (402a50 <ov_id+0x6c>)
  402a18:	4798      	blx	r3

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
  402a1a:	2330      	movs	r3, #48	; 0x30
  402a1c:	f887 3020 	strb.w	r3, [r7, #32]
	packet_ver.addr[0] = OV2640_PIDL;
  402a20:	230b      	movs	r3, #11
  402a22:	743b      	strb	r3, [r7, #16]
	packet_ver.addr_length = 1;
  402a24:	2301      	movs	r3, #1
  402a26:	617b      	str	r3, [r7, #20]
	packet_ver.buffer = &ul_ver;
  402a28:	f107 0308 	add.w	r3, r7, #8
  402a2c:	61bb      	str	r3, [r7, #24]
	packet_ver.length = 1;
  402a2e:	2301      	movs	r3, #1
  402a30:	61fb      	str	r3, [r7, #28]

	ov_read_reg(p_twi, &packet_ver);
  402a32:	f107 0310 	add.w	r3, r7, #16
  402a36:	4619      	mov	r1, r3
  402a38:	6878      	ldr	r0, [r7, #4]
  402a3a:	4b05      	ldr	r3, [pc, #20]	; (402a50 <ov_id+0x6c>)
  402a3c:	4798      	blx	r3
	return ((uint32_t)(ul_id << 8) | ul_ver);
  402a3e:	68fb      	ldr	r3, [r7, #12]
  402a40:	021a      	lsls	r2, r3, #8
  402a42:	68bb      	ldr	r3, [r7, #8]
  402a44:	4313      	orrs	r3, r2
}
  402a46:	4618      	mov	r0, r3
  402a48:	3738      	adds	r7, #56	; 0x38
  402a4a:	46bd      	mov	sp, r7
  402a4c:	bd80      	pop	{r7, pc}
  402a4e:	bf00      	nop
  402a50:	00402b7d 	.word	0x00402b7d

00402a54 <ov_manufacturer>:
 *
 * \param p_twi TWI interface.
 * \return 0 if the sensor is present, 1 otherwise.
 */
static uint32_t ov_manufacturer(Twi* const p_twi)
{
  402a54:	b580      	push	{r7, lr}
  402a56:	b08a      	sub	sp, #40	; 0x28
  402a58:	af00      	add	r7, sp, #0
  402a5a:	6078      	str	r0, [r7, #4]
	twi_packet_t twi_packet;
	uint32_t ul_midh = 0;
  402a5c:	2300      	movs	r3, #0
  402a5e:	613b      	str	r3, [r7, #16]
	uint32_t ul_midl = 0;
  402a60:	2300      	movs	r3, #0
  402a62:	60fb      	str	r3, [r7, #12]

	/* OV_MIDH */
	twi_packet.addr[0] = OV2640_MIDH;
  402a64:	231c      	movs	r3, #28
  402a66:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  402a68:	2301      	movs	r3, #1
  402a6a:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  402a6c:	2330      	movs	r3, #48	; 0x30
  402a6e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.buffer = &ul_midh;
  402a72:	f107 0310 	add.w	r3, r7, #16
  402a76:	61fb      	str	r3, [r7, #28]
	twi_packet.length = 1;
  402a78:	2301      	movs	r3, #1
  402a7a:	623b      	str	r3, [r7, #32]

	ov_read_reg(p_twi, &twi_packet);
  402a7c:	f107 0314 	add.w	r3, r7, #20
  402a80:	4619      	mov	r1, r3
  402a82:	6878      	ldr	r0, [r7, #4]
  402a84:	4b10      	ldr	r3, [pc, #64]	; (402ac8 <ov_manufacturer+0x74>)
  402a86:	4798      	blx	r3

	/* OV_MIDL */
	twi_packet.addr[0] = OV2640_MIDL;
  402a88:	231d      	movs	r3, #29
  402a8a:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  402a8c:	2301      	movs	r3, #1
  402a8e:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  402a90:	2330      	movs	r3, #48	; 0x30
  402a92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.buffer = &ul_midl;
  402a96:	f107 030c 	add.w	r3, r7, #12
  402a9a:	61fb      	str	r3, [r7, #28]
	twi_packet.length = 1;
  402a9c:	2301      	movs	r3, #1
  402a9e:	623b      	str	r3, [r7, #32]

	ov_read_reg(p_twi, &twi_packet);
  402aa0:	f107 0314 	add.w	r3, r7, #20
  402aa4:	4619      	mov	r1, r3
  402aa6:	6878      	ldr	r0, [r7, #4]
  402aa8:	4b07      	ldr	r3, [pc, #28]	; (402ac8 <ov_manufacturer+0x74>)
  402aaa:	4798      	blx	r3

	if ((ul_midh == OV2640_MIDH_DEFAULT) && (ul_midl == OV2640_MIDL_DEFAULT)) {
  402aac:	693b      	ldr	r3, [r7, #16]
  402aae:	2b7f      	cmp	r3, #127	; 0x7f
  402ab0:	d104      	bne.n	402abc <ov_manufacturer+0x68>
  402ab2:	68fb      	ldr	r3, [r7, #12]
  402ab4:	2ba2      	cmp	r3, #162	; 0xa2
  402ab6:	d101      	bne.n	402abc <ov_manufacturer+0x68>
		return 0;
  402ab8:	2300      	movs	r3, #0
  402aba:	e000      	b.n	402abe <ov_manufacturer+0x6a>
	}

	return 1;
  402abc:	2301      	movs	r3, #1
}
  402abe:	4618      	mov	r0, r3
  402ac0:	3728      	adds	r7, #40	; 0x28
  402ac2:	46bd      	mov	sp, r7
  402ac4:	bd80      	pop	{r7, pc}
  402ac6:	bf00      	nop
  402ac8:	00402b7d 	.word	0x00402b7d

00402acc <ov_test_write>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
static uint32_t ov_test_write(Twi* const p_twi)
{
  402acc:	b580      	push	{r7, lr}
  402ace:	b08a      	sub	sp, #40	; 0x28
  402ad0:	af00      	add	r7, sp, #0
  402ad2:	6078      	str	r0, [r7, #4]
	twi_packet_t twi_packet;
	uint32_t ul_value = 0;
  402ad4:	2300      	movs	r3, #0
  402ad6:	613b      	str	r3, [r7, #16]
	uint32_t ul_oldvalue = 0;
  402ad8:	2300      	movs	r3, #0
  402ada:	60fb      	str	r3, [r7, #12]
	uint32_t ul_entervalue = 0;
  402adc:	2300      	movs	r3, #0
  402ade:	60bb      	str	r3, [r7, #8]

	/* OV_BLUE_GAIN */
	twi_packet.addr[0] = 0x01;
  402ae0:	2301      	movs	r3, #1
  402ae2:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  402ae4:	2301      	movs	r3, #1
  402ae6:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  402ae8:	2330      	movs	r3, #48	; 0x30
  402aea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.length = 1;
  402aee:	2301      	movs	r3, #1
  402af0:	623b      	str	r3, [r7, #32]

	twi_packet.buffer = &ul_oldvalue;
  402af2:	f107 030c 	add.w	r3, r7, #12
  402af6:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  402af8:	f107 0314 	add.w	r3, r7, #20
  402afc:	4619      	mov	r1, r3
  402afe:	6878      	ldr	r0, [r7, #4]
  402b00:	4b1c      	ldr	r3, [pc, #112]	; (402b74 <ov_test_write+0xa8>)
  402b02:	4798      	blx	r3

	ul_entervalue = 0xAD;
  402b04:	23ad      	movs	r3, #173	; 0xad
  402b06:	60bb      	str	r3, [r7, #8]
	twi_packet.buffer = &ul_entervalue;
  402b08:	f107 0308 	add.w	r3, r7, #8
  402b0c:	61fb      	str	r3, [r7, #28]
	ov_write_reg(p_twi, &twi_packet);
  402b0e:	f107 0314 	add.w	r3, r7, #20
  402b12:	4619      	mov	r1, r3
  402b14:	6878      	ldr	r0, [r7, #4]
  402b16:	4b18      	ldr	r3, [pc, #96]	; (402b78 <ov_test_write+0xac>)
  402b18:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  402b1a:	f107 0310 	add.w	r3, r7, #16
  402b1e:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  402b20:	f107 0314 	add.w	r3, r7, #20
  402b24:	4619      	mov	r1, r3
  402b26:	6878      	ldr	r0, [r7, #4]
  402b28:	4b12      	ldr	r3, [pc, #72]	; (402b74 <ov_test_write+0xa8>)
  402b2a:	4798      	blx	r3

	if (ul_value != ul_entervalue) {
  402b2c:	693a      	ldr	r2, [r7, #16]
  402b2e:	68bb      	ldr	r3, [r7, #8]
  402b30:	429a      	cmp	r2, r3
  402b32:	d001      	beq.n	402b38 <ov_test_write+0x6c>
		return 1;
  402b34:	2301      	movs	r3, #1
  402b36:	e018      	b.n	402b6a <ov_test_write+0x9e>
	}

	/* return old value */
	twi_packet.buffer = &ul_oldvalue;
  402b38:	f107 030c 	add.w	r3, r7, #12
  402b3c:	61fb      	str	r3, [r7, #28]
	ov_write_reg(p_twi, &twi_packet);
  402b3e:	f107 0314 	add.w	r3, r7, #20
  402b42:	4619      	mov	r1, r3
  402b44:	6878      	ldr	r0, [r7, #4]
  402b46:	4b0c      	ldr	r3, [pc, #48]	; (402b78 <ov_test_write+0xac>)
  402b48:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  402b4a:	f107 0310 	add.w	r3, r7, #16
  402b4e:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  402b50:	f107 0314 	add.w	r3, r7, #20
  402b54:	4619      	mov	r1, r3
  402b56:	6878      	ldr	r0, [r7, #4]
  402b58:	4b06      	ldr	r3, [pc, #24]	; (402b74 <ov_test_write+0xa8>)
  402b5a:	4798      	blx	r3

	if (ul_value != ul_oldvalue) {
  402b5c:	693a      	ldr	r2, [r7, #16]
  402b5e:	68fb      	ldr	r3, [r7, #12]
  402b60:	429a      	cmp	r2, r3
  402b62:	d001      	beq.n	402b68 <ov_test_write+0x9c>
		return 1;
  402b64:	2301      	movs	r3, #1
  402b66:	e000      	b.n	402b6a <ov_test_write+0x9e>
	}

	return 0;
  402b68:	2300      	movs	r3, #0
}
  402b6a:	4618      	mov	r0, r3
  402b6c:	3728      	adds	r7, #40	; 0x28
  402b6e:	46bd      	mov	sp, r7
  402b70:	bd80      	pop	{r7, pc}
  402b72:	bf00      	nop
  402b74:	00402b7d 	.word	0x00402b7d
  402b78:	00402ba1 	.word	0x00402ba1

00402b7c <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  402b7c:	b580      	push	{r7, lr}
  402b7e:	b084      	sub	sp, #16
  402b80:	af00      	add	r7, sp, #0
  402b82:	6078      	str	r0, [r7, #4]
  402b84:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  402b86:	6839      	ldr	r1, [r7, #0]
  402b88:	6878      	ldr	r0, [r7, #4]
  402b8a:	4b04      	ldr	r3, [pc, #16]	; (402b9c <ov_read_reg+0x20>)
  402b8c:	4798      	blx	r3
  402b8e:	60f8      	str	r0, [r7, #12]

	return ul_status;
  402b90:	68fb      	ldr	r3, [r7, #12]
}
  402b92:	4618      	mov	r0, r3
  402b94:	3710      	adds	r7, #16
  402b96:	46bd      	mov	sp, r7
  402b98:	bd80      	pop	{r7, pc}
  402b9a:	bf00      	nop
  402b9c:	004018ed 	.word	0x004018ed

00402ba0 <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  402ba0:	b580      	push	{r7, lr}
  402ba2:	b084      	sub	sp, #16
  402ba4:	af00      	add	r7, sp, #0
  402ba6:	6078      	str	r0, [r7, #4]
  402ba8:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  402baa:	6839      	ldr	r1, [r7, #0]
  402bac:	6878      	ldr	r0, [r7, #4]
  402bae:	4b04      	ldr	r3, [pc, #16]	; (402bc0 <ov_write_reg+0x20>)
  402bb0:	4798      	blx	r3
  402bb2:	60f8      	str	r0, [r7, #12]

	return ul_status;
  402bb4:	68fb      	ldr	r3, [r7, #12]
}
  402bb6:	4618      	mov	r0, r3
  402bb8:	3710      	adds	r7, #16
  402bba:	46bd      	mov	sp, r7
  402bbc:	bd80      	pop	{r7, pc}
  402bbe:	bf00      	nop
  402bc0:	004019f9 	.word	0x004019f9

00402bc4 <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twi* const p_twi, const ov_reg *p_reg_list)
{
  402bc4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  402bc8:	b08a      	sub	sp, #40	; 0x28
  402bca:	af00      	add	r7, sp, #0
  402bcc:	6078      	str	r0, [r7, #4]
  402bce:	6039      	str	r1, [r7, #0]
	uint32_t ul_err;
	uint32_t ul_size = 0;
  402bd0:	2300      	movs	r3, #0
  402bd2:	627b      	str	r3, [r7, #36]	; 0x24
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;
  402bd4:	683b      	ldr	r3, [r7, #0]
  402bd6:	623b      	str	r3, [r7, #32]

	while (!((p_next->reg == OV_REG_TERM) &&
  402bd8:	e048      	b.n	402c6c <ov_write_regs+0xa8>
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
  402bda:	6a3b      	ldr	r3, [r7, #32]
  402bdc:	781b      	ldrb	r3, [r3, #0]
  402bde:	2bfe      	cmp	r3, #254	; 0xfe
  402be0:	d126      	bne.n	402c30 <ov_write_regs+0x6c>
			delay_ms(5);
  402be2:	4b29      	ldr	r3, [pc, #164]	; (402c88 <ov_write_regs+0xc4>)
  402be4:	4798      	blx	r3
  402be6:	4603      	mov	r3, r0
  402be8:	4619      	mov	r1, r3
  402bea:	f04f 0200 	mov.w	r2, #0
  402bee:	460b      	mov	r3, r1
  402bf0:	4614      	mov	r4, r2
  402bf2:	00a6      	lsls	r6, r4, #2
  402bf4:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  402bf8:	009d      	lsls	r5, r3, #2
  402bfa:	462b      	mov	r3, r5
  402bfc:	4634      	mov	r4, r6
  402bfe:	185b      	adds	r3, r3, r1
  402c00:	eb44 0402 	adc.w	r4, r4, r2
  402c04:	f243 61af 	movw	r1, #13999	; 0x36af
  402c08:	f04f 0200 	mov.w	r2, #0
  402c0c:	eb13 0b01 	adds.w	fp, r3, r1
  402c10:	eb44 0c02 	adc.w	ip, r4, r2
  402c14:	4658      	mov	r0, fp
  402c16:	4661      	mov	r1, ip
  402c18:	4c1c      	ldr	r4, [pc, #112]	; (402c8c <ov_write_regs+0xc8>)
  402c1a:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402c1e:	f04f 0300 	mov.w	r3, #0
  402c22:	47a0      	blx	r4
  402c24:	4603      	mov	r3, r0
  402c26:	460c      	mov	r4, r1
  402c28:	4618      	mov	r0, r3
  402c2a:	4b19      	ldr	r3, [pc, #100]	; (402c90 <ov_write_regs+0xcc>)
  402c2c:	4798      	blx	r3
  402c2e:	e01a      	b.n	402c66 <ov_write_regs+0xa2>
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
  402c30:	6a3b      	ldr	r3, [r7, #32]
  402c32:	781b      	ldrb	r3, [r3, #0]
  402c34:	723b      	strb	r3, [r7, #8]
			twi_packet_regs.addr_length = 1;
  402c36:	2301      	movs	r3, #1
  402c38:	60fb      	str	r3, [r7, #12]
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  402c3a:	2330      	movs	r3, #48	; 0x30
  402c3c:	763b      	strb	r3, [r7, #24]
			twi_packet_regs.length = 1;
  402c3e:	2301      	movs	r3, #1
  402c40:	617b      	str	r3, [r7, #20]
			twi_packet_regs.buffer = &(p_next->val);
  402c42:	6a3b      	ldr	r3, [r7, #32]
  402c44:	3301      	adds	r3, #1
  402c46:	613b      	str	r3, [r7, #16]

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  402c48:	f107 0308 	add.w	r3, r7, #8
  402c4c:	4619      	mov	r1, r3
  402c4e:	6878      	ldr	r0, [r7, #4]
  402c50:	4b10      	ldr	r3, [pc, #64]	; (402c94 <ov_write_regs+0xd0>)
  402c52:	4798      	blx	r3
  402c54:	61f8      	str	r0, [r7, #28]
			ul_size++;
  402c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c58:	3301      	adds	r3, #1
  402c5a:	627b      	str	r3, [r7, #36]	; 0x24

			if (ul_err == TWI_BUSY) {
  402c5c:	69fb      	ldr	r3, [r7, #28]
  402c5e:	2b08      	cmp	r3, #8
  402c60:	d101      	bne.n	402c66 <ov_write_regs+0xa2>
				return ul_err;
  402c62:	69fb      	ldr	r3, [r7, #28]
  402c64:	e00b      	b.n	402c7e <ov_write_regs+0xba>
			}
		}

		p_next++;
  402c66:	6a3b      	ldr	r3, [r7, #32]
  402c68:	3302      	adds	r3, #2
  402c6a:	623b      	str	r3, [r7, #32]
	uint32_t ul_err;
	uint32_t ul_size = 0;
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
  402c6c:	6a3b      	ldr	r3, [r7, #32]
  402c6e:	781b      	ldrb	r3, [r3, #0]
  402c70:	2bff      	cmp	r3, #255	; 0xff
  402c72:	d1b2      	bne.n	402bda <ov_write_regs+0x16>
			(p_next->val == OV_VAL_TERM))) {
  402c74:	6a3b      	ldr	r3, [r7, #32]
  402c76:	785b      	ldrb	r3, [r3, #1]
	uint32_t ul_err;
	uint32_t ul_size = 0;
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
  402c78:	2bff      	cmp	r3, #255	; 0xff
  402c7a:	d1ae      	bne.n	402bda <ov_write_regs+0x16>
			}
		}

		p_next++;
	}
	return 0;
  402c7c:	2300      	movs	r3, #0
}
  402c7e:	4618      	mov	r0, r3
  402c80:	3728      	adds	r7, #40	; 0x28
  402c82:	46bd      	mov	sp, r7
  402c84:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  402c88:	004029d1 	.word	0x004029d1
  402c8c:	004034f5 	.word	0x004034f5
  402c90:	20000001 	.word	0x20000001
  402c94:	00402ba1 	.word	0x00402ba1

00402c98 <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  402c98:	b580      	push	{r7, lr}
  402c9a:	b08a      	sub	sp, #40	; 0x28
  402c9c:	af00      	add	r7, sp, #0
  402c9e:	6078      	str	r0, [r7, #4]
	const uint8_t cont_reg_val = 1;
  402ca0:	2301      	movs	r3, #1
  402ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	twi_packet_t init_packet = {
  402ca6:	f107 030c 	add.w	r3, r7, #12
  402caa:	2200      	movs	r2, #0
  402cac:	601a      	str	r2, [r3, #0]
  402cae:	605a      	str	r2, [r3, #4]
  402cb0:	609a      	str	r2, [r3, #8]
  402cb2:	60da      	str	r2, [r3, #12]
  402cb4:	611a      	str	r2, [r3, #16]
  402cb6:	23ff      	movs	r3, #255	; 0xff
  402cb8:	733b      	strb	r3, [r7, #12]
  402cba:	2301      	movs	r3, #1
  402cbc:	613b      	str	r3, [r7, #16]
  402cbe:	f107 0323 	add.w	r3, r7, #35	; 0x23
  402cc2:	617b      	str	r3, [r7, #20]
  402cc4:	2301      	movs	r3, #1
  402cc6:	61bb      	str	r3, [r7, #24]
  402cc8:	2330      	movs	r3, #48	; 0x30
  402cca:	773b      	strb	r3, [r7, #28]
		.addr_length  = 1, //sizeof (uint16_t),    // TWI slave memory address data size
		.chip         = OV_I2C_SENSOR_ADDRESS,      // TWI slave bus address
		.buffer       = &cont_reg_val,        // transfer data destination buffer
		.length       = 1                    // transfer data size (bytes)
	};
	ov_write_reg(p_twi, &init_packet);
  402ccc:	f107 030c 	add.w	r3, r7, #12
  402cd0:	4619      	mov	r1, r3
  402cd2:	6878      	ldr	r0, [r7, #4]
  402cd4:	4b0f      	ldr	r3, [pc, #60]	; (402d14 <ov_init+0x7c>)
  402cd6:	4798      	blx	r3
	
	
	uint32_t ul_id = 0;
  402cd8:	2300      	movs	r3, #0
  402cda:	627b      	str	r3, [r7, #36]	; 0x24

	ul_id = ov_id( p_twi );
  402cdc:	6878      	ldr	r0, [r7, #4]
  402cde:	4b0e      	ldr	r3, [pc, #56]	; (402d18 <ov_init+0x80>)
  402ce0:	4798      	blx	r3
  402ce2:	6278      	str	r0, [r7, #36]	; 0x24

	if (((ul_id >> 8)&0xff)  == OV2640_PIDH_DEFAULT) {
  402ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402ce6:	0a1b      	lsrs	r3, r3, #8
  402ce8:	b2db      	uxtb	r3, r3
  402cea:	2b26      	cmp	r3, #38	; 0x26
  402cec:	d10d      	bne.n	402d0a <ov_init+0x72>
		if (ov_manufacturer( p_twi ) == 0) {
  402cee:	6878      	ldr	r0, [r7, #4]
  402cf0:	4b0a      	ldr	r3, [pc, #40]	; (402d1c <ov_init+0x84>)
  402cf2:	4798      	blx	r3
  402cf4:	4603      	mov	r3, r0
  402cf6:	2b00      	cmp	r3, #0
  402cf8:	d107      	bne.n	402d0a <ov_init+0x72>
			if (ov_test_write( p_twi ) == 0) {
  402cfa:	6878      	ldr	r0, [r7, #4]
  402cfc:	4b08      	ldr	r3, [pc, #32]	; (402d20 <ov_init+0x88>)
  402cfe:	4798      	blx	r3
  402d00:	4603      	mov	r3, r0
  402d02:	2b00      	cmp	r3, #0
  402d04:	d101      	bne.n	402d0a <ov_init+0x72>
				return 0;
  402d06:	2300      	movs	r3, #0
  402d08:	e000      	b.n	402d0c <ov_init+0x74>
			}
		}
	}

	return 1;
  402d0a:	2301      	movs	r3, #1
}
  402d0c:	4618      	mov	r0, r3
  402d0e:	3728      	adds	r7, #40	; 0x28
  402d10:	46bd      	mov	sp, r7
  402d12:	bd80      	pop	{r7, pc}
  402d14:	00402ba1 	.word	0x00402ba1
  402d18:	004029e5 	.word	0x004029e5
  402d1c:	00402a55 	.word	0x00402a55
  402d20:	00402acd 	.word	0x00402acd

00402d24 <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twi* const p_twi, const e_OV2640_format format)
{
  402d24:	b580      	push	{r7, lr}
  402d26:	b084      	sub	sp, #16
  402d28:	af00      	add	r7, sp, #0
  402d2a:	6078      	str	r0, [r7, #4]
  402d2c:	460b      	mov	r3, r1
  402d2e:	70fb      	strb	r3, [r7, #3]
	const ov_reg *p_regs_conf = NULL;
  402d30:	2300      	movs	r3, #0
  402d32:	60fb      	str	r3, [r7, #12]

	/* Common register initialization */
	switch (format) {
  402d34:	78fb      	ldrb	r3, [r7, #3]
  402d36:	2b11      	cmp	r3, #17
  402d38:	d85c      	bhi.n	402df4 <ov_configure+0xd0>
  402d3a:	a201      	add	r2, pc, #4	; (adr r2, 402d40 <ov_configure+0x1c>)
  402d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402d40:	00402d89 	.word	0x00402d89
  402d44:	00402d8f 	.word	0x00402d8f
  402d48:	00402d95 	.word	0x00402d95
  402d4c:	00402d9b 	.word	0x00402d9b
  402d50:	00402da1 	.word	0x00402da1
  402d54:	00402da7 	.word	0x00402da7
  402d58:	00402dad 	.word	0x00402dad
  402d5c:	00402db3 	.word	0x00402db3
  402d60:	00402db9 	.word	0x00402db9
  402d64:	00402dbf 	.word	0x00402dbf
  402d68:	00402dc5 	.word	0x00402dc5
  402d6c:	00402dcb 	.word	0x00402dcb
  402d70:	00402dd1 	.word	0x00402dd1
  402d74:	00402dd7 	.word	0x00402dd7
  402d78:	00402ddd 	.word	0x00402ddd
  402d7c:	00402de3 	.word	0x00402de3
  402d80:	00402de9 	.word	0x00402de9
  402d84:	00402def 	.word	0x00402def
		
	case JPEG_INIT:
		p_regs_conf = OV2640_JPEG_INIT;
  402d88:	4b22      	ldr	r3, [pc, #136]	; (402e14 <ov_configure+0xf0>)
  402d8a:	60fb      	str	r3, [r7, #12]
		break;
  402d8c:	e033      	b.n	402df6 <ov_configure+0xd2>
		
	case YUV422:
		p_regs_conf = OV2640_YUV422;
  402d8e:	4b22      	ldr	r3, [pc, #136]	; (402e18 <ov_configure+0xf4>)
  402d90:	60fb      	str	r3, [r7, #12]
		break;
  402d92:	e030      	b.n	402df6 <ov_configure+0xd2>
		
	case JPEG:
		p_regs_conf = OV2640_JPEG;
  402d94:	4b21      	ldr	r3, [pc, #132]	; (402e1c <ov_configure+0xf8>)
  402d96:	60fb      	str	r3, [r7, #12]
		break;
  402d98:	e02d      	b.n	402df6 <ov_configure+0xd2>
		
	case JPEG_320x240:
		p_regs_conf = OV2640_JPEG_320x240;
  402d9a:	4b21      	ldr	r3, [pc, #132]	; (402e20 <ov_configure+0xfc>)
  402d9c:	60fb      	str	r3, [r7, #12]
		break;
  402d9e:	e02a      	b.n	402df6 <ov_configure+0xd2>
		
	case JPEG_640x480:
		p_regs_conf = OV2640_JPEG_640x480;
  402da0:	4b20      	ldr	r3, [pc, #128]	; (402e24 <ov_configure+0x100>)
  402da2:	60fb      	str	r3, [r7, #12]
		break;
  402da4:	e027      	b.n	402df6 <ov_configure+0xd2>
		
	case JPEG_800x600:
		p_regs_conf = OV2640_JPEG_800x600;
  402da6:	4b20      	ldr	r3, [pc, #128]	; (402e28 <ov_configure+0x104>)
  402da8:	60fb      	str	r3, [r7, #12]
		break;
  402daa:	e024      	b.n	402df6 <ov_configure+0xd2>
		
	case JPEG_1024x768:
		p_regs_conf = OV2640_JPEG_1024x768;
  402dac:	4b1f      	ldr	r3, [pc, #124]	; (402e2c <ov_configure+0x108>)
  402dae:	60fb      	str	r3, [r7, #12]
		break;
  402db0:	e021      	b.n	402df6 <ov_configure+0xd2>
		
	case JPEG_1280x1024:
		p_regs_conf = OV2640_JPEG_1280x1024;
  402db2:	4b1f      	ldr	r3, [pc, #124]	; (402e30 <ov_configure+0x10c>)
  402db4:	60fb      	str	r3, [r7, #12]
		break;
  402db6:	e01e      	b.n	402df6 <ov_configure+0xd2>
		
	case JPEG_1600x1200:
		p_regs_conf = OV2640_JPEG_1600x1200;
  402db8:	4b1e      	ldr	r3, [pc, #120]	; (402e34 <ov_configure+0x110>)
  402dba:	60fb      	str	r3, [r7, #12]
		break;
  402dbc:	e01b      	b.n	402df6 <ov_configure+0xd2>
		
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV2640_QVGA_YUV422_10FPS;
  402dbe:	4b1e      	ldr	r3, [pc, #120]	; (402e38 <ov_configure+0x114>)
  402dc0:	60fb      	str	r3, [r7, #12]
		break;
  402dc2:	e018      	b.n	402df6 <ov_configure+0xd2>

	case QVGA_YUV422_15FPS:
		p_regs_conf = OV2640_QVGA_YUV422_15FPS;
  402dc4:	4b1d      	ldr	r3, [pc, #116]	; (402e3c <ov_configure+0x118>)
  402dc6:	60fb      	str	r3, [r7, #12]
		break;
  402dc8:	e015      	b.n	402df6 <ov_configure+0xd2>

	case QVGA_YUV422_20FPS:
		p_regs_conf = OV2640_QVGA_YUV422_20FPS;
  402dca:	4b1d      	ldr	r3, [pc, #116]	; (402e40 <ov_configure+0x11c>)
  402dcc:	60fb      	str	r3, [r7, #12]
		break;
  402dce:	e012      	b.n	402df6 <ov_configure+0xd2>

	case QVGA_YUV422_30FPS:
		p_regs_conf = OV2640_QVGA_YUV422_30FPS;
  402dd0:	4b1c      	ldr	r3, [pc, #112]	; (402e44 <ov_configure+0x120>)
  402dd2:	60fb      	str	r3, [r7, #12]
		break;
  402dd4:	e00f      	b.n	402df6 <ov_configure+0xd2>

	case QVGA_RGB888:
		p_regs_conf = OV2640_QVGA_RGB888;
  402dd6:	4b1c      	ldr	r3, [pc, #112]	; (402e48 <ov_configure+0x124>)
  402dd8:	60fb      	str	r3, [r7, #12]
		break;
  402dda:	e00c      	b.n	402df6 <ov_configure+0xd2>

	case QQVGA_YUV422:
		p_regs_conf = OV2640_QQVGA_YUV422;
  402ddc:	4b1b      	ldr	r3, [pc, #108]	; (402e4c <ov_configure+0x128>)
  402dde:	60fb      	str	r3, [r7, #12]
		break;
  402de0:	e009      	b.n	402df6 <ov_configure+0xd2>

	case QQVGA_RGB888:
		p_regs_conf = OV2640_QQVGA_RGB888;
  402de2:	4b1b      	ldr	r3, [pc, #108]	; (402e50 <ov_configure+0x12c>)
  402de4:	60fb      	str	r3, [r7, #12]
		break;
  402de6:	e006      	b.n	402df6 <ov_configure+0xd2>

	case TEST_PATTERN:
		p_regs_conf = OV2640_TEST_PATTERN;
  402de8:	4b1a      	ldr	r3, [pc, #104]	; (402e54 <ov_configure+0x130>)
  402dea:	60fb      	str	r3, [r7, #12]
		break;
  402dec:	e003      	b.n	402df6 <ov_configure+0xd2>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV2640_VGA_YUV422_20FPS;
  402dee:	4b1a      	ldr	r3, [pc, #104]	; (402e58 <ov_configure+0x134>)
  402df0:	60fb      	str	r3, [r7, #12]
		break;
  402df2:	e000      	b.n	402df6 <ov_configure+0xd2>

	default:
		break;
  402df4:	bf00      	nop
	}

	if (p_regs_conf != NULL) {
  402df6:	68fb      	ldr	r3, [r7, #12]
  402df8:	2b00      	cmp	r3, #0
  402dfa:	d005      	beq.n	402e08 <ov_configure+0xe4>
		ov_write_regs( p_twi, p_regs_conf );
  402dfc:	68f9      	ldr	r1, [r7, #12]
  402dfe:	6878      	ldr	r0, [r7, #4]
  402e00:	4b16      	ldr	r3, [pc, #88]	; (402e5c <ov_configure+0x138>)
  402e02:	4798      	blx	r3
		return 0;
  402e04:	2300      	movs	r3, #0
  402e06:	e000      	b.n	402e0a <ov_configure+0xe6>
	}

	return 1;
  402e08:	2301      	movs	r3, #1
}
  402e0a:	4618      	mov	r0, r3
  402e0c:	3710      	adds	r7, #16
  402e0e:	46bd      	mov	sp, r7
  402e10:	bd80      	pop	{r7, pc}
  402e12:	bf00      	nop
  402e14:	0040877c 	.word	0x0040877c
  402e18:	004088fc 	.word	0x004088fc
  402e1c:	00408910 	.word	0x00408910
  402e20:	00408924 	.word	0x00408924
  402e24:	00408974 	.word	0x00408974
  402e28:	004089c8 	.word	0x004089c8
  402e2c:	00408a1c 	.word	0x00408a1c
  402e30:	00408a6c 	.word	0x00408a6c
  402e34:	00408ac0 	.word	0x00408ac0
  402e38:	00408b14 	.word	0x00408b14
  402e3c:	00408c04 	.word	0x00408c04
  402e40:	00408cf4 	.word	0x00408cf4
  402e44:	00408de4 	.word	0x00408de4
  402e48:	00408ed4 	.word	0x00408ed4
  402e4c:	00408fc8 	.word	0x00408fc8
  402e50:	004090bc 	.word	0x004090bc
  402e54:	004091b0 	.word	0x004091b0
  402e58:	004092a4 	.word	0x004092a4
  402e5c:	00402bc5 	.word	0x00402bc5

00402e60 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  402e60:	b480      	push	{r7}
  402e62:	b083      	sub	sp, #12
  402e64:	af00      	add	r7, sp, #0
  402e66:	4603      	mov	r3, r0
  402e68:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402e6a:	4908      	ldr	r1, [pc, #32]	; (402e8c <NVIC_EnableIRQ+0x2c>)
  402e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402e70:	095b      	lsrs	r3, r3, #5
  402e72:	79fa      	ldrb	r2, [r7, #7]
  402e74:	f002 021f 	and.w	r2, r2, #31
  402e78:	2001      	movs	r0, #1
  402e7a:	fa00 f202 	lsl.w	r2, r0, r2
  402e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402e82:	bf00      	nop
  402e84:	370c      	adds	r7, #12
  402e86:	46bd      	mov	sp, r7
  402e88:	bc80      	pop	{r7}
  402e8a:	4770      	bx	lr
  402e8c:	e000e100 	.word	0xe000e100

00402e90 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  402e90:	b480      	push	{r7}
  402e92:	b083      	sub	sp, #12
  402e94:	af00      	add	r7, sp, #0
  402e96:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402e98:	687b      	ldr	r3, [r7, #4]
  402e9a:	2b07      	cmp	r3, #7
  402e9c:	d825      	bhi.n	402eea <osc_get_rate+0x5a>
  402e9e:	a201      	add	r2, pc, #4	; (adr r2, 402ea4 <osc_get_rate+0x14>)
  402ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402ea4:	00402ec5 	.word	0x00402ec5
  402ea8:	00402ecb 	.word	0x00402ecb
  402eac:	00402ed1 	.word	0x00402ed1
  402eb0:	00402ed7 	.word	0x00402ed7
  402eb4:	00402edb 	.word	0x00402edb
  402eb8:	00402edf 	.word	0x00402edf
  402ebc:	00402ee3 	.word	0x00402ee3
  402ec0:	00402ee7 	.word	0x00402ee7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  402ec4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402ec8:	e010      	b.n	402eec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  402eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402ece:	e00d      	b.n	402eec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  402ed0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402ed4:	e00a      	b.n	402eec <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  402ed6:	4b08      	ldr	r3, [pc, #32]	; (402ef8 <osc_get_rate+0x68>)
  402ed8:	e008      	b.n	402eec <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  402eda:	4b08      	ldr	r3, [pc, #32]	; (402efc <osc_get_rate+0x6c>)
  402edc:	e006      	b.n	402eec <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  402ede:	4b08      	ldr	r3, [pc, #32]	; (402f00 <osc_get_rate+0x70>)
  402ee0:	e004      	b.n	402eec <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  402ee2:	4b07      	ldr	r3, [pc, #28]	; (402f00 <osc_get_rate+0x70>)
  402ee4:	e002      	b.n	402eec <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  402ee6:	4b06      	ldr	r3, [pc, #24]	; (402f00 <osc_get_rate+0x70>)
  402ee8:	e000      	b.n	402eec <osc_get_rate+0x5c>
	}

	return 0;
  402eea:	2300      	movs	r3, #0
}
  402eec:	4618      	mov	r0, r3
  402eee:	370c      	adds	r7, #12
  402ef0:	46bd      	mov	sp, r7
  402ef2:	bc80      	pop	{r7}
  402ef4:	4770      	bx	lr
  402ef6:	bf00      	nop
  402ef8:	003d0900 	.word	0x003d0900
  402efc:	007a1200 	.word	0x007a1200
  402f00:	00b71b00 	.word	0x00b71b00

00402f04 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  402f04:	b580      	push	{r7, lr}
  402f06:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_PLL1_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLBCK) {
		return pll_get_default_rate(1);
  402f08:	2006      	movs	r0, #6
  402f0a:	4b04      	ldr	r3, [pc, #16]	; (402f1c <sysclk_get_main_hz+0x18>)
  402f0c:	4798      	blx	r3
  402f0e:	4602      	mov	r2, r0
  402f10:	4613      	mov	r3, r2
  402f12:	009b      	lsls	r3, r3, #2
  402f14:	4413      	add	r3, r2
  402f16:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  402f18:	4618      	mov	r0, r3
  402f1a:	bd80      	pop	{r7, pc}
  402f1c:	00402e91 	.word	0x00402e91

00402f20 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  402f20:	b580      	push	{r7, lr}
  402f22:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402f24:	4b02      	ldr	r3, [pc, #8]	; (402f30 <sysclk_get_cpu_hz+0x10>)
  402f26:	4798      	blx	r3
  402f28:	4603      	mov	r3, r0
  402f2a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  402f2c:	4618      	mov	r0, r3
  402f2e:	bd80      	pop	{r7, pc}
  402f30:	00402f05 	.word	0x00402f05

00402f34 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  402f34:	b580      	push	{r7, lr}
  402f36:	b082      	sub	sp, #8
  402f38:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read TC0 status. */
	ul_status = tc_get_status(TC0, 0);
  402f3a:	2100      	movs	r1, #0
  402f3c:	4809      	ldr	r0, [pc, #36]	; (402f64 <TC0_Handler+0x30>)
  402f3e:	4b0a      	ldr	r3, [pc, #40]	; (402f68 <TC0_Handler+0x34>)
  402f40:	4798      	blx	r3
  402f42:	6078      	str	r0, [r7, #4]

	/* RC compare. */
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  402f44:	687b      	ldr	r3, [r7, #4]
  402f46:	f003 0310 	and.w	r3, r3, #16
  402f4a:	2b00      	cmp	r3, #0
  402f4c:	d006      	beq.n	402f5c <TC0_Handler+0x28>
		counts++;
  402f4e:	4b07      	ldr	r3, [pc, #28]	; (402f6c <TC0_Handler+0x38>)
  402f50:	781b      	ldrb	r3, [r3, #0]
  402f52:	b2db      	uxtb	r3, r3
  402f54:	3301      	adds	r3, #1
  402f56:	b2da      	uxtb	r2, r3
  402f58:	4b04      	ldr	r3, [pc, #16]	; (402f6c <TC0_Handler+0x38>)
  402f5a:	701a      	strb	r2, [r3, #0]
	}
}
  402f5c:	bf00      	nop
  402f5e:	3708      	adds	r7, #8
  402f60:	46bd      	mov	sp, r7
  402f62:	bd80      	pop	{r7, pc}
  402f64:	40010000 	.word	0x40010000
  402f68:	004001cd 	.word	0x004001cd
  402f6c:	2001b728 	.word	0x2001b728

00402f70 <configure_tc>:

void configure_tc(void)
{
  402f70:	b590      	push	{r4, r7, lr}
  402f72:	b087      	sub	sp, #28
  402f74:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	/* Get system clock. */
	ul_sysclk = sysclk_get_cpu_hz();
  402f76:	4b16      	ldr	r3, [pc, #88]	; (402fd0 <configure_tc+0x60>)
  402f78:	4798      	blx	r3
  402f7a:	60f8      	str	r0, [r7, #12]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  402f7c:	2017      	movs	r0, #23
  402f7e:	4b15      	ldr	r3, [pc, #84]	; (402fd4 <configure_tc+0x64>)
  402f80:	4798      	blx	r3

	/** Configure TC for a 1Hz frequency and trigger on RC compare. */
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  402f82:	1d39      	adds	r1, r7, #4
  402f84:	f107 0208 	add.w	r2, r7, #8
  402f88:	68fb      	ldr	r3, [r7, #12]
  402f8a:	9300      	str	r3, [sp, #0]
  402f8c:	460b      	mov	r3, r1
  402f8e:	68f9      	ldr	r1, [r7, #12]
  402f90:	2001      	movs	r0, #1
  402f92:	4c11      	ldr	r4, [pc, #68]	; (402fd8 <configure_tc+0x68>)
  402f94:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  402f96:	687b      	ldr	r3, [r7, #4]
  402f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  402f9c:	461a      	mov	r2, r3
  402f9e:	2100      	movs	r1, #0
  402fa0:	480e      	ldr	r0, [pc, #56]	; (402fdc <configure_tc+0x6c>)
  402fa2:	4b0f      	ldr	r3, [pc, #60]	; (402fe0 <configure_tc+0x70>)
  402fa4:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  402fa6:	68bb      	ldr	r3, [r7, #8]
  402fa8:	68fa      	ldr	r2, [r7, #12]
  402faa:	fbb2 f3f3 	udiv	r3, r2, r3
  402fae:	461a      	mov	r2, r3
  402fb0:	2100      	movs	r1, #0
  402fb2:	480a      	ldr	r0, [pc, #40]	; (402fdc <configure_tc+0x6c>)
  402fb4:	4b0b      	ldr	r3, [pc, #44]	; (402fe4 <configure_tc+0x74>)
  402fb6:	4798      	blx	r3

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  402fb8:	2017      	movs	r0, #23
  402fba:	4b0b      	ldr	r3, [pc, #44]	; (402fe8 <configure_tc+0x78>)
  402fbc:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  402fbe:	2210      	movs	r2, #16
  402fc0:	2100      	movs	r1, #0
  402fc2:	4806      	ldr	r0, [pc, #24]	; (402fdc <configure_tc+0x6c>)
  402fc4:	4b09      	ldr	r3, [pc, #36]	; (402fec <configure_tc+0x7c>)
  402fc6:	4798      	blx	r3
  402fc8:	bf00      	nop
  402fca:	3714      	adds	r7, #20
  402fcc:	46bd      	mov	sp, r7
  402fce:	bd90      	pop	{r4, r7, pc}
  402fd0:	00402f21 	.word	0x00402f21
  402fd4:	00401695 	.word	0x00401695
  402fd8:	004001f1 	.word	0x004001f1
  402fdc:	40010000 	.word	0x40010000
  402fe0:	00400129 	.word	0x00400129
  402fe4:	00400181 	.word	0x00400181
  402fe8:	00402e61 	.word	0x00402e61
  402fec:	004001a5 	.word	0x004001a5

00402ff0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402ff0:	b580      	push	{r7, lr}
  402ff2:	b082      	sub	sp, #8
  402ff4:	af00      	add	r7, sp, #0
  402ff6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402ff8:	6878      	ldr	r0, [r7, #4]
  402ffa:	4b03      	ldr	r3, [pc, #12]	; (403008 <sysclk_enable_peripheral_clock+0x18>)
  402ffc:	4798      	blx	r3
}
  402ffe:	bf00      	nop
  403000:	3708      	adds	r7, #8
  403002:	46bd      	mov	sp, r7
  403004:	bd80      	pop	{r7, pc}
  403006:	bf00      	nop
  403008:	00401695 	.word	0x00401695

0040300c <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  40300c:	b580      	push	{r7, lr}
  40300e:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  403010:	200b      	movs	r0, #11
  403012:	4b03      	ldr	r3, [pc, #12]	; (403020 <ioport_init+0x14>)
  403014:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  403016:	200c      	movs	r0, #12
  403018:	4b01      	ldr	r3, [pc, #4]	; (403020 <ioport_init+0x14>)
  40301a:	4798      	blx	r3
	arch_ioport_init();
}
  40301c:	bf00      	nop
  40301e:	bd80      	pop	{r7, pc}
  403020:	00402ff1 	.word	0x00402ff1

00403024 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  403024:	b480      	push	{r7}
  403026:	b08d      	sub	sp, #52	; 0x34
  403028:	af00      	add	r7, sp, #0
  40302a:	6078      	str	r0, [r7, #4]
  40302c:	460b      	mov	r3, r1
  40302e:	70fb      	strb	r3, [r7, #3]
  403030:	687b      	ldr	r3, [r7, #4]
  403032:	62fb      	str	r3, [r7, #44]	; 0x2c
  403034:	78fb      	ldrb	r3, [r7, #3]
  403036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40303c:	627b      	str	r3, [r7, #36]	; 0x24
  40303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403040:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  403042:	6a3b      	ldr	r3, [r7, #32]
  403044:	095b      	lsrs	r3, r3, #5
  403046:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403048:	69fb      	ldr	r3, [r7, #28]
  40304a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40304e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403052:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  403054:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  403056:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40305a:	2b01      	cmp	r3, #1
  40305c:	d109      	bne.n	403072 <ioport_set_pin_dir+0x4e>
  40305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403060:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403062:	697b      	ldr	r3, [r7, #20]
  403064:	f003 031f 	and.w	r3, r3, #31
  403068:	2201      	movs	r2, #1
  40306a:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40306c:	69bb      	ldr	r3, [r7, #24]
  40306e:	611a      	str	r2, [r3, #16]
  403070:	e00c      	b.n	40308c <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  403072:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  403076:	2b00      	cmp	r3, #0
  403078:	d108      	bne.n	40308c <ioport_set_pin_dir+0x68>
  40307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40307c:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40307e:	693b      	ldr	r3, [r7, #16]
  403080:	f003 031f 	and.w	r3, r3, #31
  403084:	2201      	movs	r2, #1
  403086:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403088:	69bb      	ldr	r3, [r7, #24]
  40308a:	615a      	str	r2, [r3, #20]
  40308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40308e:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403090:	68fb      	ldr	r3, [r7, #12]
  403092:	f003 031f 	and.w	r3, r3, #31
  403096:	2201      	movs	r2, #1
  403098:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40309a:	69bb      	ldr	r3, [r7, #24]
  40309c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4030a0:	bf00      	nop
  4030a2:	3734      	adds	r7, #52	; 0x34
  4030a4:	46bd      	mov	sp, r7
  4030a6:	bc80      	pop	{r7}
  4030a8:	4770      	bx	lr
  4030aa:	bf00      	nop

004030ac <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  4030ac:	b580      	push	{r7, lr}
  4030ae:	af00      	add	r7, sp, #0
	ioport_init();
  4030b0:	4b34      	ldr	r3, [pc, #208]	; (403184 <board_init+0xd8>)
  4030b2:	4798      	blx	r3
	
	//ioport_set_pin_dir(TWI0_DATA_GPIO, IOPORT_DIR_OUTPUT);
	//ioport_set_pin_dir(TWI0_CLK_GPIO, IOPORT_DIR_OUTPUT);
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4030b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4030b8:	2003      	movs	r0, #3
  4030ba:	4b33      	ldr	r3, [pc, #204]	; (403188 <board_init+0xdc>)
  4030bc:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4030be:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4030c2:	2004      	movs	r0, #4
  4030c4:	4b30      	ldr	r3, [pc, #192]	; (403188 <board_init+0xdc>)
  4030c6:	4798      	blx	r3

	gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
  4030c8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4030cc:	2011      	movs	r0, #17
  4030ce:	4b2e      	ldr	r3, [pc, #184]	; (403188 <board_init+0xdc>)
  4030d0:	4798      	blx	r3

	
	/* Configure Image sensor pins */
	//gpio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
	//gpio_configure_pin(OV_FSIN_GPIO, OV_FSIN_FLAGS);
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  4030d2:	2171      	movs	r1, #113	; 0x71
  4030d4:	2010      	movs	r0, #16
  4030d6:	4b2c      	ldr	r3, [pc, #176]	; (403188 <board_init+0xdc>)
  4030d8:	4798      	blx	r3
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  4030da:	2171      	movs	r1, #113	; 0x71
  4030dc:	200f      	movs	r0, #15
  4030de:	4b2a      	ldr	r3, [pc, #168]	; (403188 <board_init+0xdc>)
  4030e0:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D0, OV_DATA_BUS_FLAGS);
  4030e2:	492a      	ldr	r1, [pc, #168]	; (40318c <board_init+0xe0>)
  4030e4:	2018      	movs	r0, #24
  4030e6:	4b28      	ldr	r3, [pc, #160]	; (403188 <board_init+0xdc>)
  4030e8:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D1, OV_DATA_BUS_FLAGS);
  4030ea:	4928      	ldr	r1, [pc, #160]	; (40318c <board_init+0xe0>)
  4030ec:	2019      	movs	r0, #25
  4030ee:	4b26      	ldr	r3, [pc, #152]	; (403188 <board_init+0xdc>)
  4030f0:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  4030f2:	4926      	ldr	r1, [pc, #152]	; (40318c <board_init+0xe0>)
  4030f4:	201a      	movs	r0, #26
  4030f6:	4b24      	ldr	r3, [pc, #144]	; (403188 <board_init+0xdc>)
  4030f8:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  4030fa:	4924      	ldr	r1, [pc, #144]	; (40318c <board_init+0xe0>)
  4030fc:	201b      	movs	r0, #27
  4030fe:	4b22      	ldr	r3, [pc, #136]	; (403188 <board_init+0xdc>)
  403100:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  403102:	4922      	ldr	r1, [pc, #136]	; (40318c <board_init+0xe0>)
  403104:	201c      	movs	r0, #28
  403106:	4b20      	ldr	r3, [pc, #128]	; (403188 <board_init+0xdc>)
  403108:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  40310a:	4920      	ldr	r1, [pc, #128]	; (40318c <board_init+0xe0>)
  40310c:	201d      	movs	r0, #29
  40310e:	4b1e      	ldr	r3, [pc, #120]	; (403188 <board_init+0xdc>)
  403110:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  403112:	491e      	ldr	r1, [pc, #120]	; (40318c <board_init+0xe0>)
  403114:	201e      	movs	r0, #30
  403116:	4b1c      	ldr	r3, [pc, #112]	; (403188 <board_init+0xdc>)
  403118:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  40311a:	491c      	ldr	r1, [pc, #112]	; (40318c <board_init+0xe0>)
  40311c:	201f      	movs	r0, #31
  40311e:	4b1a      	ldr	r3, [pc, #104]	; (403188 <board_init+0xdc>)
  403120:	4798      	blx	r3

	ioport_set_pin_dir(GPIO_WIFI_COMM_PIN, IOPORT_DIR_INPUT);
  403122:	2100      	movs	r1, #0
  403124:	202a      	movs	r0, #42	; 0x2a
  403126:	4b1a      	ldr	r3, [pc, #104]	; (403190 <board_init+0xe4>)
  403128:	4798      	blx	r3
	ioport_set_pin_dir(GPIO_WIFI_WEB_SETUP, IOPORT_DIR_INPUT);
  40312a:	2100      	movs	r1, #0
  40312c:	2016      	movs	r0, #22
  40312e:	4b18      	ldr	r3, [pc, #96]	; (403190 <board_init+0xe4>)
  403130:	4798      	blx	r3
	ioport_set_pin_dir(NETWORK, IOPORT_DIR_INPUT);
  403132:	2100      	movs	r1, #0
  403134:	202b      	movs	r0, #43	; 0x2b
  403136:	4b16      	ldr	r3, [pc, #88]	; (403190 <board_init+0xe4>)
  403138:	4798      	blx	r3
	ioport_set_pin_dir(WIFI_RESET, IOPORT_DIR_OUTPUT);
  40313a:	2101      	movs	r1, #1
  40313c:	2020      	movs	r0, #32
  40313e:	4b14      	ldr	r3, [pc, #80]	; (403190 <board_init+0xe4>)
  403140:	4798      	blx	r3
	ioport_set_pin_dir(OV_RESET, IOPORT_DIR_OUTPUT);
  403142:	2101      	movs	r1, #1
  403144:	2014      	movs	r0, #20
  403146:	4b12      	ldr	r3, [pc, #72]	; (403190 <board_init+0xe4>)
  403148:	4798      	blx	r3

	gpio_configure_pin(GPIO_WIFI_WEB_SETUP , GPIO_WIFI_WEB_SETUP_FLAGS);
  40314a:	4912      	ldr	r1, [pc, #72]	; (403194 <board_init+0xe8>)
  40314c:	2016      	movs	r0, #22
  40314e:	4b0e      	ldr	r3, [pc, #56]	; (403188 <board_init+0xdc>)
  403150:	4798      	blx	r3
    gpio_configure_pin(GPIO_WIFI_COMM_PIN , GPIO_WIFI_COMM_PIN_FLAGS);
  403152:	4911      	ldr	r1, [pc, #68]	; (403198 <board_init+0xec>)
  403154:	202a      	movs	r0, #42	; 0x2a
  403156:	4b0c      	ldr	r3, [pc, #48]	; (403188 <board_init+0xdc>)
  403158:	4798      	blx	r3
	//gpio_configure_pin(WIFI_RESET , WIFI_RESET_FLAGS);
	gpio_configure_pin(NETWORK , NETWORK_FLAGS);
  40315a:	490f      	ldr	r1, [pc, #60]	; (403198 <board_init+0xec>)
  40315c:	202b      	movs	r0, #43	; 0x2b
  40315e:	4b0a      	ldr	r3, [pc, #40]	; (403188 <board_init+0xdc>)
  403160:	4798      	blx	r3
	
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  403162:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403166:	2005      	movs	r0, #5
  403168:	4b07      	ldr	r3, [pc, #28]	; (403188 <board_init+0xdc>)
  40316a:	4798      	blx	r3
	


	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  40316c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403170:	2006      	movs	r0, #6
  403172:	4b05      	ldr	r3, [pc, #20]	; (403188 <board_init+0xdc>)
  403174:	4798      	blx	r3


	/* Configure USART CTS pin */
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  403176:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40317a:	2008      	movs	r0, #8
  40317c:	4b02      	ldr	r3, [pc, #8]	; (403188 <board_init+0xdc>)
  40317e:	4798      	blx	r3

// 	/* Configure USART RTS pin */
// 	gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);

	
}
  403180:	bf00      	nop
  403182:	bd80      	pop	{r7, pc}
  403184:	0040300d 	.word	0x0040300d
  403188:	00401029 	.word	0x00401029
  40318c:	28000001 	.word	0x28000001
  403190:	00403025 	.word	0x00403025
  403194:	28000079 	.word	0x28000079
  403198:	28000070 	.word	0x28000070

0040319c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40319c:	b580      	push	{r7, lr}
  40319e:	b084      	sub	sp, #16
  4031a0:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  4031a2:	4b27      	ldr	r3, [pc, #156]	; (403240 <Reset_Handler+0xa4>)
  4031a4:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  4031a6:	4b27      	ldr	r3, [pc, #156]	; (403244 <Reset_Handler+0xa8>)
  4031a8:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  4031aa:	68fa      	ldr	r2, [r7, #12]
  4031ac:	68bb      	ldr	r3, [r7, #8]
  4031ae:	429a      	cmp	r2, r3
  4031b0:	d90d      	bls.n	4031ce <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4031b2:	e007      	b.n	4031c4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  4031b4:	68bb      	ldr	r3, [r7, #8]
  4031b6:	1d1a      	adds	r2, r3, #4
  4031b8:	60ba      	str	r2, [r7, #8]
  4031ba:	68fa      	ldr	r2, [r7, #12]
  4031bc:	1d11      	adds	r1, r2, #4
  4031be:	60f9      	str	r1, [r7, #12]
  4031c0:	6812      	ldr	r2, [r2, #0]
  4031c2:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4031c4:	68bb      	ldr	r3, [r7, #8]
  4031c6:	4a20      	ldr	r2, [pc, #128]	; (403248 <Reset_Handler+0xac>)
  4031c8:	4293      	cmp	r3, r2
  4031ca:	d3f3      	bcc.n	4031b4 <Reset_Handler+0x18>
  4031cc:	e020      	b.n	403210 <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4031ce:	68fa      	ldr	r2, [r7, #12]
  4031d0:	68bb      	ldr	r3, [r7, #8]
  4031d2:	429a      	cmp	r2, r3
  4031d4:	d21c      	bcs.n	403210 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4031d6:	4a1c      	ldr	r2, [pc, #112]	; (403248 <Reset_Handler+0xac>)
  4031d8:	4b1a      	ldr	r3, [pc, #104]	; (403244 <Reset_Handler+0xa8>)
  4031da:	1ad3      	subs	r3, r2, r3
  4031dc:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4031de:	68fa      	ldr	r2, [r7, #12]
  4031e0:	687b      	ldr	r3, [r7, #4]
  4031e2:	4413      	add	r3, r2
  4031e4:	3b04      	subs	r3, #4
  4031e6:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  4031e8:	68ba      	ldr	r2, [r7, #8]
  4031ea:	687b      	ldr	r3, [r7, #4]
  4031ec:	4413      	add	r3, r2
  4031ee:	3b04      	subs	r3, #4
  4031f0:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  4031f2:	e00a      	b.n	40320a <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  4031f4:	68bb      	ldr	r3, [r7, #8]
  4031f6:	1f1a      	subs	r2, r3, #4
  4031f8:	60ba      	str	r2, [r7, #8]
  4031fa:	68fa      	ldr	r2, [r7, #12]
  4031fc:	1f11      	subs	r1, r2, #4
  4031fe:	60f9      	str	r1, [r7, #12]
  403200:	6812      	ldr	r2, [r2, #0]
  403202:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  403204:	687b      	ldr	r3, [r7, #4]
  403206:	3b04      	subs	r3, #4
  403208:	607b      	str	r3, [r7, #4]
  40320a:	687b      	ldr	r3, [r7, #4]
  40320c:	2b00      	cmp	r3, #0
  40320e:	d1f1      	bne.n	4031f4 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  403210:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  403212:	4b0e      	ldr	r3, [pc, #56]	; (40324c <Reset_Handler+0xb0>)
  403214:	60bb      	str	r3, [r7, #8]
  403216:	e004      	b.n	403222 <Reset_Handler+0x86>
		*pDest++ = 0;
  403218:	68bb      	ldr	r3, [r7, #8]
  40321a:	1d1a      	adds	r2, r3, #4
  40321c:	60ba      	str	r2, [r7, #8]
  40321e:	2200      	movs	r2, #0
  403220:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  403222:	68bb      	ldr	r3, [r7, #8]
  403224:	4a0a      	ldr	r2, [pc, #40]	; (403250 <Reset_Handler+0xb4>)
  403226:	4293      	cmp	r3, r2
  403228:	d3f6      	bcc.n	403218 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40322a:	4b0a      	ldr	r3, [pc, #40]	; (403254 <Reset_Handler+0xb8>)
  40322c:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  40322e:	4a0a      	ldr	r2, [pc, #40]	; (403258 <Reset_Handler+0xbc>)
  403230:	68fb      	ldr	r3, [r7, #12]
  403232:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  403234:	4b09      	ldr	r3, [pc, #36]	; (40325c <Reset_Handler+0xc0>)
  403236:	4798      	blx	r3

	/* Branch to main function */
	main();
  403238:	4b09      	ldr	r3, [pc, #36]	; (403260 <Reset_Handler+0xc4>)
  40323a:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  40323c:	e7fe      	b.n	40323c <Reset_Handler+0xa0>
  40323e:	bf00      	nop
  403240:	00409548 	.word	0x00409548
  403244:	20000000 	.word	0x20000000
  403248:	20000884 	.word	0x20000884
  40324c:	20000884 	.word	0x20000884
  403250:	2001b734 	.word	0x2001b734
  403254:	00400000 	.word	0x00400000
  403258:	e000ed00 	.word	0xe000ed00
  40325c:	0040380d 	.word	0x0040380d
  403260:	004026dd 	.word	0x004026dd

00403264 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403264:	b480      	push	{r7}
  403266:	af00      	add	r7, sp, #0
	while (1) {
	}
  403268:	e7fe      	b.n	403268 <Dummy_Handler+0x4>
  40326a:	bf00      	nop

0040326c <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  40326c:	b480      	push	{r7}
  40326e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  403270:	4b5d      	ldr	r3, [pc, #372]	; (4033e8 <SystemCoreClockUpdate+0x17c>)
  403272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403274:	f003 0303 	and.w	r3, r3, #3
  403278:	2b03      	cmp	r3, #3
  40327a:	f200 8096 	bhi.w	4033aa <SystemCoreClockUpdate+0x13e>
  40327e:	a201      	add	r2, pc, #4	; (adr r2, 403284 <SystemCoreClockUpdate+0x18>)
  403280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403284:	00403295 	.word	0x00403295
  403288:	004032b5 	.word	0x004032b5
  40328c:	004032ff 	.word	0x004032ff
  403290:	004032ff 	.word	0x004032ff
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  403294:	4b55      	ldr	r3, [pc, #340]	; (4033ec <SystemCoreClockUpdate+0x180>)
  403296:	695b      	ldr	r3, [r3, #20]
  403298:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40329c:	2b00      	cmp	r3, #0
  40329e:	d004      	beq.n	4032aa <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4032a0:	4b53      	ldr	r3, [pc, #332]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  4032a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4032a6:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  4032a8:	e080      	b.n	4033ac <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4032aa:	4b51      	ldr	r3, [pc, #324]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  4032ac:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4032b0:	601a      	str	r2, [r3, #0]
			}
		break;
  4032b2:	e07b      	b.n	4033ac <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4032b4:	4b4c      	ldr	r3, [pc, #304]	; (4033e8 <SystemCoreClockUpdate+0x17c>)
  4032b6:	6a1b      	ldr	r3, [r3, #32]
  4032b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4032bc:	2b00      	cmp	r3, #0
  4032be:	d003      	beq.n	4032c8 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4032c0:	4b4b      	ldr	r3, [pc, #300]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  4032c2:	4a4c      	ldr	r2, [pc, #304]	; (4033f4 <SystemCoreClockUpdate+0x188>)
  4032c4:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  4032c6:	e071      	b.n	4033ac <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4032c8:	4b49      	ldr	r3, [pc, #292]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  4032ca:	4a4b      	ldr	r2, [pc, #300]	; (4033f8 <SystemCoreClockUpdate+0x18c>)
  4032cc:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4032ce:	4b46      	ldr	r3, [pc, #280]	; (4033e8 <SystemCoreClockUpdate+0x17c>)
  4032d0:	6a1b      	ldr	r3, [r3, #32]
  4032d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4032d6:	2b10      	cmp	r3, #16
  4032d8:	d008      	beq.n	4032ec <SystemCoreClockUpdate+0x80>
  4032da:	2b20      	cmp	r3, #32
  4032dc:	d00a      	beq.n	4032f4 <SystemCoreClockUpdate+0x88>
  4032de:	2b00      	cmp	r3, #0
  4032e0:	d000      	beq.n	4032e4 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  4032e2:	e00b      	b.n	4032fc <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4032e4:	4b42      	ldr	r3, [pc, #264]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  4032e6:	4a44      	ldr	r2, [pc, #272]	; (4033f8 <SystemCoreClockUpdate+0x18c>)
  4032e8:	601a      	str	r2, [r3, #0]
			break;
  4032ea:	e007      	b.n	4032fc <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4032ec:	4b40      	ldr	r3, [pc, #256]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  4032ee:	4a43      	ldr	r2, [pc, #268]	; (4033fc <SystemCoreClockUpdate+0x190>)
  4032f0:	601a      	str	r2, [r3, #0]
			break;
  4032f2:	e003      	b.n	4032fc <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4032f4:	4b3e      	ldr	r3, [pc, #248]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  4032f6:	4a3f      	ldr	r2, [pc, #252]	; (4033f4 <SystemCoreClockUpdate+0x188>)
  4032f8:	601a      	str	r2, [r3, #0]
			break;
  4032fa:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  4032fc:	e056      	b.n	4033ac <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4032fe:	4b3a      	ldr	r3, [pc, #232]	; (4033e8 <SystemCoreClockUpdate+0x17c>)
  403300:	6a1b      	ldr	r3, [r3, #32]
  403302:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  403306:	2b00      	cmp	r3, #0
  403308:	d003      	beq.n	403312 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40330a:	4b39      	ldr	r3, [pc, #228]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  40330c:	4a39      	ldr	r2, [pc, #228]	; (4033f4 <SystemCoreClockUpdate+0x188>)
  40330e:	601a      	str	r2, [r3, #0]
  403310:	e019      	b.n	403346 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403312:	4b37      	ldr	r3, [pc, #220]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  403314:	4a38      	ldr	r2, [pc, #224]	; (4033f8 <SystemCoreClockUpdate+0x18c>)
  403316:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  403318:	4b33      	ldr	r3, [pc, #204]	; (4033e8 <SystemCoreClockUpdate+0x17c>)
  40331a:	6a1b      	ldr	r3, [r3, #32]
  40331c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403320:	2b10      	cmp	r3, #16
  403322:	d008      	beq.n	403336 <SystemCoreClockUpdate+0xca>
  403324:	2b20      	cmp	r3, #32
  403326:	d00a      	beq.n	40333e <SystemCoreClockUpdate+0xd2>
  403328:	2b00      	cmp	r3, #0
  40332a:	d000      	beq.n	40332e <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  40332c:	e00b      	b.n	403346 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40332e:	4b30      	ldr	r3, [pc, #192]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  403330:	4a31      	ldr	r2, [pc, #196]	; (4033f8 <SystemCoreClockUpdate+0x18c>)
  403332:	601a      	str	r2, [r3, #0]
					break;
  403334:	e007      	b.n	403346 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  403336:	4b2e      	ldr	r3, [pc, #184]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  403338:	4a30      	ldr	r2, [pc, #192]	; (4033fc <SystemCoreClockUpdate+0x190>)
  40333a:	601a      	str	r2, [r3, #0]
					break;
  40333c:	e003      	b.n	403346 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40333e:	4b2c      	ldr	r3, [pc, #176]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  403340:	4a2c      	ldr	r2, [pc, #176]	; (4033f4 <SystemCoreClockUpdate+0x188>)
  403342:	601a      	str	r2, [r3, #0]
					break;
  403344:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  403346:	4b28      	ldr	r3, [pc, #160]	; (4033e8 <SystemCoreClockUpdate+0x17c>)
  403348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40334a:	f003 0303 	and.w	r3, r3, #3
  40334e:	2b02      	cmp	r3, #2
  403350:	d115      	bne.n	40337e <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  403352:	4b25      	ldr	r3, [pc, #148]	; (4033e8 <SystemCoreClockUpdate+0x17c>)
  403354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  403356:	4b2a      	ldr	r3, [pc, #168]	; (403400 <SystemCoreClockUpdate+0x194>)
  403358:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40335a:	0c1b      	lsrs	r3, r3, #16
  40335c:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40335e:	4a24      	ldr	r2, [pc, #144]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  403360:	6812      	ldr	r2, [r2, #0]
  403362:	fb02 f303 	mul.w	r3, r2, r3
  403366:	4a22      	ldr	r2, [pc, #136]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  403368:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40336a:	4b1f      	ldr	r3, [pc, #124]	; (4033e8 <SystemCoreClockUpdate+0x17c>)
  40336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40336e:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  403370:	4a1f      	ldr	r2, [pc, #124]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  403372:	6812      	ldr	r2, [r2, #0]
  403374:	fbb2 f3f3 	udiv	r3, r2, r3
  403378:	4a1d      	ldr	r2, [pc, #116]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  40337a:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  40337c:	e016      	b.n	4033ac <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40337e:	4b1a      	ldr	r3, [pc, #104]	; (4033e8 <SystemCoreClockUpdate+0x17c>)
  403380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  403382:	4b1f      	ldr	r3, [pc, #124]	; (403400 <SystemCoreClockUpdate+0x194>)
  403384:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  403386:	0c1b      	lsrs	r3, r3, #16
  403388:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40338a:	4a19      	ldr	r2, [pc, #100]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  40338c:	6812      	ldr	r2, [r2, #0]
  40338e:	fb02 f303 	mul.w	r3, r2, r3
  403392:	4a17      	ldr	r2, [pc, #92]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  403394:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  403396:	4b14      	ldr	r3, [pc, #80]	; (4033e8 <SystemCoreClockUpdate+0x17c>)
  403398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  40339a:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40339c:	4a14      	ldr	r2, [pc, #80]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  40339e:	6812      	ldr	r2, [r2, #0]
  4033a0:	fbb2 f3f3 	udiv	r3, r2, r3
  4033a4:	4a12      	ldr	r2, [pc, #72]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  4033a6:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  4033a8:	e000      	b.n	4033ac <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  4033aa:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4033ac:	4b0e      	ldr	r3, [pc, #56]	; (4033e8 <SystemCoreClockUpdate+0x17c>)
  4033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4033b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4033b4:	2b70      	cmp	r3, #112	; 0x70
  4033b6:	d108      	bne.n	4033ca <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  4033b8:	4b0d      	ldr	r3, [pc, #52]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  4033ba:	681b      	ldr	r3, [r3, #0]
  4033bc:	4a11      	ldr	r2, [pc, #68]	; (403404 <SystemCoreClockUpdate+0x198>)
  4033be:	fba2 2303 	umull	r2, r3, r2, r3
  4033c2:	085b      	lsrs	r3, r3, #1
  4033c4:	4a0a      	ldr	r2, [pc, #40]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  4033c6:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4033c8:	e00a      	b.n	4033e0 <SystemCoreClockUpdate+0x174>

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4033ca:	4b07      	ldr	r3, [pc, #28]	; (4033e8 <SystemCoreClockUpdate+0x17c>)
  4033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4033ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4033d2:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4033d4:	4a06      	ldr	r2, [pc, #24]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  4033d6:	6812      	ldr	r2, [r2, #0]
  4033d8:	fa22 f303 	lsr.w	r3, r2, r3
  4033dc:	4a04      	ldr	r2, [pc, #16]	; (4033f0 <SystemCoreClockUpdate+0x184>)
  4033de:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4033e0:	bf00      	nop
  4033e2:	46bd      	mov	sp, r7
  4033e4:	bc80      	pop	{r7}
  4033e6:	4770      	bx	lr
  4033e8:	400e0400 	.word	0x400e0400
  4033ec:	400e1410 	.word	0x400e1410
  4033f0:	2000000c 	.word	0x2000000c
  4033f4:	00b71b00 	.word	0x00b71b00
  4033f8:	003d0900 	.word	0x003d0900
  4033fc:	007a1200 	.word	0x007a1200
  403400:	07ff0000 	.word	0x07ff0000
  403404:	aaaaaaab 	.word	0xaaaaaaab

00403408 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  403408:	b480      	push	{r7}
  40340a:	b083      	sub	sp, #12
  40340c:	af00      	add	r7, sp, #0
  40340e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  403410:	687b      	ldr	r3, [r7, #4]
  403412:	4a18      	ldr	r2, [pc, #96]	; (403474 <system_init_flash+0x6c>)
  403414:	4293      	cmp	r3, r2
  403416:	d804      	bhi.n	403422 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403418:	4b17      	ldr	r3, [pc, #92]	; (403478 <system_init_flash+0x70>)
  40341a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40341e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  403420:	e023      	b.n	40346a <system_init_flash+0x62>
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  403422:	687b      	ldr	r3, [r7, #4]
  403424:	4a15      	ldr	r2, [pc, #84]	; (40347c <system_init_flash+0x74>)
  403426:	4293      	cmp	r3, r2
  403428:	d803      	bhi.n	403432 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40342a:	4b13      	ldr	r3, [pc, #76]	; (403478 <system_init_flash+0x70>)
  40342c:	4a14      	ldr	r2, [pc, #80]	; (403480 <system_init_flash+0x78>)
  40342e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  403430:	e01b      	b.n	40346a <system_init_flash+0x62>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  403432:	687b      	ldr	r3, [r7, #4]
  403434:	4a13      	ldr	r2, [pc, #76]	; (403484 <system_init_flash+0x7c>)
  403436:	4293      	cmp	r3, r2
  403438:	d803      	bhi.n	403442 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40343a:	4b0f      	ldr	r3, [pc, #60]	; (403478 <system_init_flash+0x70>)
  40343c:	4a12      	ldr	r2, [pc, #72]	; (403488 <system_init_flash+0x80>)
  40343e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  403440:	e013      	b.n	40346a <system_init_flash+0x62>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  403442:	687b      	ldr	r3, [r7, #4]
  403444:	4a11      	ldr	r2, [pc, #68]	; (40348c <system_init_flash+0x84>)
  403446:	4293      	cmp	r3, r2
  403448:	d803      	bhi.n	403452 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40344a:	4b0b      	ldr	r3, [pc, #44]	; (403478 <system_init_flash+0x70>)
  40344c:	4a10      	ldr	r2, [pc, #64]	; (403490 <system_init_flash+0x88>)
  40344e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  403450:	e00b      	b.n	40346a <system_init_flash+0x62>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  403452:	687b      	ldr	r3, [r7, #4]
  403454:	4a0f      	ldr	r2, [pc, #60]	; (403494 <system_init_flash+0x8c>)
  403456:	4293      	cmp	r3, r2
  403458:	d804      	bhi.n	403464 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40345a:	4b07      	ldr	r3, [pc, #28]	; (403478 <system_init_flash+0x70>)
  40345c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  403460:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  403462:	e002      	b.n	40346a <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403464:	4b04      	ldr	r3, [pc, #16]	; (403478 <system_init_flash+0x70>)
  403466:	4a0c      	ldr	r2, [pc, #48]	; (403498 <system_init_flash+0x90>)
  403468:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40346a:	bf00      	nop
  40346c:	370c      	adds	r7, #12
  40346e:	46bd      	mov	sp, r7
  403470:	bc80      	pop	{r7}
  403472:	4770      	bx	lr
  403474:	01312cff 	.word	0x01312cff
  403478:	400e0a00 	.word	0x400e0a00
  40347c:	026259ff 	.word	0x026259ff
  403480:	04000100 	.word	0x04000100
  403484:	039386ff 	.word	0x039386ff
  403488:	04000200 	.word	0x04000200
  40348c:	04c4b3ff 	.word	0x04c4b3ff
  403490:	04000300 	.word	0x04000300
  403494:	05f5e0ff 	.word	0x05f5e0ff
  403498:	04000500 	.word	0x04000500

0040349c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  40349c:	b480      	push	{r7}
  40349e:	b085      	sub	sp, #20
  4034a0:	af00      	add	r7, sp, #0
  4034a2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4034a4:	4b10      	ldr	r3, [pc, #64]	; (4034e8 <_sbrk+0x4c>)
  4034a6:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4034a8:	4b10      	ldr	r3, [pc, #64]	; (4034ec <_sbrk+0x50>)
  4034aa:	681b      	ldr	r3, [r3, #0]
  4034ac:	2b00      	cmp	r3, #0
  4034ae:	d102      	bne.n	4034b6 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  4034b0:	4b0e      	ldr	r3, [pc, #56]	; (4034ec <_sbrk+0x50>)
  4034b2:	4a0f      	ldr	r2, [pc, #60]	; (4034f0 <_sbrk+0x54>)
  4034b4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4034b6:	4b0d      	ldr	r3, [pc, #52]	; (4034ec <_sbrk+0x50>)
  4034b8:	681b      	ldr	r3, [r3, #0]
  4034ba:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  4034bc:	68ba      	ldr	r2, [r7, #8]
  4034be:	687b      	ldr	r3, [r7, #4]
  4034c0:	441a      	add	r2, r3
  4034c2:	68fb      	ldr	r3, [r7, #12]
  4034c4:	429a      	cmp	r2, r3
  4034c6:	dd02      	ble.n	4034ce <_sbrk+0x32>
		return (caddr_t) -1;	
  4034c8:	f04f 33ff 	mov.w	r3, #4294967295
  4034cc:	e006      	b.n	4034dc <_sbrk+0x40>
	}

	heap += incr;
  4034ce:	4b07      	ldr	r3, [pc, #28]	; (4034ec <_sbrk+0x50>)
  4034d0:	681a      	ldr	r2, [r3, #0]
  4034d2:	687b      	ldr	r3, [r7, #4]
  4034d4:	4413      	add	r3, r2
  4034d6:	4a05      	ldr	r2, [pc, #20]	; (4034ec <_sbrk+0x50>)
  4034d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  4034da:	68bb      	ldr	r3, [r7, #8]
}
  4034dc:	4618      	mov	r0, r3
  4034de:	3714      	adds	r7, #20
  4034e0:	46bd      	mov	sp, r7
  4034e2:	bc80      	pop	{r7}
  4034e4:	4770      	bx	lr
  4034e6:	bf00      	nop
  4034e8:	2001fffc 	.word	0x2001fffc
  4034ec:	20000938 	.word	0x20000938
  4034f0:	2001e738 	.word	0x2001e738

004034f4 <__aeabi_uldivmod>:
  4034f4:	b953      	cbnz	r3, 40350c <__aeabi_uldivmod+0x18>
  4034f6:	b94a      	cbnz	r2, 40350c <__aeabi_uldivmod+0x18>
  4034f8:	2900      	cmp	r1, #0
  4034fa:	bf08      	it	eq
  4034fc:	2800      	cmpeq	r0, #0
  4034fe:	bf1c      	itt	ne
  403500:	f04f 31ff 	movne.w	r1, #4294967295
  403504:	f04f 30ff 	movne.w	r0, #4294967295
  403508:	f000 b97e 	b.w	403808 <__aeabi_idiv0>
  40350c:	f1ad 0c08 	sub.w	ip, sp, #8
  403510:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403514:	f000 f806 	bl	403524 <__udivmoddi4>
  403518:	f8dd e004 	ldr.w	lr, [sp, #4]
  40351c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403520:	b004      	add	sp, #16
  403522:	4770      	bx	lr

00403524 <__udivmoddi4>:
  403524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403528:	468c      	mov	ip, r1
  40352a:	460e      	mov	r6, r1
  40352c:	4604      	mov	r4, r0
  40352e:	9d08      	ldr	r5, [sp, #32]
  403530:	2b00      	cmp	r3, #0
  403532:	d150      	bne.n	4035d6 <__udivmoddi4+0xb2>
  403534:	428a      	cmp	r2, r1
  403536:	4617      	mov	r7, r2
  403538:	d96c      	bls.n	403614 <__udivmoddi4+0xf0>
  40353a:	fab2 fe82 	clz	lr, r2
  40353e:	f1be 0f00 	cmp.w	lr, #0
  403542:	d00b      	beq.n	40355c <__udivmoddi4+0x38>
  403544:	f1ce 0420 	rsb	r4, lr, #32
  403548:	fa20 f404 	lsr.w	r4, r0, r4
  40354c:	fa01 f60e 	lsl.w	r6, r1, lr
  403550:	ea44 0c06 	orr.w	ip, r4, r6
  403554:	fa02 f70e 	lsl.w	r7, r2, lr
  403558:	fa00 f40e 	lsl.w	r4, r0, lr
  40355c:	ea4f 4917 	mov.w	r9, r7, lsr #16
  403560:	0c22      	lsrs	r2, r4, #16
  403562:	fbbc f0f9 	udiv	r0, ip, r9
  403566:	fa1f f887 	uxth.w	r8, r7
  40356a:	fb09 c610 	mls	r6, r9, r0, ip
  40356e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  403572:	fb00 f308 	mul.w	r3, r0, r8
  403576:	42b3      	cmp	r3, r6
  403578:	d909      	bls.n	40358e <__udivmoddi4+0x6a>
  40357a:	19f6      	adds	r6, r6, r7
  40357c:	f100 32ff 	add.w	r2, r0, #4294967295
  403580:	f080 8122 	bcs.w	4037c8 <__udivmoddi4+0x2a4>
  403584:	42b3      	cmp	r3, r6
  403586:	f240 811f 	bls.w	4037c8 <__udivmoddi4+0x2a4>
  40358a:	3802      	subs	r0, #2
  40358c:	443e      	add	r6, r7
  40358e:	1af6      	subs	r6, r6, r3
  403590:	b2a2      	uxth	r2, r4
  403592:	fbb6 f3f9 	udiv	r3, r6, r9
  403596:	fb09 6613 	mls	r6, r9, r3, r6
  40359a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40359e:	fb03 f808 	mul.w	r8, r3, r8
  4035a2:	45a0      	cmp	r8, r4
  4035a4:	d909      	bls.n	4035ba <__udivmoddi4+0x96>
  4035a6:	19e4      	adds	r4, r4, r7
  4035a8:	f103 32ff 	add.w	r2, r3, #4294967295
  4035ac:	f080 810a 	bcs.w	4037c4 <__udivmoddi4+0x2a0>
  4035b0:	45a0      	cmp	r8, r4
  4035b2:	f240 8107 	bls.w	4037c4 <__udivmoddi4+0x2a0>
  4035b6:	3b02      	subs	r3, #2
  4035b8:	443c      	add	r4, r7
  4035ba:	ebc8 0404 	rsb	r4, r8, r4
  4035be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4035c2:	2100      	movs	r1, #0
  4035c4:	2d00      	cmp	r5, #0
  4035c6:	d062      	beq.n	40368e <__udivmoddi4+0x16a>
  4035c8:	fa24 f40e 	lsr.w	r4, r4, lr
  4035cc:	2300      	movs	r3, #0
  4035ce:	602c      	str	r4, [r5, #0]
  4035d0:	606b      	str	r3, [r5, #4]
  4035d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4035d6:	428b      	cmp	r3, r1
  4035d8:	d907      	bls.n	4035ea <__udivmoddi4+0xc6>
  4035da:	2d00      	cmp	r5, #0
  4035dc:	d055      	beq.n	40368a <__udivmoddi4+0x166>
  4035de:	2100      	movs	r1, #0
  4035e0:	e885 0041 	stmia.w	r5, {r0, r6}
  4035e4:	4608      	mov	r0, r1
  4035e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4035ea:	fab3 f183 	clz	r1, r3
  4035ee:	2900      	cmp	r1, #0
  4035f0:	f040 8090 	bne.w	403714 <__udivmoddi4+0x1f0>
  4035f4:	42b3      	cmp	r3, r6
  4035f6:	d302      	bcc.n	4035fe <__udivmoddi4+0xda>
  4035f8:	4282      	cmp	r2, r0
  4035fa:	f200 80f8 	bhi.w	4037ee <__udivmoddi4+0x2ca>
  4035fe:	1a84      	subs	r4, r0, r2
  403600:	eb66 0603 	sbc.w	r6, r6, r3
  403604:	2001      	movs	r0, #1
  403606:	46b4      	mov	ip, r6
  403608:	2d00      	cmp	r5, #0
  40360a:	d040      	beq.n	40368e <__udivmoddi4+0x16a>
  40360c:	e885 1010 	stmia.w	r5, {r4, ip}
  403610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403614:	b912      	cbnz	r2, 40361c <__udivmoddi4+0xf8>
  403616:	2701      	movs	r7, #1
  403618:	fbb7 f7f2 	udiv	r7, r7, r2
  40361c:	fab7 fe87 	clz	lr, r7
  403620:	f1be 0f00 	cmp.w	lr, #0
  403624:	d135      	bne.n	403692 <__udivmoddi4+0x16e>
  403626:	1bf3      	subs	r3, r6, r7
  403628:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40362c:	fa1f fc87 	uxth.w	ip, r7
  403630:	2101      	movs	r1, #1
  403632:	fbb3 f0f8 	udiv	r0, r3, r8
  403636:	0c22      	lsrs	r2, r4, #16
  403638:	fb08 3610 	mls	r6, r8, r0, r3
  40363c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  403640:	fb0c f300 	mul.w	r3, ip, r0
  403644:	42b3      	cmp	r3, r6
  403646:	d907      	bls.n	403658 <__udivmoddi4+0x134>
  403648:	19f6      	adds	r6, r6, r7
  40364a:	f100 32ff 	add.w	r2, r0, #4294967295
  40364e:	d202      	bcs.n	403656 <__udivmoddi4+0x132>
  403650:	42b3      	cmp	r3, r6
  403652:	f200 80ce 	bhi.w	4037f2 <__udivmoddi4+0x2ce>
  403656:	4610      	mov	r0, r2
  403658:	1af6      	subs	r6, r6, r3
  40365a:	b2a2      	uxth	r2, r4
  40365c:	fbb6 f3f8 	udiv	r3, r6, r8
  403660:	fb08 6613 	mls	r6, r8, r3, r6
  403664:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  403668:	fb0c fc03 	mul.w	ip, ip, r3
  40366c:	45a4      	cmp	ip, r4
  40366e:	d907      	bls.n	403680 <__udivmoddi4+0x15c>
  403670:	19e4      	adds	r4, r4, r7
  403672:	f103 32ff 	add.w	r2, r3, #4294967295
  403676:	d202      	bcs.n	40367e <__udivmoddi4+0x15a>
  403678:	45a4      	cmp	ip, r4
  40367a:	f200 80b5 	bhi.w	4037e8 <__udivmoddi4+0x2c4>
  40367e:	4613      	mov	r3, r2
  403680:	ebcc 0404 	rsb	r4, ip, r4
  403684:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403688:	e79c      	b.n	4035c4 <__udivmoddi4+0xa0>
  40368a:	4629      	mov	r1, r5
  40368c:	4628      	mov	r0, r5
  40368e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403692:	f1ce 0120 	rsb	r1, lr, #32
  403696:	fa06 f30e 	lsl.w	r3, r6, lr
  40369a:	fa07 f70e 	lsl.w	r7, r7, lr
  40369e:	fa20 f901 	lsr.w	r9, r0, r1
  4036a2:	ea4f 4817 	mov.w	r8, r7, lsr #16
  4036a6:	40ce      	lsrs	r6, r1
  4036a8:	ea49 0903 	orr.w	r9, r9, r3
  4036ac:	fbb6 faf8 	udiv	sl, r6, r8
  4036b0:	ea4f 4419 	mov.w	r4, r9, lsr #16
  4036b4:	fb08 661a 	mls	r6, r8, sl, r6
  4036b8:	fa1f fc87 	uxth.w	ip, r7
  4036bc:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  4036c0:	fb0a f20c 	mul.w	r2, sl, ip
  4036c4:	429a      	cmp	r2, r3
  4036c6:	fa00 f40e 	lsl.w	r4, r0, lr
  4036ca:	d90a      	bls.n	4036e2 <__udivmoddi4+0x1be>
  4036cc:	19db      	adds	r3, r3, r7
  4036ce:	f10a 31ff 	add.w	r1, sl, #4294967295
  4036d2:	f080 8087 	bcs.w	4037e4 <__udivmoddi4+0x2c0>
  4036d6:	429a      	cmp	r2, r3
  4036d8:	f240 8084 	bls.w	4037e4 <__udivmoddi4+0x2c0>
  4036dc:	f1aa 0a02 	sub.w	sl, sl, #2
  4036e0:	443b      	add	r3, r7
  4036e2:	1a9b      	subs	r3, r3, r2
  4036e4:	fa1f f989 	uxth.w	r9, r9
  4036e8:	fbb3 f1f8 	udiv	r1, r3, r8
  4036ec:	fb08 3311 	mls	r3, r8, r1, r3
  4036f0:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  4036f4:	fb01 f60c 	mul.w	r6, r1, ip
  4036f8:	429e      	cmp	r6, r3
  4036fa:	d907      	bls.n	40370c <__udivmoddi4+0x1e8>
  4036fc:	19db      	adds	r3, r3, r7
  4036fe:	f101 32ff 	add.w	r2, r1, #4294967295
  403702:	d26b      	bcs.n	4037dc <__udivmoddi4+0x2b8>
  403704:	429e      	cmp	r6, r3
  403706:	d969      	bls.n	4037dc <__udivmoddi4+0x2b8>
  403708:	3902      	subs	r1, #2
  40370a:	443b      	add	r3, r7
  40370c:	1b9b      	subs	r3, r3, r6
  40370e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  403712:	e78e      	b.n	403632 <__udivmoddi4+0x10e>
  403714:	f1c1 0e20 	rsb	lr, r1, #32
  403718:	fa22 f40e 	lsr.w	r4, r2, lr
  40371c:	408b      	lsls	r3, r1
  40371e:	4323      	orrs	r3, r4
  403720:	fa20 f70e 	lsr.w	r7, r0, lr
  403724:	fa06 f401 	lsl.w	r4, r6, r1
  403728:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40372c:	fa26 f60e 	lsr.w	r6, r6, lr
  403730:	433c      	orrs	r4, r7
  403732:	fbb6 f9fc 	udiv	r9, r6, ip
  403736:	0c27      	lsrs	r7, r4, #16
  403738:	fb0c 6619 	mls	r6, ip, r9, r6
  40373c:	fa1f f883 	uxth.w	r8, r3
  403740:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  403744:	fb09 f708 	mul.w	r7, r9, r8
  403748:	42b7      	cmp	r7, r6
  40374a:	fa02 f201 	lsl.w	r2, r2, r1
  40374e:	fa00 fa01 	lsl.w	sl, r0, r1
  403752:	d908      	bls.n	403766 <__udivmoddi4+0x242>
  403754:	18f6      	adds	r6, r6, r3
  403756:	f109 30ff 	add.w	r0, r9, #4294967295
  40375a:	d241      	bcs.n	4037e0 <__udivmoddi4+0x2bc>
  40375c:	42b7      	cmp	r7, r6
  40375e:	d93f      	bls.n	4037e0 <__udivmoddi4+0x2bc>
  403760:	f1a9 0902 	sub.w	r9, r9, #2
  403764:	441e      	add	r6, r3
  403766:	1bf6      	subs	r6, r6, r7
  403768:	b2a0      	uxth	r0, r4
  40376a:	fbb6 f4fc 	udiv	r4, r6, ip
  40376e:	fb0c 6614 	mls	r6, ip, r4, r6
  403772:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  403776:	fb04 f808 	mul.w	r8, r4, r8
  40377a:	45b8      	cmp	r8, r7
  40377c:	d907      	bls.n	40378e <__udivmoddi4+0x26a>
  40377e:	18ff      	adds	r7, r7, r3
  403780:	f104 30ff 	add.w	r0, r4, #4294967295
  403784:	d228      	bcs.n	4037d8 <__udivmoddi4+0x2b4>
  403786:	45b8      	cmp	r8, r7
  403788:	d926      	bls.n	4037d8 <__udivmoddi4+0x2b4>
  40378a:	3c02      	subs	r4, #2
  40378c:	441f      	add	r7, r3
  40378e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  403792:	ebc8 0707 	rsb	r7, r8, r7
  403796:	fba0 8902 	umull	r8, r9, r0, r2
  40379a:	454f      	cmp	r7, r9
  40379c:	4644      	mov	r4, r8
  40379e:	464e      	mov	r6, r9
  4037a0:	d314      	bcc.n	4037cc <__udivmoddi4+0x2a8>
  4037a2:	d029      	beq.n	4037f8 <__udivmoddi4+0x2d4>
  4037a4:	b365      	cbz	r5, 403800 <__udivmoddi4+0x2dc>
  4037a6:	ebba 0304 	subs.w	r3, sl, r4
  4037aa:	eb67 0706 	sbc.w	r7, r7, r6
  4037ae:	fa07 fe0e 	lsl.w	lr, r7, lr
  4037b2:	40cb      	lsrs	r3, r1
  4037b4:	40cf      	lsrs	r7, r1
  4037b6:	ea4e 0303 	orr.w	r3, lr, r3
  4037ba:	e885 0088 	stmia.w	r5, {r3, r7}
  4037be:	2100      	movs	r1, #0
  4037c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4037c4:	4613      	mov	r3, r2
  4037c6:	e6f8      	b.n	4035ba <__udivmoddi4+0x96>
  4037c8:	4610      	mov	r0, r2
  4037ca:	e6e0      	b.n	40358e <__udivmoddi4+0x6a>
  4037cc:	ebb8 0402 	subs.w	r4, r8, r2
  4037d0:	eb69 0603 	sbc.w	r6, r9, r3
  4037d4:	3801      	subs	r0, #1
  4037d6:	e7e5      	b.n	4037a4 <__udivmoddi4+0x280>
  4037d8:	4604      	mov	r4, r0
  4037da:	e7d8      	b.n	40378e <__udivmoddi4+0x26a>
  4037dc:	4611      	mov	r1, r2
  4037de:	e795      	b.n	40370c <__udivmoddi4+0x1e8>
  4037e0:	4681      	mov	r9, r0
  4037e2:	e7c0      	b.n	403766 <__udivmoddi4+0x242>
  4037e4:	468a      	mov	sl, r1
  4037e6:	e77c      	b.n	4036e2 <__udivmoddi4+0x1be>
  4037e8:	3b02      	subs	r3, #2
  4037ea:	443c      	add	r4, r7
  4037ec:	e748      	b.n	403680 <__udivmoddi4+0x15c>
  4037ee:	4608      	mov	r0, r1
  4037f0:	e70a      	b.n	403608 <__udivmoddi4+0xe4>
  4037f2:	3802      	subs	r0, #2
  4037f4:	443e      	add	r6, r7
  4037f6:	e72f      	b.n	403658 <__udivmoddi4+0x134>
  4037f8:	45c2      	cmp	sl, r8
  4037fa:	d3e7      	bcc.n	4037cc <__udivmoddi4+0x2a8>
  4037fc:	463e      	mov	r6, r7
  4037fe:	e7d1      	b.n	4037a4 <__udivmoddi4+0x280>
  403800:	4629      	mov	r1, r5
  403802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403806:	bf00      	nop

00403808 <__aeabi_idiv0>:
  403808:	4770      	bx	lr
  40380a:	bf00      	nop

0040380c <__libc_init_array>:
  40380c:	b570      	push	{r4, r5, r6, lr}
  40380e:	4e0f      	ldr	r6, [pc, #60]	; (40384c <__libc_init_array+0x40>)
  403810:	4d0f      	ldr	r5, [pc, #60]	; (403850 <__libc_init_array+0x44>)
  403812:	1b76      	subs	r6, r6, r5
  403814:	10b6      	asrs	r6, r6, #2
  403816:	bf18      	it	ne
  403818:	2400      	movne	r4, #0
  40381a:	d005      	beq.n	403828 <__libc_init_array+0x1c>
  40381c:	3401      	adds	r4, #1
  40381e:	f855 3b04 	ldr.w	r3, [r5], #4
  403822:	4798      	blx	r3
  403824:	42a6      	cmp	r6, r4
  403826:	d1f9      	bne.n	40381c <__libc_init_array+0x10>
  403828:	4e0a      	ldr	r6, [pc, #40]	; (403854 <__libc_init_array+0x48>)
  40382a:	4d0b      	ldr	r5, [pc, #44]	; (403858 <__libc_init_array+0x4c>)
  40382c:	1b76      	subs	r6, r6, r5
  40382e:	f005 fe75 	bl	40951c <_init>
  403832:	10b6      	asrs	r6, r6, #2
  403834:	bf18      	it	ne
  403836:	2400      	movne	r4, #0
  403838:	d006      	beq.n	403848 <__libc_init_array+0x3c>
  40383a:	3401      	adds	r4, #1
  40383c:	f855 3b04 	ldr.w	r3, [r5], #4
  403840:	4798      	blx	r3
  403842:	42a6      	cmp	r6, r4
  403844:	d1f9      	bne.n	40383a <__libc_init_array+0x2e>
  403846:	bd70      	pop	{r4, r5, r6, pc}
  403848:	bd70      	pop	{r4, r5, r6, pc}
  40384a:	bf00      	nop
  40384c:	00409528 	.word	0x00409528
  403850:	00409528 	.word	0x00409528
  403854:	00409530 	.word	0x00409530
  403858:	00409528 	.word	0x00409528

0040385c <memset>:
  40385c:	b470      	push	{r4, r5, r6}
  40385e:	0784      	lsls	r4, r0, #30
  403860:	d046      	beq.n	4038f0 <memset+0x94>
  403862:	1e54      	subs	r4, r2, #1
  403864:	2a00      	cmp	r2, #0
  403866:	d041      	beq.n	4038ec <memset+0x90>
  403868:	b2cd      	uxtb	r5, r1
  40386a:	4603      	mov	r3, r0
  40386c:	e002      	b.n	403874 <memset+0x18>
  40386e:	1e62      	subs	r2, r4, #1
  403870:	b3e4      	cbz	r4, 4038ec <memset+0x90>
  403872:	4614      	mov	r4, r2
  403874:	f803 5b01 	strb.w	r5, [r3], #1
  403878:	079a      	lsls	r2, r3, #30
  40387a:	d1f8      	bne.n	40386e <memset+0x12>
  40387c:	2c03      	cmp	r4, #3
  40387e:	d92e      	bls.n	4038de <memset+0x82>
  403880:	b2cd      	uxtb	r5, r1
  403882:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403886:	2c0f      	cmp	r4, #15
  403888:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40388c:	d919      	bls.n	4038c2 <memset+0x66>
  40388e:	f103 0210 	add.w	r2, r3, #16
  403892:	4626      	mov	r6, r4
  403894:	3e10      	subs	r6, #16
  403896:	2e0f      	cmp	r6, #15
  403898:	f842 5c10 	str.w	r5, [r2, #-16]
  40389c:	f842 5c0c 	str.w	r5, [r2, #-12]
  4038a0:	f842 5c08 	str.w	r5, [r2, #-8]
  4038a4:	f842 5c04 	str.w	r5, [r2, #-4]
  4038a8:	f102 0210 	add.w	r2, r2, #16
  4038ac:	d8f2      	bhi.n	403894 <memset+0x38>
  4038ae:	f1a4 0210 	sub.w	r2, r4, #16
  4038b2:	f022 020f 	bic.w	r2, r2, #15
  4038b6:	f004 040f 	and.w	r4, r4, #15
  4038ba:	3210      	adds	r2, #16
  4038bc:	2c03      	cmp	r4, #3
  4038be:	4413      	add	r3, r2
  4038c0:	d90d      	bls.n	4038de <memset+0x82>
  4038c2:	461e      	mov	r6, r3
  4038c4:	4622      	mov	r2, r4
  4038c6:	3a04      	subs	r2, #4
  4038c8:	2a03      	cmp	r2, #3
  4038ca:	f846 5b04 	str.w	r5, [r6], #4
  4038ce:	d8fa      	bhi.n	4038c6 <memset+0x6a>
  4038d0:	1f22      	subs	r2, r4, #4
  4038d2:	f022 0203 	bic.w	r2, r2, #3
  4038d6:	3204      	adds	r2, #4
  4038d8:	4413      	add	r3, r2
  4038da:	f004 0403 	and.w	r4, r4, #3
  4038de:	b12c      	cbz	r4, 4038ec <memset+0x90>
  4038e0:	b2c9      	uxtb	r1, r1
  4038e2:	441c      	add	r4, r3
  4038e4:	f803 1b01 	strb.w	r1, [r3], #1
  4038e8:	42a3      	cmp	r3, r4
  4038ea:	d1fb      	bne.n	4038e4 <memset+0x88>
  4038ec:	bc70      	pop	{r4, r5, r6}
  4038ee:	4770      	bx	lr
  4038f0:	4614      	mov	r4, r2
  4038f2:	4603      	mov	r3, r0
  4038f4:	e7c2      	b.n	40387c <memset+0x20>
  4038f6:	bf00      	nop

004038f8 <sprintf>:
  4038f8:	b40e      	push	{r1, r2, r3}
  4038fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  4038fc:	b09c      	sub	sp, #112	; 0x70
  4038fe:	ab21      	add	r3, sp, #132	; 0x84
  403900:	490f      	ldr	r1, [pc, #60]	; (403940 <sprintf+0x48>)
  403902:	f853 2b04 	ldr.w	r2, [r3], #4
  403906:	9301      	str	r3, [sp, #4]
  403908:	4605      	mov	r5, r0
  40390a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40390e:	6808      	ldr	r0, [r1, #0]
  403910:	9502      	str	r5, [sp, #8]
  403912:	f44f 7702 	mov.w	r7, #520	; 0x208
  403916:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40391a:	a902      	add	r1, sp, #8
  40391c:	9506      	str	r5, [sp, #24]
  40391e:	f8ad 7014 	strh.w	r7, [sp, #20]
  403922:	9404      	str	r4, [sp, #16]
  403924:	9407      	str	r4, [sp, #28]
  403926:	f8ad 6016 	strh.w	r6, [sp, #22]
  40392a:	f000 fa77 	bl	403e1c <_svfprintf_r>
  40392e:	9b02      	ldr	r3, [sp, #8]
  403930:	2200      	movs	r2, #0
  403932:	701a      	strb	r2, [r3, #0]
  403934:	b01c      	add	sp, #112	; 0x70
  403936:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40393a:	b003      	add	sp, #12
  40393c:	4770      	bx	lr
  40393e:	bf00      	nop
  403940:	20000438 	.word	0x20000438

00403944 <critical_factorization>:
  403944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403948:	f04f 0e01 	mov.w	lr, #1
  40394c:	4674      	mov	r4, lr
  40394e:	2500      	movs	r5, #0
  403950:	f04f 36ff 	mov.w	r6, #4294967295
  403954:	192b      	adds	r3, r5, r4
  403956:	428b      	cmp	r3, r1
  403958:	eb00 0706 	add.w	r7, r0, r6
  40395c:	d20d      	bcs.n	40397a <critical_factorization+0x36>
  40395e:	5d3f      	ldrb	r7, [r7, r4]
  403960:	f810 c003 	ldrb.w	ip, [r0, r3]
  403964:	45bc      	cmp	ip, r7
  403966:	d22d      	bcs.n	4039c4 <critical_factorization+0x80>
  403968:	461d      	mov	r5, r3
  40396a:	2401      	movs	r4, #1
  40396c:	ebc6 0e03 	rsb	lr, r6, r3
  403970:	192b      	adds	r3, r5, r4
  403972:	428b      	cmp	r3, r1
  403974:	eb00 0706 	add.w	r7, r0, r6
  403978:	d3f1      	bcc.n	40395e <critical_factorization+0x1a>
  40397a:	f04f 0801 	mov.w	r8, #1
  40397e:	f8c2 e000 	str.w	lr, [r2]
  403982:	4644      	mov	r4, r8
  403984:	2500      	movs	r5, #0
  403986:	f04f 37ff 	mov.w	r7, #4294967295
  40398a:	192b      	adds	r3, r5, r4
  40398c:	4299      	cmp	r1, r3
  40398e:	eb00 0e07 	add.w	lr, r0, r7
  403992:	d90e      	bls.n	4039b2 <critical_factorization+0x6e>
  403994:	f81e e004 	ldrb.w	lr, [lr, r4]
  403998:	f810 c003 	ldrb.w	ip, [r0, r3]
  40399c:	45f4      	cmp	ip, lr
  40399e:	d918      	bls.n	4039d2 <critical_factorization+0x8e>
  4039a0:	461d      	mov	r5, r3
  4039a2:	2401      	movs	r4, #1
  4039a4:	ebc7 0803 	rsb	r8, r7, r3
  4039a8:	192b      	adds	r3, r5, r4
  4039aa:	4299      	cmp	r1, r3
  4039ac:	eb00 0e07 	add.w	lr, r0, r7
  4039b0:	d8f0      	bhi.n	403994 <critical_factorization+0x50>
  4039b2:	3701      	adds	r7, #1
  4039b4:	1c70      	adds	r0, r6, #1
  4039b6:	4287      	cmp	r7, r0
  4039b8:	bf24      	itt	cs
  4039ba:	f8c2 8000 	strcs.w	r8, [r2]
  4039be:	4638      	movcs	r0, r7
  4039c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4039c4:	d00c      	beq.n	4039e0 <critical_factorization+0x9c>
  4039c6:	f04f 0e01 	mov.w	lr, #1
  4039ca:	462e      	mov	r6, r5
  4039cc:	4674      	mov	r4, lr
  4039ce:	4475      	add	r5, lr
  4039d0:	e7c0      	b.n	403954 <critical_factorization+0x10>
  4039d2:	d00c      	beq.n	4039ee <critical_factorization+0xaa>
  4039d4:	f04f 0801 	mov.w	r8, #1
  4039d8:	462f      	mov	r7, r5
  4039da:	4644      	mov	r4, r8
  4039dc:	4445      	add	r5, r8
  4039de:	e7d4      	b.n	40398a <critical_factorization+0x46>
  4039e0:	4574      	cmp	r4, lr
  4039e2:	bf09      	itett	eq
  4039e4:	46a6      	moveq	lr, r4
  4039e6:	3401      	addne	r4, #1
  4039e8:	461d      	moveq	r5, r3
  4039ea:	2401      	moveq	r4, #1
  4039ec:	e7b2      	b.n	403954 <critical_factorization+0x10>
  4039ee:	4544      	cmp	r4, r8
  4039f0:	bf09      	itett	eq
  4039f2:	46a0      	moveq	r8, r4
  4039f4:	3401      	addne	r4, #1
  4039f6:	461d      	moveq	r5, r3
  4039f8:	2401      	moveq	r4, #1
  4039fa:	e7c6      	b.n	40398a <critical_factorization+0x46>

004039fc <two_way_long_needle>:
  4039fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a00:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  403a04:	4616      	mov	r6, r2
  403a06:	4605      	mov	r5, r0
  403a08:	468b      	mov	fp, r1
  403a0a:	4610      	mov	r0, r2
  403a0c:	4619      	mov	r1, r3
  403a0e:	aa03      	add	r2, sp, #12
  403a10:	461c      	mov	r4, r3
  403a12:	f7ff ff97 	bl	403944 <critical_factorization>
  403a16:	ab03      	add	r3, sp, #12
  403a18:	4681      	mov	r9, r0
  403a1a:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  403a1e:	f843 4f04 	str.w	r4, [r3, #4]!
  403a22:	4293      	cmp	r3, r2
  403a24:	d1fb      	bne.n	403a1e <two_way_long_needle+0x22>
  403a26:	b14c      	cbz	r4, 403a3c <two_way_long_needle+0x40>
  403a28:	1e63      	subs	r3, r4, #1
  403a2a:	4632      	mov	r2, r6
  403a2c:	a804      	add	r0, sp, #16
  403a2e:	f812 1b01 	ldrb.w	r1, [r2], #1
  403a32:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  403a36:	f113 33ff 	adds.w	r3, r3, #4294967295
  403a3a:	d2f8      	bcs.n	403a2e <two_way_long_needle+0x32>
  403a3c:	9903      	ldr	r1, [sp, #12]
  403a3e:	464a      	mov	r2, r9
  403a40:	4431      	add	r1, r6
  403a42:	4630      	mov	r0, r6
  403a44:	f003 f82c 	bl	406aa0 <memcmp>
  403a48:	2800      	cmp	r0, #0
  403a4a:	d171      	bne.n	403b30 <two_way_long_needle+0x134>
  403a4c:	f109 33ff 	add.w	r3, r9, #4294967295
  403a50:	9300      	str	r3, [sp, #0]
  403a52:	18f3      	adds	r3, r6, r3
  403a54:	4682      	mov	sl, r0
  403a56:	9301      	str	r3, [sp, #4]
  403a58:	4623      	mov	r3, r4
  403a5a:	4680      	mov	r8, r0
  403a5c:	4654      	mov	r4, sl
  403a5e:	4658      	mov	r0, fp
  403a60:	469a      	mov	sl, r3
  403a62:	eb08 070a 	add.w	r7, r8, sl
  403a66:	1a3a      	subs	r2, r7, r0
  403a68:	2100      	movs	r1, #0
  403a6a:	4428      	add	r0, r5
  403a6c:	f002 ffc8 	bl	406a00 <memchr>
  403a70:	2800      	cmp	r0, #0
  403a72:	d158      	bne.n	403b26 <two_way_long_needle+0x12a>
  403a74:	2f00      	cmp	r7, #0
  403a76:	d056      	beq.n	403b26 <two_way_long_needle+0x12a>
  403a78:	19eb      	adds	r3, r5, r7
  403a7a:	aa04      	add	r2, sp, #16
  403a7c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  403a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403a84:	b14b      	cbz	r3, 403a9a <two_way_long_needle+0x9e>
  403a86:	b124      	cbz	r4, 403a92 <two_way_long_needle+0x96>
  403a88:	9a03      	ldr	r2, [sp, #12]
  403a8a:	4293      	cmp	r3, r2
  403a8c:	d201      	bcs.n	403a92 <two_way_long_needle+0x96>
  403a8e:	ebc2 030a 	rsb	r3, r2, sl
  403a92:	4498      	add	r8, r3
  403a94:	2400      	movs	r4, #0
  403a96:	4638      	mov	r0, r7
  403a98:	e7e3      	b.n	403a62 <two_way_long_needle+0x66>
  403a9a:	454c      	cmp	r4, r9
  403a9c:	4623      	mov	r3, r4
  403a9e:	f10a 3eff 	add.w	lr, sl, #4294967295
  403aa2:	bf38      	it	cc
  403aa4:	464b      	movcc	r3, r9
  403aa6:	4573      	cmp	r3, lr
  403aa8:	d213      	bcs.n	403ad2 <two_way_long_needle+0xd6>
  403aaa:	eb08 0203 	add.w	r2, r8, r3
  403aae:	f816 c003 	ldrb.w	ip, [r6, r3]
  403ab2:	5ca8      	ldrb	r0, [r5, r2]
  403ab4:	4584      	cmp	ip, r0
  403ab6:	442a      	add	r2, r5
  403ab8:	eb06 0103 	add.w	r1, r6, r3
  403abc:	d006      	beq.n	403acc <two_way_long_needle+0xd0>
  403abe:	e02e      	b.n	403b1e <two_way_long_needle+0x122>
  403ac0:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  403ac4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  403ac8:	4584      	cmp	ip, r0
  403aca:	d128      	bne.n	403b1e <two_way_long_needle+0x122>
  403acc:	3301      	adds	r3, #1
  403ace:	4573      	cmp	r3, lr
  403ad0:	d3f6      	bcc.n	403ac0 <two_way_long_needle+0xc4>
  403ad2:	454c      	cmp	r4, r9
  403ad4:	9900      	ldr	r1, [sp, #0]
  403ad6:	f080 808b 	bcs.w	403bf0 <two_way_long_needle+0x1f4>
  403ada:	9b00      	ldr	r3, [sp, #0]
  403adc:	9801      	ldr	r0, [sp, #4]
  403ade:	eb08 0203 	add.w	r2, r8, r3
  403ae2:	7803      	ldrb	r3, [r0, #0]
  403ae4:	5ca8      	ldrb	r0, [r5, r2]
  403ae6:	4283      	cmp	r3, r0
  403ae8:	442a      	add	r2, r5
  403aea:	f040 8081 	bne.w	403bf0 <two_way_long_needle+0x1f4>
  403aee:	9b01      	ldr	r3, [sp, #4]
  403af0:	eb06 0b04 	add.w	fp, r6, r4
  403af4:	e006      	b.n	403b04 <two_way_long_needle+0x108>
  403af6:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
  403afa:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
  403afe:	4586      	cmp	lr, r0
  403b00:	d104      	bne.n	403b0c <two_way_long_needle+0x110>
  403b02:	4661      	mov	r1, ip
  403b04:	459b      	cmp	fp, r3
  403b06:	f101 3cff 	add.w	ip, r1, #4294967295
  403b0a:	d1f4      	bne.n	403af6 <two_way_long_needle+0xfa>
  403b0c:	3401      	adds	r4, #1
  403b0e:	428c      	cmp	r4, r1
  403b10:	d870      	bhi.n	403bf4 <two_way_long_needle+0x1f8>
  403b12:	9c03      	ldr	r4, [sp, #12]
  403b14:	4638      	mov	r0, r7
  403b16:	44a0      	add	r8, r4
  403b18:	ebc4 040a 	rsb	r4, r4, sl
  403b1c:	e7a1      	b.n	403a62 <two_way_long_needle+0x66>
  403b1e:	f1c9 0201 	rsb	r2, r9, #1
  403b22:	4490      	add	r8, r2
  403b24:	e7b5      	b.n	403a92 <two_way_long_needle+0x96>
  403b26:	2000      	movs	r0, #0
  403b28:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b30:	ebc9 0304 	rsb	r3, r9, r4
  403b34:	454b      	cmp	r3, r9
  403b36:	bf38      	it	cc
  403b38:	464b      	movcc	r3, r9
  403b3a:	3301      	adds	r3, #1
  403b3c:	f109 38ff 	add.w	r8, r9, #4294967295
  403b40:	9303      	str	r3, [sp, #12]
  403b42:	eb06 0308 	add.w	r3, r6, r8
  403b46:	4658      	mov	r0, fp
  403b48:	f04f 0a00 	mov.w	sl, #0
  403b4c:	46cb      	mov	fp, r9
  403b4e:	4699      	mov	r9, r3
  403b50:	eb0a 0704 	add.w	r7, sl, r4
  403b54:	1a3a      	subs	r2, r7, r0
  403b56:	2100      	movs	r1, #0
  403b58:	4428      	add	r0, r5
  403b5a:	f002 ff51 	bl	406a00 <memchr>
  403b5e:	2800      	cmp	r0, #0
  403b60:	d1e1      	bne.n	403b26 <two_way_long_needle+0x12a>
  403b62:	2f00      	cmp	r7, #0
  403b64:	d0df      	beq.n	403b26 <two_way_long_needle+0x12a>
  403b66:	19eb      	adds	r3, r5, r7
  403b68:	aa04      	add	r2, sp, #16
  403b6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  403b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403b72:	bba3      	cbnz	r3, 403bde <two_way_long_needle+0x1e2>
  403b74:	1e61      	subs	r1, r4, #1
  403b76:	458b      	cmp	fp, r1
  403b78:	d215      	bcs.n	403ba6 <two_way_long_needle+0x1aa>
  403b7a:	eb0a 020b 	add.w	r2, sl, fp
  403b7e:	f816 300b 	ldrb.w	r3, [r6, fp]
  403b82:	f815 e002 	ldrb.w	lr, [r5, r2]
  403b86:	459e      	cmp	lr, r3
  403b88:	442a      	add	r2, r5
  403b8a:	eb06 000b 	add.w	r0, r6, fp
  403b8e:	465b      	mov	r3, fp
  403b90:	d006      	beq.n	403ba0 <two_way_long_needle+0x1a4>
  403b92:	e027      	b.n	403be4 <two_way_long_needle+0x1e8>
  403b94:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  403b98:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  403b9c:	45f4      	cmp	ip, lr
  403b9e:	d121      	bne.n	403be4 <two_way_long_needle+0x1e8>
  403ba0:	3301      	adds	r3, #1
  403ba2:	428b      	cmp	r3, r1
  403ba4:	d3f6      	bcc.n	403b94 <two_way_long_needle+0x198>
  403ba6:	f1b8 3fff 	cmp.w	r8, #4294967295
  403baa:	d011      	beq.n	403bd0 <two_way_long_needle+0x1d4>
  403bac:	eb0a 0208 	add.w	r2, sl, r8
  403bb0:	f899 1000 	ldrb.w	r1, [r9]
  403bb4:	5cab      	ldrb	r3, [r5, r2]
  403bb6:	4299      	cmp	r1, r3
  403bb8:	442a      	add	r2, r5
  403bba:	d10f      	bne.n	403bdc <two_way_long_needle+0x1e0>
  403bbc:	464b      	mov	r3, r9
  403bbe:	e005      	b.n	403bcc <two_way_long_needle+0x1d0>
  403bc0:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403bc4:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403bc8:	4288      	cmp	r0, r1
  403bca:	d107      	bne.n	403bdc <two_way_long_needle+0x1e0>
  403bcc:	42b3      	cmp	r3, r6
  403bce:	d1f7      	bne.n	403bc0 <two_way_long_needle+0x1c4>
  403bd0:	eb05 000a 	add.w	r0, r5, sl
  403bd4:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403bdc:	9b03      	ldr	r3, [sp, #12]
  403bde:	449a      	add	sl, r3
  403be0:	4638      	mov	r0, r7
  403be2:	e7b5      	b.n	403b50 <two_way_long_needle+0x154>
  403be4:	f1cb 0201 	rsb	r2, fp, #1
  403be8:	4492      	add	sl, r2
  403bea:	449a      	add	sl, r3
  403bec:	4638      	mov	r0, r7
  403bee:	e7af      	b.n	403b50 <two_way_long_needle+0x154>
  403bf0:	4649      	mov	r1, r9
  403bf2:	e78b      	b.n	403b0c <two_way_long_needle+0x110>
  403bf4:	eb05 0008 	add.w	r0, r5, r8
  403bf8:	e796      	b.n	403b28 <two_way_long_needle+0x12c>
  403bfa:	bf00      	nop

00403bfc <strstr>:
  403bfc:	7803      	ldrb	r3, [r0, #0]
  403bfe:	2b00      	cmp	r3, #0
  403c00:	f000 8104 	beq.w	403e0c <strstr+0x210>
  403c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c08:	f891 8000 	ldrb.w	r8, [r1]
  403c0c:	b085      	sub	sp, #20
  403c0e:	4644      	mov	r4, r8
  403c10:	f1b8 0f00 	cmp.w	r8, #0
  403c14:	d016      	beq.n	403c44 <strstr+0x48>
  403c16:	4686      	mov	lr, r0
  403c18:	f101 0c01 	add.w	ip, r1, #1
  403c1c:	2701      	movs	r7, #1
  403c1e:	e003      	b.n	403c28 <strstr+0x2c>
  403c20:	f812 4b01 	ldrb.w	r4, [r2], #1
  403c24:	b16c      	cbz	r4, 403c42 <strstr+0x46>
  403c26:	4694      	mov	ip, r2
  403c28:	429c      	cmp	r4, r3
  403c2a:	bf14      	ite	ne
  403c2c:	2700      	movne	r7, #0
  403c2e:	f007 0701 	andeq.w	r7, r7, #1
  403c32:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
  403c36:	4662      	mov	r2, ip
  403c38:	2b00      	cmp	r3, #0
  403c3a:	d1f1      	bne.n	403c20 <strstr+0x24>
  403c3c:	f89c 3000 	ldrb.w	r3, [ip]
  403c40:	bb0b      	cbnz	r3, 403c86 <strstr+0x8a>
  403c42:	b117      	cbz	r7, 403c4a <strstr+0x4e>
  403c44:	b005      	add	sp, #20
  403c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c4a:	460e      	mov	r6, r1
  403c4c:	4605      	mov	r5, r0
  403c4e:	4641      	mov	r1, r8
  403c50:	3001      	adds	r0, #1
  403c52:	ebc6 040c 	rsb	r4, r6, ip
  403c56:	f003 fb13 	bl	407280 <strchr>
  403c5a:	4607      	mov	r7, r0
  403c5c:	b198      	cbz	r0, 403c86 <strstr+0x8a>
  403c5e:	2c01      	cmp	r4, #1
  403c60:	d0f0      	beq.n	403c44 <strstr+0x48>
  403c62:	1928      	adds	r0, r5, r4
  403c64:	4287      	cmp	r7, r0
  403c66:	bf94      	ite	ls
  403c68:	ebc7 0b00 	rsbls	fp, r7, r0
  403c6c:	f04f 0b01 	movhi.w	fp, #1
  403c70:	2c1f      	cmp	r4, #31
  403c72:	d90c      	bls.n	403c8e <strstr+0x92>
  403c74:	4623      	mov	r3, r4
  403c76:	4632      	mov	r2, r6
  403c78:	4659      	mov	r1, fp
  403c7a:	4638      	mov	r0, r7
  403c7c:	f7ff febe 	bl	4039fc <two_way_long_needle>
  403c80:	b005      	add	sp, #20
  403c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c86:	2000      	movs	r0, #0
  403c88:	b005      	add	sp, #20
  403c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c8e:	aa03      	add	r2, sp, #12
  403c90:	4621      	mov	r1, r4
  403c92:	4630      	mov	r0, r6
  403c94:	f7ff fe56 	bl	403944 <critical_factorization>
  403c98:	9903      	ldr	r1, [sp, #12]
  403c9a:	4680      	mov	r8, r0
  403c9c:	4602      	mov	r2, r0
  403c9e:	4431      	add	r1, r6
  403ca0:	4630      	mov	r0, r6
  403ca2:	f002 fefd 	bl	406aa0 <memcmp>
  403ca6:	2800      	cmp	r0, #0
  403ca8:	d158      	bne.n	403d5c <strstr+0x160>
  403caa:	f108 33ff 	add.w	r3, r8, #4294967295
  403cae:	9301      	str	r3, [sp, #4]
  403cb0:	18f3      	adds	r3, r6, r3
  403cb2:	4681      	mov	r9, r0
  403cb4:	4605      	mov	r5, r0
  403cb6:	9300      	str	r3, [sp, #0]
  403cb8:	4658      	mov	r0, fp
  403cba:	46b2      	mov	sl, r6
  403cbc:	1966      	adds	r6, r4, r5
  403cbe:	1a32      	subs	r2, r6, r0
  403cc0:	2100      	movs	r1, #0
  403cc2:	4438      	add	r0, r7
  403cc4:	f002 fe9c 	bl	406a00 <memchr>
  403cc8:	2800      	cmp	r0, #0
  403cca:	d1dc      	bne.n	403c86 <strstr+0x8a>
  403ccc:	2e00      	cmp	r6, #0
  403cce:	d0da      	beq.n	403c86 <strstr+0x8a>
  403cd0:	45c8      	cmp	r8, r9
  403cd2:	4643      	mov	r3, r8
  403cd4:	bf38      	it	cc
  403cd6:	464b      	movcc	r3, r9
  403cd8:	429c      	cmp	r4, r3
  403cda:	d912      	bls.n	403d02 <strstr+0x106>
  403cdc:	195a      	adds	r2, r3, r5
  403cde:	f81a 1003 	ldrb.w	r1, [sl, r3]
  403ce2:	5cb8      	ldrb	r0, [r7, r2]
  403ce4:	4288      	cmp	r0, r1
  403ce6:	443a      	add	r2, r7
  403ce8:	eb0a 0e03 	add.w	lr, sl, r3
  403cec:	d006      	beq.n	403cfc <strstr+0x100>
  403cee:	e02d      	b.n	403d4c <strstr+0x150>
  403cf0:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  403cf4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  403cf8:	4288      	cmp	r0, r1
  403cfa:	d127      	bne.n	403d4c <strstr+0x150>
  403cfc:	3301      	adds	r3, #1
  403cfe:	429c      	cmp	r4, r3
  403d00:	d8f6      	bhi.n	403cf0 <strstr+0xf4>
  403d02:	9b01      	ldr	r3, [sp, #4]
  403d04:	45c8      	cmp	r8, r9
  403d06:	4619      	mov	r1, r3
  403d08:	f240 8083 	bls.w	403e12 <strstr+0x216>
  403d0c:	18ea      	adds	r2, r5, r3
  403d0e:	9800      	ldr	r0, [sp, #0]
  403d10:	7803      	ldrb	r3, [r0, #0]
  403d12:	5cb8      	ldrb	r0, [r7, r2]
  403d14:	4283      	cmp	r3, r0
  403d16:	443a      	add	r2, r7
  403d18:	d17b      	bne.n	403e12 <strstr+0x216>
  403d1a:	9b00      	ldr	r3, [sp, #0]
  403d1c:	eb0a 0b09 	add.w	fp, sl, r9
  403d20:	e006      	b.n	403d30 <strstr+0x134>
  403d22:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
  403d26:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  403d2a:	45f4      	cmp	ip, lr
  403d2c:	d104      	bne.n	403d38 <strstr+0x13c>
  403d2e:	4601      	mov	r1, r0
  403d30:	455b      	cmp	r3, fp
  403d32:	f101 30ff 	add.w	r0, r1, #4294967295
  403d36:	d1f4      	bne.n	403d22 <strstr+0x126>
  403d38:	f109 0901 	add.w	r9, r9, #1
  403d3c:	4589      	cmp	r9, r1
  403d3e:	d857      	bhi.n	403df0 <strstr+0x1f4>
  403d40:	9b03      	ldr	r3, [sp, #12]
  403d42:	4630      	mov	r0, r6
  403d44:	441d      	add	r5, r3
  403d46:	ebc3 0904 	rsb	r9, r3, r4
  403d4a:	e7b7      	b.n	403cbc <strstr+0xc0>
  403d4c:	f1c8 0201 	rsb	r2, r8, #1
  403d50:	4415      	add	r5, r2
  403d52:	441d      	add	r5, r3
  403d54:	f04f 0900 	mov.w	r9, #0
  403d58:	4630      	mov	r0, r6
  403d5a:	e7af      	b.n	403cbc <strstr+0xc0>
  403d5c:	ebc8 0304 	rsb	r3, r8, r4
  403d60:	4543      	cmp	r3, r8
  403d62:	bf38      	it	cc
  403d64:	4643      	movcc	r3, r8
  403d66:	3301      	adds	r3, #1
  403d68:	f108 39ff 	add.w	r9, r8, #4294967295
  403d6c:	9303      	str	r3, [sp, #12]
  403d6e:	eb06 0309 	add.w	r3, r6, r9
  403d72:	4658      	mov	r0, fp
  403d74:	2500      	movs	r5, #0
  403d76:	46bb      	mov	fp, r7
  403d78:	469a      	mov	sl, r3
  403d7a:	1967      	adds	r7, r4, r5
  403d7c:	1a3a      	subs	r2, r7, r0
  403d7e:	2100      	movs	r1, #0
  403d80:	4458      	add	r0, fp
  403d82:	f002 fe3d 	bl	406a00 <memchr>
  403d86:	2800      	cmp	r0, #0
  403d88:	f47f af7d 	bne.w	403c86 <strstr+0x8a>
  403d8c:	2f00      	cmp	r7, #0
  403d8e:	f43f af7a 	beq.w	403c86 <strstr+0x8a>
  403d92:	4544      	cmp	r4, r8
  403d94:	d915      	bls.n	403dc2 <strstr+0x1c6>
  403d96:	eb08 0205 	add.w	r2, r8, r5
  403d9a:	f816 3008 	ldrb.w	r3, [r6, r8]
  403d9e:	f81b 0002 	ldrb.w	r0, [fp, r2]
  403da2:	4298      	cmp	r0, r3
  403da4:	445a      	add	r2, fp
  403da6:	eb06 0108 	add.w	r1, r6, r8
  403daa:	4643      	mov	r3, r8
  403dac:	d006      	beq.n	403dbc <strstr+0x1c0>
  403dae:	e023      	b.n	403df8 <strstr+0x1fc>
  403db0:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  403db4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  403db8:	4586      	cmp	lr, r0
  403dba:	d11d      	bne.n	403df8 <strstr+0x1fc>
  403dbc:	3301      	adds	r3, #1
  403dbe:	429c      	cmp	r4, r3
  403dc0:	d8f6      	bhi.n	403db0 <strstr+0x1b4>
  403dc2:	f1b9 3fff 	cmp.w	r9, #4294967295
  403dc6:	d012      	beq.n	403dee <strstr+0x1f2>
  403dc8:	eb05 0209 	add.w	r2, r5, r9
  403dcc:	f89a 1000 	ldrb.w	r1, [sl]
  403dd0:	f81b 3002 	ldrb.w	r3, [fp, r2]
  403dd4:	4299      	cmp	r1, r3
  403dd6:	445a      	add	r2, fp
  403dd8:	d114      	bne.n	403e04 <strstr+0x208>
  403dda:	4653      	mov	r3, sl
  403ddc:	e005      	b.n	403dea <strstr+0x1ee>
  403dde:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403de2:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403de6:	4288      	cmp	r0, r1
  403de8:	d10c      	bne.n	403e04 <strstr+0x208>
  403dea:	42b3      	cmp	r3, r6
  403dec:	d1f7      	bne.n	403dde <strstr+0x1e2>
  403dee:	465f      	mov	r7, fp
  403df0:	1978      	adds	r0, r7, r5
  403df2:	b005      	add	sp, #20
  403df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403df8:	f1c8 0201 	rsb	r2, r8, #1
  403dfc:	4415      	add	r5, r2
  403dfe:	441d      	add	r5, r3
  403e00:	4638      	mov	r0, r7
  403e02:	e7ba      	b.n	403d7a <strstr+0x17e>
  403e04:	9b03      	ldr	r3, [sp, #12]
  403e06:	4638      	mov	r0, r7
  403e08:	441d      	add	r5, r3
  403e0a:	e7b6      	b.n	403d7a <strstr+0x17e>
  403e0c:	780b      	ldrb	r3, [r1, #0]
  403e0e:	b913      	cbnz	r3, 403e16 <strstr+0x21a>
  403e10:	4770      	bx	lr
  403e12:	4641      	mov	r1, r8
  403e14:	e790      	b.n	403d38 <strstr+0x13c>
  403e16:	2000      	movs	r0, #0
  403e18:	4770      	bx	lr
  403e1a:	bf00      	nop

00403e1c <_svfprintf_r>:
  403e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e20:	b0c1      	sub	sp, #260	; 0x104
  403e22:	460c      	mov	r4, r1
  403e24:	9109      	str	r1, [sp, #36]	; 0x24
  403e26:	4615      	mov	r5, r2
  403e28:	930e      	str	r3, [sp, #56]	; 0x38
  403e2a:	900a      	str	r0, [sp, #40]	; 0x28
  403e2c:	f002 fb28 	bl	406480 <_localeconv_r>
  403e30:	6803      	ldr	r3, [r0, #0]
  403e32:	9317      	str	r3, [sp, #92]	; 0x5c
  403e34:	4618      	mov	r0, r3
  403e36:	f003 faa3 	bl	407380 <strlen>
  403e3a:	89a3      	ldrh	r3, [r4, #12]
  403e3c:	9016      	str	r0, [sp, #88]	; 0x58
  403e3e:	061e      	lsls	r6, r3, #24
  403e40:	d503      	bpl.n	403e4a <_svfprintf_r+0x2e>
  403e42:	6923      	ldr	r3, [r4, #16]
  403e44:	2b00      	cmp	r3, #0
  403e46:	f001 8119 	beq.w	40507c <_svfprintf_r+0x1260>
  403e4a:	2300      	movs	r3, #0
  403e4c:	461a      	mov	r2, r3
  403e4e:	9312      	str	r3, [sp, #72]	; 0x48
  403e50:	9325      	str	r3, [sp, #148]	; 0x94
  403e52:	9324      	str	r3, [sp, #144]	; 0x90
  403e54:	9319      	str	r3, [sp, #100]	; 0x64
  403e56:	930b      	str	r3, [sp, #44]	; 0x2c
  403e58:	f8df a464 	ldr.w	sl, [pc, #1124]	; 4042c0 <_svfprintf_r+0x4a4>
  403e5c:	9214      	str	r2, [sp, #80]	; 0x50
  403e5e:	ab30      	add	r3, sp, #192	; 0xc0
  403e60:	9323      	str	r3, [sp, #140]	; 0x8c
  403e62:	4699      	mov	r9, r3
  403e64:	9215      	str	r2, [sp, #84]	; 0x54
  403e66:	46a8      	mov	r8, r5
  403e68:	f898 3000 	ldrb.w	r3, [r8]
  403e6c:	4644      	mov	r4, r8
  403e6e:	b1eb      	cbz	r3, 403eac <_svfprintf_r+0x90>
  403e70:	2b25      	cmp	r3, #37	; 0x25
  403e72:	d102      	bne.n	403e7a <_svfprintf_r+0x5e>
  403e74:	e01a      	b.n	403eac <_svfprintf_r+0x90>
  403e76:	2b25      	cmp	r3, #37	; 0x25
  403e78:	d003      	beq.n	403e82 <_svfprintf_r+0x66>
  403e7a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403e7e:	2b00      	cmp	r3, #0
  403e80:	d1f9      	bne.n	403e76 <_svfprintf_r+0x5a>
  403e82:	ebc8 0504 	rsb	r5, r8, r4
  403e86:	b18d      	cbz	r5, 403eac <_svfprintf_r+0x90>
  403e88:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403e8a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403e8c:	f8c9 8000 	str.w	r8, [r9]
  403e90:	3301      	adds	r3, #1
  403e92:	442a      	add	r2, r5
  403e94:	2b07      	cmp	r3, #7
  403e96:	f8c9 5004 	str.w	r5, [r9, #4]
  403e9a:	9225      	str	r2, [sp, #148]	; 0x94
  403e9c:	9324      	str	r3, [sp, #144]	; 0x90
  403e9e:	f300 80a6 	bgt.w	403fee <_svfprintf_r+0x1d2>
  403ea2:	f109 0908 	add.w	r9, r9, #8
  403ea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403ea8:	442b      	add	r3, r5
  403eaa:	930b      	str	r3, [sp, #44]	; 0x2c
  403eac:	7823      	ldrb	r3, [r4, #0]
  403eae:	2b00      	cmp	r3, #0
  403eb0:	f000 80a6 	beq.w	404000 <_svfprintf_r+0x1e4>
  403eb4:	2300      	movs	r3, #0
  403eb6:	461a      	mov	r2, r3
  403eb8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403ebc:	4619      	mov	r1, r3
  403ebe:	930c      	str	r3, [sp, #48]	; 0x30
  403ec0:	9307      	str	r3, [sp, #28]
  403ec2:	f04f 3bff 	mov.w	fp, #4294967295
  403ec6:	7863      	ldrb	r3, [r4, #1]
  403ec8:	f104 0801 	add.w	r8, r4, #1
  403ecc:	465d      	mov	r5, fp
  403ece:	f108 0801 	add.w	r8, r8, #1
  403ed2:	f1a3 0020 	sub.w	r0, r3, #32
  403ed6:	2858      	cmp	r0, #88	; 0x58
  403ed8:	f200 8425 	bhi.w	404726 <_svfprintf_r+0x90a>
  403edc:	e8df f010 	tbh	[pc, r0, lsl #1]
  403ee0:	04230388 	.word	0x04230388
  403ee4:	03900423 	.word	0x03900423
  403ee8:	04230423 	.word	0x04230423
  403eec:	04230423 	.word	0x04230423
  403ef0:	04230423 	.word	0x04230423
  403ef4:	03a50397 	.word	0x03a50397
  403ef8:	005d0423 	.word	0x005d0423
  403efc:	042300e2 	.word	0x042300e2
  403f00:	010500fe 	.word	0x010500fe
  403f04:	01050105 	.word	0x01050105
  403f08:	01050105 	.word	0x01050105
  403f0c:	01050105 	.word	0x01050105
  403f10:	01050105 	.word	0x01050105
  403f14:	04230423 	.word	0x04230423
  403f18:	04230423 	.word	0x04230423
  403f1c:	04230423 	.word	0x04230423
  403f20:	04230423 	.word	0x04230423
  403f24:	04230423 	.word	0x04230423
  403f28:	02810115 	.word	0x02810115
  403f2c:	02810423 	.word	0x02810423
  403f30:	04230423 	.word	0x04230423
  403f34:	04230423 	.word	0x04230423
  403f38:	042302c6 	.word	0x042302c6
  403f3c:	02cd0423 	.word	0x02cd0423
  403f40:	04230423 	.word	0x04230423
  403f44:	04230423 	.word	0x04230423
  403f48:	02f70423 	.word	0x02f70423
  403f4c:	04230423 	.word	0x04230423
  403f50:	04230325 	.word	0x04230325
  403f54:	04230423 	.word	0x04230423
  403f58:	04230423 	.word	0x04230423
  403f5c:	04230423 	.word	0x04230423
  403f60:	04230423 	.word	0x04230423
  403f64:	03660423 	.word	0x03660423
  403f68:	02810379 	.word	0x02810379
  403f6c:	02810281 	.word	0x02810281
  403f70:	03790381 	.word	0x03790381
  403f74:	04230423 	.word	0x04230423
  403f78:	042303d1 	.word	0x042303d1
  403f7c:	00a303db 	.word	0x00a303db
  403f80:	03ee0064 	.word	0x03ee0064
  403f84:	03f50423 	.word	0x03f50423
  403f88:	03aa0423 	.word	0x03aa0423
  403f8c:	04230423 	.word	0x04230423
  403f90:	03bc      	.short	0x03bc
  403f92:	980c      	ldr	r0, [sp, #48]	; 0x30
  403f94:	930e      	str	r3, [sp, #56]	; 0x38
  403f96:	4240      	negs	r0, r0
  403f98:	900c      	str	r0, [sp, #48]	; 0x30
  403f9a:	9b07      	ldr	r3, [sp, #28]
  403f9c:	f043 0304 	orr.w	r3, r3, #4
  403fa0:	9307      	str	r3, [sp, #28]
  403fa2:	f898 3000 	ldrb.w	r3, [r8]
  403fa6:	e792      	b.n	403ece <_svfprintf_r+0xb2>
  403fa8:	980e      	ldr	r0, [sp, #56]	; 0x38
  403faa:	46ab      	mov	fp, r5
  403fac:	2100      	movs	r1, #0
  403fae:	6804      	ldr	r4, [r0, #0]
  403fb0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403fb4:	1d07      	adds	r7, r0, #4
  403fb6:	9807      	ldr	r0, [sp, #28]
  403fb8:	2330      	movs	r3, #48	; 0x30
  403fba:	2278      	movs	r2, #120	; 0x78
  403fbc:	458b      	cmp	fp, r1
  403fbe:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  403fc2:	f04f 0500 	mov.w	r5, #0
  403fc6:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  403fca:	f040 0302 	orr.w	r3, r0, #2
  403fce:	f2c0 83c7 	blt.w	404760 <_svfprintf_r+0x944>
  403fd2:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  403fd6:	f043 0302 	orr.w	r3, r3, #2
  403fda:	9307      	str	r3, [sp, #28]
  403fdc:	ea54 0305 	orrs.w	r3, r4, r5
  403fe0:	970e      	str	r7, [sp, #56]	; 0x38
  403fe2:	f000 8393 	beq.w	40470c <_svfprintf_r+0x8f0>
  403fe6:	460f      	mov	r7, r1
  403fe8:	9211      	str	r2, [sp, #68]	; 0x44
  403fea:	48b3      	ldr	r0, [pc, #716]	; (4042b8 <_svfprintf_r+0x49c>)
  403fec:	e2ce      	b.n	40458c <_svfprintf_r+0x770>
  403fee:	aa23      	add	r2, sp, #140	; 0x8c
  403ff0:	9909      	ldr	r1, [sp, #36]	; 0x24
  403ff2:	980a      	ldr	r0, [sp, #40]	; 0x28
  403ff4:	f003 fa32 	bl	40745c <__ssprint_r>
  403ff8:	b948      	cbnz	r0, 40400e <_svfprintf_r+0x1f2>
  403ffa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403ffe:	e752      	b.n	403ea6 <_svfprintf_r+0x8a>
  404000:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404002:	b123      	cbz	r3, 40400e <_svfprintf_r+0x1f2>
  404004:	980a      	ldr	r0, [sp, #40]	; 0x28
  404006:	9909      	ldr	r1, [sp, #36]	; 0x24
  404008:	aa23      	add	r2, sp, #140	; 0x8c
  40400a:	f003 fa27 	bl	40745c <__ssprint_r>
  40400e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404010:	899b      	ldrh	r3, [r3, #12]
  404012:	f013 0f40 	tst.w	r3, #64	; 0x40
  404016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404018:	bf18      	it	ne
  40401a:	f04f 33ff 	movne.w	r3, #4294967295
  40401e:	4618      	mov	r0, r3
  404020:	b041      	add	sp, #260	; 0x104
  404022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404026:	9311      	str	r3, [sp, #68]	; 0x44
  404028:	46ab      	mov	fp, r5
  40402a:	2a00      	cmp	r2, #0
  40402c:	f041 8223 	bne.w	405476 <_svfprintf_r+0x165a>
  404030:	9a07      	ldr	r2, [sp, #28]
  404032:	f012 0320 	ands.w	r3, r2, #32
  404036:	f000 822e 	beq.w	404496 <_svfprintf_r+0x67a>
  40403a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40403c:	3707      	adds	r7, #7
  40403e:	f027 0307 	bic.w	r3, r7, #7
  404042:	2700      	movs	r7, #0
  404044:	f103 0108 	add.w	r1, r3, #8
  404048:	45bb      	cmp	fp, r7
  40404a:	910e      	str	r1, [sp, #56]	; 0x38
  40404c:	e9d3 4500 	ldrd	r4, r5, [r3]
  404050:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404054:	f2c0 8752 	blt.w	404efc <_svfprintf_r+0x10e0>
  404058:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40405c:	9307      	str	r3, [sp, #28]
  40405e:	ea54 0305 	orrs.w	r3, r4, r5
  404062:	f000 8375 	beq.w	404750 <_svfprintf_r+0x934>
  404066:	ae30      	add	r6, sp, #192	; 0xc0
  404068:	08e2      	lsrs	r2, r4, #3
  40406a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40406e:	08e9      	lsrs	r1, r5, #3
  404070:	f004 0307 	and.w	r3, r4, #7
  404074:	460d      	mov	r5, r1
  404076:	4614      	mov	r4, r2
  404078:	3330      	adds	r3, #48	; 0x30
  40407a:	ea54 0205 	orrs.w	r2, r4, r5
  40407e:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404082:	d1f1      	bne.n	404068 <_svfprintf_r+0x24c>
  404084:	9a07      	ldr	r2, [sp, #28]
  404086:	07d1      	lsls	r1, r2, #31
  404088:	f140 8084 	bpl.w	404194 <_svfprintf_r+0x378>
  40408c:	2b30      	cmp	r3, #48	; 0x30
  40408e:	f000 8081 	beq.w	404194 <_svfprintf_r+0x378>
  404092:	2230      	movs	r2, #48	; 0x30
  404094:	1e73      	subs	r3, r6, #1
  404096:	f806 2c01 	strb.w	r2, [r6, #-1]
  40409a:	aa30      	add	r2, sp, #192	; 0xc0
  40409c:	1ad2      	subs	r2, r2, r3
  40409e:	920d      	str	r2, [sp, #52]	; 0x34
  4040a0:	461e      	mov	r6, r3
  4040a2:	e07a      	b.n	40419a <_svfprintf_r+0x37e>
  4040a4:	f898 3000 	ldrb.w	r3, [r8]
  4040a8:	2b2a      	cmp	r3, #42	; 0x2a
  4040aa:	f108 0401 	add.w	r4, r8, #1
  4040ae:	f001 81b1 	beq.w	405414 <_svfprintf_r+0x15f8>
  4040b2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4040b6:	2809      	cmp	r0, #9
  4040b8:	bf98      	it	ls
  4040ba:	2500      	movls	r5, #0
  4040bc:	f201 8164 	bhi.w	405388 <_svfprintf_r+0x156c>
  4040c0:	f814 3b01 	ldrb.w	r3, [r4], #1
  4040c4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4040c8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  4040cc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4040d0:	2809      	cmp	r0, #9
  4040d2:	d9f5      	bls.n	4040c0 <_svfprintf_r+0x2a4>
  4040d4:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  4040d8:	46a0      	mov	r8, r4
  4040da:	e6fa      	b.n	403ed2 <_svfprintf_r+0xb6>
  4040dc:	9b07      	ldr	r3, [sp, #28]
  4040de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4040e2:	9307      	str	r3, [sp, #28]
  4040e4:	f898 3000 	ldrb.w	r3, [r8]
  4040e8:	e6f1      	b.n	403ece <_svfprintf_r+0xb2>
  4040ea:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4040ee:	2300      	movs	r3, #0
  4040f0:	461c      	mov	r4, r3
  4040f2:	f818 3b01 	ldrb.w	r3, [r8], #1
  4040f6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4040fa:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4040fe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404102:	2809      	cmp	r0, #9
  404104:	d9f5      	bls.n	4040f2 <_svfprintf_r+0x2d6>
  404106:	940c      	str	r4, [sp, #48]	; 0x30
  404108:	e6e3      	b.n	403ed2 <_svfprintf_r+0xb6>
  40410a:	9311      	str	r3, [sp, #68]	; 0x44
  40410c:	46ab      	mov	fp, r5
  40410e:	2a00      	cmp	r2, #0
  404110:	f041 81c9 	bne.w	4054a6 <_svfprintf_r+0x168a>
  404114:	9b07      	ldr	r3, [sp, #28]
  404116:	f043 0310 	orr.w	r3, r3, #16
  40411a:	9307      	str	r3, [sp, #28]
  40411c:	9b07      	ldr	r3, [sp, #28]
  40411e:	0698      	lsls	r0, r3, #26
  404120:	f140 8530 	bpl.w	404b84 <_svfprintf_r+0xd68>
  404124:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404126:	3707      	adds	r7, #7
  404128:	f027 0707 	bic.w	r7, r7, #7
  40412c:	e9d7 2300 	ldrd	r2, r3, [r7]
  404130:	f107 0108 	add.w	r1, r7, #8
  404134:	910e      	str	r1, [sp, #56]	; 0x38
  404136:	4614      	mov	r4, r2
  404138:	461d      	mov	r5, r3
  40413a:	2a00      	cmp	r2, #0
  40413c:	f173 0300 	sbcs.w	r3, r3, #0
  404140:	f2c0 855b 	blt.w	404bfa <_svfprintf_r+0xdde>
  404144:	f1bb 0f00 	cmp.w	fp, #0
  404148:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40414c:	f2c0 8538 	blt.w	404bc0 <_svfprintf_r+0xda4>
  404150:	9b07      	ldr	r3, [sp, #28]
  404152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404156:	9307      	str	r3, [sp, #28]
  404158:	ea54 0305 	orrs.w	r3, r4, r5
  40415c:	f000 81db 	beq.w	404516 <_svfprintf_r+0x6fa>
  404160:	2d00      	cmp	r5, #0
  404162:	bf08      	it	eq
  404164:	2c0a      	cmpeq	r4, #10
  404166:	f0c0 81db 	bcc.w	404520 <_svfprintf_r+0x704>
  40416a:	ae30      	add	r6, sp, #192	; 0xc0
  40416c:	4620      	mov	r0, r4
  40416e:	4629      	mov	r1, r5
  404170:	220a      	movs	r2, #10
  404172:	2300      	movs	r3, #0
  404174:	f7ff f9be 	bl	4034f4 <__aeabi_uldivmod>
  404178:	3230      	adds	r2, #48	; 0x30
  40417a:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40417e:	4620      	mov	r0, r4
  404180:	4629      	mov	r1, r5
  404182:	2300      	movs	r3, #0
  404184:	220a      	movs	r2, #10
  404186:	f7ff f9b5 	bl	4034f4 <__aeabi_uldivmod>
  40418a:	4604      	mov	r4, r0
  40418c:	460d      	mov	r5, r1
  40418e:	ea54 0305 	orrs.w	r3, r4, r5
  404192:	d1eb      	bne.n	40416c <_svfprintf_r+0x350>
  404194:	ab30      	add	r3, sp, #192	; 0xc0
  404196:	1b9b      	subs	r3, r3, r6
  404198:	930d      	str	r3, [sp, #52]	; 0x34
  40419a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40419c:	455b      	cmp	r3, fp
  40419e:	bfb8      	it	lt
  4041a0:	465b      	movlt	r3, fp
  4041a2:	9308      	str	r3, [sp, #32]
  4041a4:	2300      	movs	r3, #0
  4041a6:	9313      	str	r3, [sp, #76]	; 0x4c
  4041a8:	b117      	cbz	r7, 4041b0 <_svfprintf_r+0x394>
  4041aa:	9b08      	ldr	r3, [sp, #32]
  4041ac:	3301      	adds	r3, #1
  4041ae:	9308      	str	r3, [sp, #32]
  4041b0:	9b07      	ldr	r3, [sp, #28]
  4041b2:	f013 0302 	ands.w	r3, r3, #2
  4041b6:	930f      	str	r3, [sp, #60]	; 0x3c
  4041b8:	d002      	beq.n	4041c0 <_svfprintf_r+0x3a4>
  4041ba:	9b08      	ldr	r3, [sp, #32]
  4041bc:	3302      	adds	r3, #2
  4041be:	9308      	str	r3, [sp, #32]
  4041c0:	9b07      	ldr	r3, [sp, #28]
  4041c2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4041c6:	9310      	str	r3, [sp, #64]	; 0x40
  4041c8:	f040 82d7 	bne.w	40477a <_svfprintf_r+0x95e>
  4041cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4041ce:	9a08      	ldr	r2, [sp, #32]
  4041d0:	1a9d      	subs	r5, r3, r2
  4041d2:	2d00      	cmp	r5, #0
  4041d4:	f340 82d1 	ble.w	40477a <_svfprintf_r+0x95e>
  4041d8:	2d10      	cmp	r5, #16
  4041da:	9925      	ldr	r1, [sp, #148]	; 0x94
  4041dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4041de:	4f37      	ldr	r7, [pc, #220]	; (4042bc <_svfprintf_r+0x4a0>)
  4041e0:	dd27      	ble.n	404232 <_svfprintf_r+0x416>
  4041e2:	9618      	str	r6, [sp, #96]	; 0x60
  4041e4:	4648      	mov	r0, r9
  4041e6:	2410      	movs	r4, #16
  4041e8:	46b9      	mov	r9, r7
  4041ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4041ec:	462f      	mov	r7, r5
  4041ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4041f0:	e004      	b.n	4041fc <_svfprintf_r+0x3e0>
  4041f2:	3f10      	subs	r7, #16
  4041f4:	2f10      	cmp	r7, #16
  4041f6:	f100 0008 	add.w	r0, r0, #8
  4041fa:	dd16      	ble.n	40422a <_svfprintf_r+0x40e>
  4041fc:	3201      	adds	r2, #1
  4041fe:	4b2f      	ldr	r3, [pc, #188]	; (4042bc <_svfprintf_r+0x4a0>)
  404200:	9224      	str	r2, [sp, #144]	; 0x90
  404202:	3110      	adds	r1, #16
  404204:	2a07      	cmp	r2, #7
  404206:	9125      	str	r1, [sp, #148]	; 0x94
  404208:	e880 0018 	stmia.w	r0, {r3, r4}
  40420c:	ddf1      	ble.n	4041f2 <_svfprintf_r+0x3d6>
  40420e:	aa23      	add	r2, sp, #140	; 0x8c
  404210:	4631      	mov	r1, r6
  404212:	4628      	mov	r0, r5
  404214:	f003 f922 	bl	40745c <__ssprint_r>
  404218:	2800      	cmp	r0, #0
  40421a:	f47f aef8 	bne.w	40400e <_svfprintf_r+0x1f2>
  40421e:	3f10      	subs	r7, #16
  404220:	2f10      	cmp	r7, #16
  404222:	9925      	ldr	r1, [sp, #148]	; 0x94
  404224:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404226:	a830      	add	r0, sp, #192	; 0xc0
  404228:	dce8      	bgt.n	4041fc <_svfprintf_r+0x3e0>
  40422a:	9e18      	ldr	r6, [sp, #96]	; 0x60
  40422c:	463d      	mov	r5, r7
  40422e:	464f      	mov	r7, r9
  404230:	4681      	mov	r9, r0
  404232:	3201      	adds	r2, #1
  404234:	186c      	adds	r4, r5, r1
  404236:	2a07      	cmp	r2, #7
  404238:	9425      	str	r4, [sp, #148]	; 0x94
  40423a:	9224      	str	r2, [sp, #144]	; 0x90
  40423c:	f8c9 7000 	str.w	r7, [r9]
  404240:	f8c9 5004 	str.w	r5, [r9, #4]
  404244:	f300 8428 	bgt.w	404a98 <_svfprintf_r+0xc7c>
  404248:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40424c:	f109 0908 	add.w	r9, r9, #8
  404250:	b177      	cbz	r7, 404270 <_svfprintf_r+0x454>
  404252:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404254:	3301      	adds	r3, #1
  404256:	3401      	adds	r4, #1
  404258:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  40425c:	2201      	movs	r2, #1
  40425e:	2b07      	cmp	r3, #7
  404260:	9425      	str	r4, [sp, #148]	; 0x94
  404262:	9324      	str	r3, [sp, #144]	; 0x90
  404264:	e889 0006 	stmia.w	r9, {r1, r2}
  404268:	f300 83a0 	bgt.w	4049ac <_svfprintf_r+0xb90>
  40426c:	f109 0908 	add.w	r9, r9, #8
  404270:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404272:	b16b      	cbz	r3, 404290 <_svfprintf_r+0x474>
  404274:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404276:	3301      	adds	r3, #1
  404278:	3402      	adds	r4, #2
  40427a:	a91c      	add	r1, sp, #112	; 0x70
  40427c:	2202      	movs	r2, #2
  40427e:	2b07      	cmp	r3, #7
  404280:	9425      	str	r4, [sp, #148]	; 0x94
  404282:	9324      	str	r3, [sp, #144]	; 0x90
  404284:	e889 0006 	stmia.w	r9, {r1, r2}
  404288:	f300 839c 	bgt.w	4049c4 <_svfprintf_r+0xba8>
  40428c:	f109 0908 	add.w	r9, r9, #8
  404290:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404292:	2b80      	cmp	r3, #128	; 0x80
  404294:	f000 82d5 	beq.w	404842 <_svfprintf_r+0xa26>
  404298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40429a:	ebc3 070b 	rsb	r7, r3, fp
  40429e:	2f00      	cmp	r7, #0
  4042a0:	dd39      	ble.n	404316 <_svfprintf_r+0x4fa>
  4042a2:	4a07      	ldr	r2, [pc, #28]	; (4042c0 <_svfprintf_r+0x4a4>)
  4042a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4042a6:	920f      	str	r2, [sp, #60]	; 0x3c
  4042a8:	2f10      	cmp	r7, #16
  4042aa:	dd28      	ble.n	4042fe <_svfprintf_r+0x4e2>
  4042ac:	4622      	mov	r2, r4
  4042ae:	f04f 0b10 	mov.w	fp, #16
  4042b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4042b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4042b6:	e00a      	b.n	4042ce <_svfprintf_r+0x4b2>
  4042b8:	004093d0 	.word	0x004093d0
  4042bc:	004093f0 	.word	0x004093f0
  4042c0:	0040939c 	.word	0x0040939c
  4042c4:	3f10      	subs	r7, #16
  4042c6:	2f10      	cmp	r7, #16
  4042c8:	f109 0908 	add.w	r9, r9, #8
  4042cc:	dd16      	ble.n	4042fc <_svfprintf_r+0x4e0>
  4042ce:	3301      	adds	r3, #1
  4042d0:	3210      	adds	r2, #16
  4042d2:	2b07      	cmp	r3, #7
  4042d4:	9225      	str	r2, [sp, #148]	; 0x94
  4042d6:	9324      	str	r3, [sp, #144]	; 0x90
  4042d8:	e889 0c00 	stmia.w	r9, {sl, fp}
  4042dc:	ddf2      	ble.n	4042c4 <_svfprintf_r+0x4a8>
  4042de:	aa23      	add	r2, sp, #140	; 0x8c
  4042e0:	4621      	mov	r1, r4
  4042e2:	4628      	mov	r0, r5
  4042e4:	f003 f8ba 	bl	40745c <__ssprint_r>
  4042e8:	2800      	cmp	r0, #0
  4042ea:	f47f ae90 	bne.w	40400e <_svfprintf_r+0x1f2>
  4042ee:	3f10      	subs	r7, #16
  4042f0:	2f10      	cmp	r7, #16
  4042f2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4042f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4042f6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4042fa:	dce8      	bgt.n	4042ce <_svfprintf_r+0x4b2>
  4042fc:	4614      	mov	r4, r2
  4042fe:	3301      	adds	r3, #1
  404300:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404302:	9324      	str	r3, [sp, #144]	; 0x90
  404304:	443c      	add	r4, r7
  404306:	2b07      	cmp	r3, #7
  404308:	9425      	str	r4, [sp, #148]	; 0x94
  40430a:	e889 0084 	stmia.w	r9, {r2, r7}
  40430e:	f300 8341 	bgt.w	404994 <_svfprintf_r+0xb78>
  404312:	f109 0908 	add.w	r9, r9, #8
  404316:	9b07      	ldr	r3, [sp, #28]
  404318:	05da      	lsls	r2, r3, #23
  40431a:	f100 8230 	bmi.w	40477e <_svfprintf_r+0x962>
  40431e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404320:	990d      	ldr	r1, [sp, #52]	; 0x34
  404322:	f8c9 6000 	str.w	r6, [r9]
  404326:	3301      	adds	r3, #1
  404328:	440c      	add	r4, r1
  40432a:	2b07      	cmp	r3, #7
  40432c:	9425      	str	r4, [sp, #148]	; 0x94
  40432e:	f8c9 1004 	str.w	r1, [r9, #4]
  404332:	9324      	str	r3, [sp, #144]	; 0x90
  404334:	f300 8318 	bgt.w	404968 <_svfprintf_r+0xb4c>
  404338:	f109 0908 	add.w	r9, r9, #8
  40433c:	9b07      	ldr	r3, [sp, #28]
  40433e:	0759      	lsls	r1, r3, #29
  404340:	d53f      	bpl.n	4043c2 <_svfprintf_r+0x5a6>
  404342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404344:	9a08      	ldr	r2, [sp, #32]
  404346:	1a9d      	subs	r5, r3, r2
  404348:	2d00      	cmp	r5, #0
  40434a:	dd3a      	ble.n	4043c2 <_svfprintf_r+0x5a6>
  40434c:	2d10      	cmp	r5, #16
  40434e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404350:	4fbc      	ldr	r7, [pc, #752]	; (404644 <_svfprintf_r+0x828>)
  404352:	dd23      	ble.n	40439c <_svfprintf_r+0x580>
  404354:	4622      	mov	r2, r4
  404356:	2610      	movs	r6, #16
  404358:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40435c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40435e:	e004      	b.n	40436a <_svfprintf_r+0x54e>
  404360:	3d10      	subs	r5, #16
  404362:	2d10      	cmp	r5, #16
  404364:	f109 0908 	add.w	r9, r9, #8
  404368:	dd17      	ble.n	40439a <_svfprintf_r+0x57e>
  40436a:	3301      	adds	r3, #1
  40436c:	49b5      	ldr	r1, [pc, #724]	; (404644 <_svfprintf_r+0x828>)
  40436e:	9324      	str	r3, [sp, #144]	; 0x90
  404370:	3210      	adds	r2, #16
  404372:	2b07      	cmp	r3, #7
  404374:	9225      	str	r2, [sp, #148]	; 0x94
  404376:	e889 0042 	stmia.w	r9, {r1, r6}
  40437a:	ddf1      	ble.n	404360 <_svfprintf_r+0x544>
  40437c:	aa23      	add	r2, sp, #140	; 0x8c
  40437e:	4621      	mov	r1, r4
  404380:	4658      	mov	r0, fp
  404382:	f003 f86b 	bl	40745c <__ssprint_r>
  404386:	2800      	cmp	r0, #0
  404388:	f47f ae41 	bne.w	40400e <_svfprintf_r+0x1f2>
  40438c:	3d10      	subs	r5, #16
  40438e:	2d10      	cmp	r5, #16
  404390:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404392:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404394:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404398:	dce7      	bgt.n	40436a <_svfprintf_r+0x54e>
  40439a:	4614      	mov	r4, r2
  40439c:	3301      	adds	r3, #1
  40439e:	442c      	add	r4, r5
  4043a0:	2b07      	cmp	r3, #7
  4043a2:	9425      	str	r4, [sp, #148]	; 0x94
  4043a4:	9324      	str	r3, [sp, #144]	; 0x90
  4043a6:	f8c9 7000 	str.w	r7, [r9]
  4043aa:	f8c9 5004 	str.w	r5, [r9, #4]
  4043ae:	dd08      	ble.n	4043c2 <_svfprintf_r+0x5a6>
  4043b0:	aa23      	add	r2, sp, #140	; 0x8c
  4043b2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4043b4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4043b6:	f003 f851 	bl	40745c <__ssprint_r>
  4043ba:	2800      	cmp	r0, #0
  4043bc:	f47f ae27 	bne.w	40400e <_svfprintf_r+0x1f2>
  4043c0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4043c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4043c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4043c6:	9908      	ldr	r1, [sp, #32]
  4043c8:	428a      	cmp	r2, r1
  4043ca:	bfac      	ite	ge
  4043cc:	189b      	addge	r3, r3, r2
  4043ce:	185b      	addlt	r3, r3, r1
  4043d0:	930b      	str	r3, [sp, #44]	; 0x2c
  4043d2:	2c00      	cmp	r4, #0
  4043d4:	f040 82d4 	bne.w	404980 <_svfprintf_r+0xb64>
  4043d8:	2300      	movs	r3, #0
  4043da:	9324      	str	r3, [sp, #144]	; 0x90
  4043dc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4043e0:	e542      	b.n	403e68 <_svfprintf_r+0x4c>
  4043e2:	9311      	str	r3, [sp, #68]	; 0x44
  4043e4:	46ab      	mov	fp, r5
  4043e6:	2a00      	cmp	r2, #0
  4043e8:	f041 8059 	bne.w	40549e <_svfprintf_r+0x1682>
  4043ec:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4043ee:	3707      	adds	r7, #7
  4043f0:	f027 0307 	bic.w	r3, r7, #7
  4043f4:	f103 0208 	add.w	r2, r3, #8
  4043f8:	920e      	str	r2, [sp, #56]	; 0x38
  4043fa:	681a      	ldr	r2, [r3, #0]
  4043fc:	9214      	str	r2, [sp, #80]	; 0x50
  4043fe:	685b      	ldr	r3, [r3, #4]
  404400:	9315      	str	r3, [sp, #84]	; 0x54
  404402:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404404:	9d14      	ldr	r5, [sp, #80]	; 0x50
  404406:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40440a:	4628      	mov	r0, r5
  40440c:	4621      	mov	r1, r4
  40440e:	f04f 32ff 	mov.w	r2, #4294967295
  404412:	4b8d      	ldr	r3, [pc, #564]	; (404648 <_svfprintf_r+0x82c>)
  404414:	f004 f900 	bl	408618 <__aeabi_dcmpun>
  404418:	2800      	cmp	r0, #0
  40441a:	f040 84c1 	bne.w	404da0 <_svfprintf_r+0xf84>
  40441e:	4628      	mov	r0, r5
  404420:	4621      	mov	r1, r4
  404422:	f04f 32ff 	mov.w	r2, #4294967295
  404426:	4b88      	ldr	r3, [pc, #544]	; (404648 <_svfprintf_r+0x82c>)
  404428:	f004 f8d8 	bl	4085dc <__aeabi_dcmple>
  40442c:	2800      	cmp	r0, #0
  40442e:	f040 84b7 	bne.w	404da0 <_svfprintf_r+0xf84>
  404432:	9814      	ldr	r0, [sp, #80]	; 0x50
  404434:	9915      	ldr	r1, [sp, #84]	; 0x54
  404436:	2200      	movs	r2, #0
  404438:	2300      	movs	r3, #0
  40443a:	f004 f8c5 	bl	4085c8 <__aeabi_dcmplt>
  40443e:	2800      	cmp	r0, #0
  404440:	f040 874b 	bne.w	4052da <_svfprintf_r+0x14be>
  404444:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404448:	4e80      	ldr	r6, [pc, #512]	; (40464c <_svfprintf_r+0x830>)
  40444a:	4b81      	ldr	r3, [pc, #516]	; (404650 <_svfprintf_r+0x834>)
  40444c:	9907      	ldr	r1, [sp, #28]
  40444e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  404452:	9107      	str	r1, [sp, #28]
  404454:	9911      	ldr	r1, [sp, #68]	; 0x44
  404456:	2203      	movs	r2, #3
  404458:	f04f 0b00 	mov.w	fp, #0
  40445c:	9208      	str	r2, [sp, #32]
  40445e:	2947      	cmp	r1, #71	; 0x47
  404460:	bfd8      	it	le
  404462:	461e      	movle	r6, r3
  404464:	920d      	str	r2, [sp, #52]	; 0x34
  404466:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  40446a:	e69d      	b.n	4041a8 <_svfprintf_r+0x38c>
  40446c:	9b07      	ldr	r3, [sp, #28]
  40446e:	f043 0308 	orr.w	r3, r3, #8
  404472:	9307      	str	r3, [sp, #28]
  404474:	f898 3000 	ldrb.w	r3, [r8]
  404478:	e529      	b.n	403ece <_svfprintf_r+0xb2>
  40447a:	9311      	str	r3, [sp, #68]	; 0x44
  40447c:	46ab      	mov	fp, r5
  40447e:	2a00      	cmp	r2, #0
  404480:	f041 8009 	bne.w	405496 <_svfprintf_r+0x167a>
  404484:	9b07      	ldr	r3, [sp, #28]
  404486:	f043 0310 	orr.w	r3, r3, #16
  40448a:	9307      	str	r3, [sp, #28]
  40448c:	9a07      	ldr	r2, [sp, #28]
  40448e:	f012 0320 	ands.w	r3, r2, #32
  404492:	f47f add2 	bne.w	40403a <_svfprintf_r+0x21e>
  404496:	9907      	ldr	r1, [sp, #28]
  404498:	f011 0210 	ands.w	r2, r1, #16
  40449c:	f000 8507 	beq.w	404eae <_svfprintf_r+0x1092>
  4044a0:	980e      	ldr	r0, [sp, #56]	; 0x38
  4044a2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4044a6:	f1bb 0f00 	cmp.w	fp, #0
  4044aa:	6804      	ldr	r4, [r0, #0]
  4044ac:	f100 0704 	add.w	r7, r0, #4
  4044b0:	f04f 0500 	mov.w	r5, #0
  4044b4:	f2c0 8521 	blt.w	404efa <_svfprintf_r+0x10de>
  4044b8:	460a      	mov	r2, r1
  4044ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4044be:	9207      	str	r2, [sp, #28]
  4044c0:	ea54 0205 	orrs.w	r2, r4, r5
  4044c4:	970e      	str	r7, [sp, #56]	; 0x38
  4044c6:	f000 8143 	beq.w	404750 <_svfprintf_r+0x934>
  4044ca:	461f      	mov	r7, r3
  4044cc:	e5cb      	b.n	404066 <_svfprintf_r+0x24a>
  4044ce:	9311      	str	r3, [sp, #68]	; 0x44
  4044d0:	46ab      	mov	fp, r5
  4044d2:	2a00      	cmp	r2, #0
  4044d4:	f040 87d7 	bne.w	405486 <_svfprintf_r+0x166a>
  4044d8:	9b07      	ldr	r3, [sp, #28]
  4044da:	f043 0310 	orr.w	r3, r3, #16
  4044de:	9307      	str	r3, [sp, #28]
  4044e0:	9a07      	ldr	r2, [sp, #28]
  4044e2:	f012 0320 	ands.w	r3, r2, #32
  4044e6:	f000 8332 	beq.w	404b4e <_svfprintf_r+0xd32>
  4044ea:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4044ec:	3707      	adds	r7, #7
  4044ee:	f027 0307 	bic.w	r3, r7, #7
  4044f2:	2700      	movs	r7, #0
  4044f4:	f103 0108 	add.w	r1, r3, #8
  4044f8:	45bb      	cmp	fp, r7
  4044fa:	910e      	str	r1, [sp, #56]	; 0x38
  4044fc:	e9d3 4500 	ldrd	r4, r5, [r3]
  404500:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404504:	f2c0 835c 	blt.w	404bc0 <_svfprintf_r+0xda4>
  404508:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40450c:	9307      	str	r3, [sp, #28]
  40450e:	ea54 0305 	orrs.w	r3, r4, r5
  404512:	f47f ae25 	bne.w	404160 <_svfprintf_r+0x344>
  404516:	f1bb 0f00 	cmp.w	fp, #0
  40451a:	f000 80fe 	beq.w	40471a <_svfprintf_r+0x8fe>
  40451e:	2400      	movs	r4, #0
  404520:	ae40      	add	r6, sp, #256	; 0x100
  404522:	3430      	adds	r4, #48	; 0x30
  404524:	f806 4d41 	strb.w	r4, [r6, #-65]!
  404528:	e634      	b.n	404194 <_svfprintf_r+0x378>
  40452a:	9311      	str	r3, [sp, #68]	; 0x44
  40452c:	46ab      	mov	fp, r5
  40452e:	2a00      	cmp	r2, #0
  404530:	f040 87a5 	bne.w	40547e <_svfprintf_r+0x1662>
  404534:	9b07      	ldr	r3, [sp, #28]
  404536:	4847      	ldr	r0, [pc, #284]	; (404654 <_svfprintf_r+0x838>)
  404538:	069d      	lsls	r5, r3, #26
  40453a:	f140 8097 	bpl.w	40466c <_svfprintf_r+0x850>
  40453e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404540:	3707      	adds	r7, #7
  404542:	f027 0307 	bic.w	r3, r7, #7
  404546:	e9d3 4500 	ldrd	r4, r5, [r3]
  40454a:	f103 0208 	add.w	r2, r3, #8
  40454e:	920e      	str	r2, [sp, #56]	; 0x38
  404550:	9a07      	ldr	r2, [sp, #28]
  404552:	f012 0701 	ands.w	r7, r2, #1
  404556:	f000 8241 	beq.w	4049dc <_svfprintf_r+0xbc0>
  40455a:	ea54 0305 	orrs.w	r3, r4, r5
  40455e:	f000 84f5 	beq.w	404f4c <_svfprintf_r+0x1130>
  404562:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404566:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  40456a:	2700      	movs	r7, #0
  40456c:	9a07      	ldr	r2, [sp, #28]
  40456e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404572:	2330      	movs	r3, #48	; 0x30
  404574:	45bb      	cmp	fp, r7
  404576:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40457a:	f042 0302 	orr.w	r3, r2, #2
  40457e:	f2c0 86a9 	blt.w	4052d4 <_svfprintf_r+0x14b8>
  404582:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  404586:	f043 0302 	orr.w	r3, r3, #2
  40458a:	9307      	str	r3, [sp, #28]
  40458c:	ae30      	add	r6, sp, #192	; 0xc0
  40458e:	0923      	lsrs	r3, r4, #4
  404590:	f004 010f 	and.w	r1, r4, #15
  404594:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404598:	092a      	lsrs	r2, r5, #4
  40459a:	461c      	mov	r4, r3
  40459c:	4615      	mov	r5, r2
  40459e:	5c43      	ldrb	r3, [r0, r1]
  4045a0:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4045a4:	ea54 0305 	orrs.w	r3, r4, r5
  4045a8:	d1f1      	bne.n	40458e <_svfprintf_r+0x772>
  4045aa:	e5f3      	b.n	404194 <_svfprintf_r+0x378>
  4045ac:	990e      	ldr	r1, [sp, #56]	; 0x38
  4045ae:	9311      	str	r3, [sp, #68]	; 0x44
  4045b0:	680a      	ldr	r2, [r1, #0]
  4045b2:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  4045b6:	2300      	movs	r3, #0
  4045b8:	460a      	mov	r2, r1
  4045ba:	461f      	mov	r7, r3
  4045bc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4045c0:	3204      	adds	r2, #4
  4045c2:	2301      	movs	r3, #1
  4045c4:	9308      	str	r3, [sp, #32]
  4045c6:	46bb      	mov	fp, r7
  4045c8:	9713      	str	r7, [sp, #76]	; 0x4c
  4045ca:	920e      	str	r2, [sp, #56]	; 0x38
  4045cc:	930d      	str	r3, [sp, #52]	; 0x34
  4045ce:	ae26      	add	r6, sp, #152	; 0x98
  4045d0:	e5ee      	b.n	4041b0 <_svfprintf_r+0x394>
  4045d2:	9311      	str	r3, [sp, #68]	; 0x44
  4045d4:	46ab      	mov	fp, r5
  4045d6:	2a00      	cmp	r2, #0
  4045d8:	f43f ada0 	beq.w	40411c <_svfprintf_r+0x300>
  4045dc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4045e0:	e59c      	b.n	40411c <_svfprintf_r+0x300>
  4045e2:	9b07      	ldr	r3, [sp, #28]
  4045e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4045e8:	9307      	str	r3, [sp, #28]
  4045ea:	f898 3000 	ldrb.w	r3, [r8]
  4045ee:	e46e      	b.n	403ece <_svfprintf_r+0xb2>
  4045f0:	f898 3000 	ldrb.w	r3, [r8]
  4045f4:	2900      	cmp	r1, #0
  4045f6:	f47f ac6a 	bne.w	403ece <_svfprintf_r+0xb2>
  4045fa:	2201      	movs	r2, #1
  4045fc:	2120      	movs	r1, #32
  4045fe:	e466      	b.n	403ece <_svfprintf_r+0xb2>
  404600:	9b07      	ldr	r3, [sp, #28]
  404602:	f043 0301 	orr.w	r3, r3, #1
  404606:	9307      	str	r3, [sp, #28]
  404608:	f898 3000 	ldrb.w	r3, [r8]
  40460c:	e45f      	b.n	403ece <_svfprintf_r+0xb2>
  40460e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  404610:	6823      	ldr	r3, [r4, #0]
  404612:	930c      	str	r3, [sp, #48]	; 0x30
  404614:	4618      	mov	r0, r3
  404616:	2800      	cmp	r0, #0
  404618:	4623      	mov	r3, r4
  40461a:	f103 0304 	add.w	r3, r3, #4
  40461e:	f6ff acb8 	blt.w	403f92 <_svfprintf_r+0x176>
  404622:	930e      	str	r3, [sp, #56]	; 0x38
  404624:	f898 3000 	ldrb.w	r3, [r8]
  404628:	e451      	b.n	403ece <_svfprintf_r+0xb2>
  40462a:	f898 3000 	ldrb.w	r3, [r8]
  40462e:	2201      	movs	r2, #1
  404630:	212b      	movs	r1, #43	; 0x2b
  404632:	e44c      	b.n	403ece <_svfprintf_r+0xb2>
  404634:	9311      	str	r3, [sp, #68]	; 0x44
  404636:	46ab      	mov	fp, r5
  404638:	2a00      	cmp	r2, #0
  40463a:	f43f af51 	beq.w	4044e0 <_svfprintf_r+0x6c4>
  40463e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404642:	e74d      	b.n	4044e0 <_svfprintf_r+0x6c4>
  404644:	004093f0 	.word	0x004093f0
  404648:	7fefffff 	.word	0x7fefffff
  40464c:	004093b0 	.word	0x004093b0
  404650:	004093ac 	.word	0x004093ac
  404654:	004093bc 	.word	0x004093bc
  404658:	9311      	str	r3, [sp, #68]	; 0x44
  40465a:	46ab      	mov	fp, r5
  40465c:	2a00      	cmp	r2, #0
  40465e:	f040 8703 	bne.w	405468 <_svfprintf_r+0x164c>
  404662:	9b07      	ldr	r3, [sp, #28]
  404664:	4899      	ldr	r0, [pc, #612]	; (4048cc <_svfprintf_r+0xab0>)
  404666:	069d      	lsls	r5, r3, #26
  404668:	f53f af69 	bmi.w	40453e <_svfprintf_r+0x722>
  40466c:	9b07      	ldr	r3, [sp, #28]
  40466e:	06dc      	lsls	r4, r3, #27
  404670:	f140 845e 	bpl.w	404f30 <_svfprintf_r+0x1114>
  404674:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404676:	4613      	mov	r3, r2
  404678:	3304      	adds	r3, #4
  40467a:	6814      	ldr	r4, [r2, #0]
  40467c:	930e      	str	r3, [sp, #56]	; 0x38
  40467e:	2500      	movs	r5, #0
  404680:	e766      	b.n	404550 <_svfprintf_r+0x734>
  404682:	f898 3000 	ldrb.w	r3, [r8]
  404686:	2b6c      	cmp	r3, #108	; 0x6c
  404688:	f000 84e1 	beq.w	40504e <_svfprintf_r+0x1232>
  40468c:	9807      	ldr	r0, [sp, #28]
  40468e:	f040 0010 	orr.w	r0, r0, #16
  404692:	9007      	str	r0, [sp, #28]
  404694:	e41b      	b.n	403ece <_svfprintf_r+0xb2>
  404696:	2a00      	cmp	r2, #0
  404698:	f040 86db 	bne.w	405452 <_svfprintf_r+0x1636>
  40469c:	9b07      	ldr	r3, [sp, #28]
  40469e:	069b      	lsls	r3, r3, #26
  4046a0:	f140 842f 	bpl.w	404f02 <_svfprintf_r+0x10e6>
  4046a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4046a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4046a8:	6813      	ldr	r3, [r2, #0]
  4046aa:	17cd      	asrs	r5, r1, #31
  4046ac:	4608      	mov	r0, r1
  4046ae:	3204      	adds	r2, #4
  4046b0:	4629      	mov	r1, r5
  4046b2:	920e      	str	r2, [sp, #56]	; 0x38
  4046b4:	e9c3 0100 	strd	r0, r1, [r3]
  4046b8:	f7ff bbd6 	b.w	403e68 <_svfprintf_r+0x4c>
  4046bc:	9b07      	ldr	r3, [sp, #28]
  4046be:	f043 0320 	orr.w	r3, r3, #32
  4046c2:	9307      	str	r3, [sp, #28]
  4046c4:	f898 3000 	ldrb.w	r3, [r8]
  4046c8:	e401      	b.n	403ece <_svfprintf_r+0xb2>
  4046ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4046cc:	9311      	str	r3, [sp, #68]	; 0x44
  4046ce:	6816      	ldr	r6, [r2, #0]
  4046d0:	2400      	movs	r4, #0
  4046d2:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  4046d6:	1d17      	adds	r7, r2, #4
  4046d8:	2e00      	cmp	r6, #0
  4046da:	f000 85bd 	beq.w	405258 <_svfprintf_r+0x143c>
  4046de:	2d00      	cmp	r5, #0
  4046e0:	f2c0 850f 	blt.w	405102 <_svfprintf_r+0x12e6>
  4046e4:	462a      	mov	r2, r5
  4046e6:	4621      	mov	r1, r4
  4046e8:	4630      	mov	r0, r6
  4046ea:	f002 f989 	bl	406a00 <memchr>
  4046ee:	2800      	cmp	r0, #0
  4046f0:	f000 8604 	beq.w	4052fc <_svfprintf_r+0x14e0>
  4046f4:	1b83      	subs	r3, r0, r6
  4046f6:	930d      	str	r3, [sp, #52]	; 0x34
  4046f8:	46a3      	mov	fp, r4
  4046fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4046fe:	970e      	str	r7, [sp, #56]	; 0x38
  404700:	9308      	str	r3, [sp, #32]
  404702:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  404706:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40470a:	e54d      	b.n	4041a8 <_svfprintf_r+0x38c>
  40470c:	486f      	ldr	r0, [pc, #444]	; (4048cc <_svfprintf_r+0xab0>)
  40470e:	9211      	str	r2, [sp, #68]	; 0x44
  404710:	f1bb 0f00 	cmp.w	fp, #0
  404714:	f040 8173 	bne.w	4049fe <_svfprintf_r+0xbe2>
  404718:	465f      	mov	r7, fp
  40471a:	f04f 0b00 	mov.w	fp, #0
  40471e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  404722:	ae30      	add	r6, sp, #192	; 0xc0
  404724:	e539      	b.n	40419a <_svfprintf_r+0x37e>
  404726:	9311      	str	r3, [sp, #68]	; 0x44
  404728:	2a00      	cmp	r2, #0
  40472a:	f040 86b0 	bne.w	40548e <_svfprintf_r+0x1672>
  40472e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404730:	2a00      	cmp	r2, #0
  404732:	f43f ac65 	beq.w	404000 <_svfprintf_r+0x1e4>
  404736:	2300      	movs	r3, #0
  404738:	2101      	movs	r1, #1
  40473a:	461f      	mov	r7, r3
  40473c:	9108      	str	r1, [sp, #32]
  40473e:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  404742:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404746:	469b      	mov	fp, r3
  404748:	9313      	str	r3, [sp, #76]	; 0x4c
  40474a:	910d      	str	r1, [sp, #52]	; 0x34
  40474c:	ae26      	add	r6, sp, #152	; 0x98
  40474e:	e52f      	b.n	4041b0 <_svfprintf_r+0x394>
  404750:	f1bb 0f00 	cmp.w	fp, #0
  404754:	f000 85dd 	beq.w	405312 <_svfprintf_r+0x14f6>
  404758:	2700      	movs	r7, #0
  40475a:	2400      	movs	r4, #0
  40475c:	2500      	movs	r5, #0
  40475e:	e482      	b.n	404066 <_svfprintf_r+0x24a>
  404760:	485a      	ldr	r0, [pc, #360]	; (4048cc <_svfprintf_r+0xab0>)
  404762:	9307      	str	r3, [sp, #28]
  404764:	9211      	str	r2, [sp, #68]	; 0x44
  404766:	ea54 0305 	orrs.w	r3, r4, r5
  40476a:	970e      	str	r7, [sp, #56]	; 0x38
  40476c:	f04f 0700 	mov.w	r7, #0
  404770:	f47f af0c 	bne.w	40458c <_svfprintf_r+0x770>
  404774:	2400      	movs	r4, #0
  404776:	2500      	movs	r5, #0
  404778:	e708      	b.n	40458c <_svfprintf_r+0x770>
  40477a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40477c:	e568      	b.n	404250 <_svfprintf_r+0x434>
  40477e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404780:	2b65      	cmp	r3, #101	; 0x65
  404782:	f340 80a9 	ble.w	4048d8 <_svfprintf_r+0xabc>
  404786:	9814      	ldr	r0, [sp, #80]	; 0x50
  404788:	9915      	ldr	r1, [sp, #84]	; 0x54
  40478a:	2200      	movs	r2, #0
  40478c:	2300      	movs	r3, #0
  40478e:	f003 ff11 	bl	4085b4 <__aeabi_dcmpeq>
  404792:	2800      	cmp	r0, #0
  404794:	f000 8135 	beq.w	404a02 <_svfprintf_r+0xbe6>
  404798:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40479a:	4a4d      	ldr	r2, [pc, #308]	; (4048d0 <_svfprintf_r+0xab4>)
  40479c:	f8c9 2000 	str.w	r2, [r9]
  4047a0:	3301      	adds	r3, #1
  4047a2:	3401      	adds	r4, #1
  4047a4:	2201      	movs	r2, #1
  4047a6:	2b07      	cmp	r3, #7
  4047a8:	9425      	str	r4, [sp, #148]	; 0x94
  4047aa:	9324      	str	r3, [sp, #144]	; 0x90
  4047ac:	f8c9 2004 	str.w	r2, [r9, #4]
  4047b0:	f300 83e6 	bgt.w	404f80 <_svfprintf_r+0x1164>
  4047b4:	f109 0908 	add.w	r9, r9, #8
  4047b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4047ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4047bc:	4293      	cmp	r3, r2
  4047be:	db03      	blt.n	4047c8 <_svfprintf_r+0x9ac>
  4047c0:	9b07      	ldr	r3, [sp, #28]
  4047c2:	07db      	lsls	r3, r3, #31
  4047c4:	f57f adba 	bpl.w	40433c <_svfprintf_r+0x520>
  4047c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4047ca:	9916      	ldr	r1, [sp, #88]	; 0x58
  4047cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  4047ce:	f8c9 2000 	str.w	r2, [r9]
  4047d2:	3301      	adds	r3, #1
  4047d4:	440c      	add	r4, r1
  4047d6:	2b07      	cmp	r3, #7
  4047d8:	9425      	str	r4, [sp, #148]	; 0x94
  4047da:	f8c9 1004 	str.w	r1, [r9, #4]
  4047de:	9324      	str	r3, [sp, #144]	; 0x90
  4047e0:	f300 843f 	bgt.w	405062 <_svfprintf_r+0x1246>
  4047e4:	f109 0908 	add.w	r9, r9, #8
  4047e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4047ea:	1e5d      	subs	r5, r3, #1
  4047ec:	2d00      	cmp	r5, #0
  4047ee:	f77f ada5 	ble.w	40433c <_svfprintf_r+0x520>
  4047f2:	4a38      	ldr	r2, [pc, #224]	; (4048d4 <_svfprintf_r+0xab8>)
  4047f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4047f6:	920f      	str	r2, [sp, #60]	; 0x3c
  4047f8:	2d10      	cmp	r5, #16
  4047fa:	f340 81e6 	ble.w	404bca <_svfprintf_r+0xdae>
  4047fe:	2610      	movs	r6, #16
  404800:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404802:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  404806:	e005      	b.n	404814 <_svfprintf_r+0x9f8>
  404808:	f109 0908 	add.w	r9, r9, #8
  40480c:	3d10      	subs	r5, #16
  40480e:	2d10      	cmp	r5, #16
  404810:	f340 81db 	ble.w	404bca <_svfprintf_r+0xdae>
  404814:	3301      	adds	r3, #1
  404816:	3410      	adds	r4, #16
  404818:	2b07      	cmp	r3, #7
  40481a:	9425      	str	r4, [sp, #148]	; 0x94
  40481c:	9324      	str	r3, [sp, #144]	; 0x90
  40481e:	f8c9 a000 	str.w	sl, [r9]
  404822:	f8c9 6004 	str.w	r6, [r9, #4]
  404826:	ddef      	ble.n	404808 <_svfprintf_r+0x9ec>
  404828:	aa23      	add	r2, sp, #140	; 0x8c
  40482a:	4659      	mov	r1, fp
  40482c:	4638      	mov	r0, r7
  40482e:	f002 fe15 	bl	40745c <__ssprint_r>
  404832:	2800      	cmp	r0, #0
  404834:	f47f abeb 	bne.w	40400e <_svfprintf_r+0x1f2>
  404838:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40483a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40483c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404840:	e7e4      	b.n	40480c <_svfprintf_r+0x9f0>
  404842:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404844:	9a08      	ldr	r2, [sp, #32]
  404846:	1a9f      	subs	r7, r3, r2
  404848:	2f00      	cmp	r7, #0
  40484a:	f77f ad25 	ble.w	404298 <_svfprintf_r+0x47c>
  40484e:	4a21      	ldr	r2, [pc, #132]	; (4048d4 <_svfprintf_r+0xab8>)
  404850:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404852:	920f      	str	r2, [sp, #60]	; 0x3c
  404854:	2f10      	cmp	r7, #16
  404856:	dd2b      	ble.n	4048b0 <_svfprintf_r+0xa94>
  404858:	464a      	mov	r2, r9
  40485a:	4621      	mov	r1, r4
  40485c:	46b9      	mov	r9, r7
  40485e:	2510      	movs	r5, #16
  404860:	4637      	mov	r7, r6
  404862:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404864:	9e09      	ldr	r6, [sp, #36]	; 0x24
  404866:	e006      	b.n	404876 <_svfprintf_r+0xa5a>
  404868:	f1a9 0910 	sub.w	r9, r9, #16
  40486c:	f1b9 0f10 	cmp.w	r9, #16
  404870:	f102 0208 	add.w	r2, r2, #8
  404874:	dd18      	ble.n	4048a8 <_svfprintf_r+0xa8c>
  404876:	3301      	adds	r3, #1
  404878:	3110      	adds	r1, #16
  40487a:	2b07      	cmp	r3, #7
  40487c:	9125      	str	r1, [sp, #148]	; 0x94
  40487e:	9324      	str	r3, [sp, #144]	; 0x90
  404880:	f8c2 a000 	str.w	sl, [r2]
  404884:	6055      	str	r5, [r2, #4]
  404886:	ddef      	ble.n	404868 <_svfprintf_r+0xa4c>
  404888:	aa23      	add	r2, sp, #140	; 0x8c
  40488a:	4631      	mov	r1, r6
  40488c:	4620      	mov	r0, r4
  40488e:	f002 fde5 	bl	40745c <__ssprint_r>
  404892:	2800      	cmp	r0, #0
  404894:	f47f abbb 	bne.w	40400e <_svfprintf_r+0x1f2>
  404898:	f1a9 0910 	sub.w	r9, r9, #16
  40489c:	f1b9 0f10 	cmp.w	r9, #16
  4048a0:	9925      	ldr	r1, [sp, #148]	; 0x94
  4048a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4048a4:	aa30      	add	r2, sp, #192	; 0xc0
  4048a6:	dce6      	bgt.n	404876 <_svfprintf_r+0xa5a>
  4048a8:	463e      	mov	r6, r7
  4048aa:	460c      	mov	r4, r1
  4048ac:	464f      	mov	r7, r9
  4048ae:	4691      	mov	r9, r2
  4048b0:	3301      	adds	r3, #1
  4048b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4048b4:	9324      	str	r3, [sp, #144]	; 0x90
  4048b6:	443c      	add	r4, r7
  4048b8:	2b07      	cmp	r3, #7
  4048ba:	9425      	str	r4, [sp, #148]	; 0x94
  4048bc:	e889 0084 	stmia.w	r9, {r2, r7}
  4048c0:	f300 8245 	bgt.w	404d4e <_svfprintf_r+0xf32>
  4048c4:	f109 0908 	add.w	r9, r9, #8
  4048c8:	e4e6      	b.n	404298 <_svfprintf_r+0x47c>
  4048ca:	bf00      	nop
  4048cc:	004093d0 	.word	0x004093d0
  4048d0:	004093ec 	.word	0x004093ec
  4048d4:	0040939c 	.word	0x0040939c
  4048d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4048da:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4048dc:	2b01      	cmp	r3, #1
  4048de:	f340 8208 	ble.w	404cf2 <_svfprintf_r+0xed6>
  4048e2:	3501      	adds	r5, #1
  4048e4:	3401      	adds	r4, #1
  4048e6:	2301      	movs	r3, #1
  4048e8:	2d07      	cmp	r5, #7
  4048ea:	9425      	str	r4, [sp, #148]	; 0x94
  4048ec:	9524      	str	r5, [sp, #144]	; 0x90
  4048ee:	f8c9 6000 	str.w	r6, [r9]
  4048f2:	f8c9 3004 	str.w	r3, [r9, #4]
  4048f6:	f300 820d 	bgt.w	404d14 <_svfprintf_r+0xef8>
  4048fa:	f109 0908 	add.w	r9, r9, #8
  4048fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404902:	f8c9 3000 	str.w	r3, [r9]
  404906:	3501      	adds	r5, #1
  404908:	4414      	add	r4, r2
  40490a:	2d07      	cmp	r5, #7
  40490c:	9425      	str	r4, [sp, #148]	; 0x94
  40490e:	9524      	str	r5, [sp, #144]	; 0x90
  404910:	f8c9 2004 	str.w	r2, [r9, #4]
  404914:	f300 820e 	bgt.w	404d34 <_svfprintf_r+0xf18>
  404918:	f109 0908 	add.w	r9, r9, #8
  40491c:	2300      	movs	r3, #0
  40491e:	9814      	ldr	r0, [sp, #80]	; 0x50
  404920:	9915      	ldr	r1, [sp, #84]	; 0x54
  404922:	2200      	movs	r2, #0
  404924:	f003 fe46 	bl	4085b4 <__aeabi_dcmpeq>
  404928:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40492a:	2800      	cmp	r0, #0
  40492c:	f040 80c3 	bne.w	404ab6 <_svfprintf_r+0xc9a>
  404930:	3b01      	subs	r3, #1
  404932:	3501      	adds	r5, #1
  404934:	3601      	adds	r6, #1
  404936:	441c      	add	r4, r3
  404938:	2d07      	cmp	r5, #7
  40493a:	9524      	str	r5, [sp, #144]	; 0x90
  40493c:	9425      	str	r4, [sp, #148]	; 0x94
  40493e:	f8c9 6000 	str.w	r6, [r9]
  404942:	f8c9 3004 	str.w	r3, [r9, #4]
  404946:	f300 80f5 	bgt.w	404b34 <_svfprintf_r+0xd18>
  40494a:	f109 0908 	add.w	r9, r9, #8
  40494e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404950:	f8c9 2004 	str.w	r2, [r9, #4]
  404954:	3501      	adds	r5, #1
  404956:	4414      	add	r4, r2
  404958:	ab1f      	add	r3, sp, #124	; 0x7c
  40495a:	2d07      	cmp	r5, #7
  40495c:	9425      	str	r4, [sp, #148]	; 0x94
  40495e:	9524      	str	r5, [sp, #144]	; 0x90
  404960:	f8c9 3000 	str.w	r3, [r9]
  404964:	f77f ace8 	ble.w	404338 <_svfprintf_r+0x51c>
  404968:	aa23      	add	r2, sp, #140	; 0x8c
  40496a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40496c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40496e:	f002 fd75 	bl	40745c <__ssprint_r>
  404972:	2800      	cmp	r0, #0
  404974:	f47f ab4b 	bne.w	40400e <_svfprintf_r+0x1f2>
  404978:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40497a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40497e:	e4dd      	b.n	40433c <_svfprintf_r+0x520>
  404980:	aa23      	add	r2, sp, #140	; 0x8c
  404982:	9909      	ldr	r1, [sp, #36]	; 0x24
  404984:	980a      	ldr	r0, [sp, #40]	; 0x28
  404986:	f002 fd69 	bl	40745c <__ssprint_r>
  40498a:	2800      	cmp	r0, #0
  40498c:	f43f ad24 	beq.w	4043d8 <_svfprintf_r+0x5bc>
  404990:	f7ff bb3d 	b.w	40400e <_svfprintf_r+0x1f2>
  404994:	aa23      	add	r2, sp, #140	; 0x8c
  404996:	9909      	ldr	r1, [sp, #36]	; 0x24
  404998:	980a      	ldr	r0, [sp, #40]	; 0x28
  40499a:	f002 fd5f 	bl	40745c <__ssprint_r>
  40499e:	2800      	cmp	r0, #0
  4049a0:	f47f ab35 	bne.w	40400e <_svfprintf_r+0x1f2>
  4049a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4049a6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4049aa:	e4b4      	b.n	404316 <_svfprintf_r+0x4fa>
  4049ac:	aa23      	add	r2, sp, #140	; 0x8c
  4049ae:	9909      	ldr	r1, [sp, #36]	; 0x24
  4049b0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4049b2:	f002 fd53 	bl	40745c <__ssprint_r>
  4049b6:	2800      	cmp	r0, #0
  4049b8:	f47f ab29 	bne.w	40400e <_svfprintf_r+0x1f2>
  4049bc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4049be:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4049c2:	e455      	b.n	404270 <_svfprintf_r+0x454>
  4049c4:	aa23      	add	r2, sp, #140	; 0x8c
  4049c6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4049c8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4049ca:	f002 fd47 	bl	40745c <__ssprint_r>
  4049ce:	2800      	cmp	r0, #0
  4049d0:	f47f ab1d 	bne.w	40400e <_svfprintf_r+0x1f2>
  4049d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4049d6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4049da:	e459      	b.n	404290 <_svfprintf_r+0x474>
  4049dc:	f1bb 0f00 	cmp.w	fp, #0
  4049e0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4049e4:	f2c0 82d8 	blt.w	404f98 <_svfprintf_r+0x117c>
  4049e8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  4049ec:	9307      	str	r3, [sp, #28]
  4049ee:	ea54 0305 	orrs.w	r3, r4, r5
  4049f2:	f47f adcb 	bne.w	40458c <_svfprintf_r+0x770>
  4049f6:	f1bb 0f00 	cmp.w	fp, #0
  4049fa:	f43f ae8d 	beq.w	404718 <_svfprintf_r+0x8fc>
  4049fe:	2700      	movs	r7, #0
  404a00:	e6b8      	b.n	404774 <_svfprintf_r+0x958>
  404a02:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  404a04:	2d00      	cmp	r5, #0
  404a06:	f340 82ca 	ble.w	404f9e <_svfprintf_r+0x1182>
  404a0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404a0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404a0e:	4293      	cmp	r3, r2
  404a10:	bfa8      	it	ge
  404a12:	4613      	movge	r3, r2
  404a14:	2b00      	cmp	r3, #0
  404a16:	461d      	mov	r5, r3
  404a18:	dd0d      	ble.n	404a36 <_svfprintf_r+0xc1a>
  404a1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a1c:	f8c9 6000 	str.w	r6, [r9]
  404a20:	3301      	adds	r3, #1
  404a22:	442c      	add	r4, r5
  404a24:	2b07      	cmp	r3, #7
  404a26:	9425      	str	r4, [sp, #148]	; 0x94
  404a28:	f8c9 5004 	str.w	r5, [r9, #4]
  404a2c:	9324      	str	r3, [sp, #144]	; 0x90
  404a2e:	f300 839c 	bgt.w	40516a <_svfprintf_r+0x134e>
  404a32:	f109 0908 	add.w	r9, r9, #8
  404a36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404a38:	2d00      	cmp	r5, #0
  404a3a:	bfa8      	it	ge
  404a3c:	1b5b      	subge	r3, r3, r5
  404a3e:	2b00      	cmp	r3, #0
  404a40:	461d      	mov	r5, r3
  404a42:	f340 80f6 	ble.w	404c32 <_svfprintf_r+0xe16>
  404a46:	4aba      	ldr	r2, [pc, #744]	; (404d30 <_svfprintf_r+0xf14>)
  404a48:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a4a:	920f      	str	r2, [sp, #60]	; 0x3c
  404a4c:	2d10      	cmp	r5, #16
  404a4e:	f340 828a 	ble.w	404f66 <_svfprintf_r+0x114a>
  404a52:	4622      	mov	r2, r4
  404a54:	2710      	movs	r7, #16
  404a56:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404a5a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404a5c:	e005      	b.n	404a6a <_svfprintf_r+0xc4e>
  404a5e:	f109 0908 	add.w	r9, r9, #8
  404a62:	3d10      	subs	r5, #16
  404a64:	2d10      	cmp	r5, #16
  404a66:	f340 827d 	ble.w	404f64 <_svfprintf_r+0x1148>
  404a6a:	3301      	adds	r3, #1
  404a6c:	3210      	adds	r2, #16
  404a6e:	2b07      	cmp	r3, #7
  404a70:	9225      	str	r2, [sp, #148]	; 0x94
  404a72:	9324      	str	r3, [sp, #144]	; 0x90
  404a74:	f8c9 a000 	str.w	sl, [r9]
  404a78:	f8c9 7004 	str.w	r7, [r9, #4]
  404a7c:	ddef      	ble.n	404a5e <_svfprintf_r+0xc42>
  404a7e:	aa23      	add	r2, sp, #140	; 0x8c
  404a80:	4621      	mov	r1, r4
  404a82:	4658      	mov	r0, fp
  404a84:	f002 fcea 	bl	40745c <__ssprint_r>
  404a88:	2800      	cmp	r0, #0
  404a8a:	f47f aac0 	bne.w	40400e <_svfprintf_r+0x1f2>
  404a8e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404a90:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a92:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404a96:	e7e4      	b.n	404a62 <_svfprintf_r+0xc46>
  404a98:	aa23      	add	r2, sp, #140	; 0x8c
  404a9a:	9909      	ldr	r1, [sp, #36]	; 0x24
  404a9c:	980a      	ldr	r0, [sp, #40]	; 0x28
  404a9e:	f002 fcdd 	bl	40745c <__ssprint_r>
  404aa2:	2800      	cmp	r0, #0
  404aa4:	f47f aab3 	bne.w	40400e <_svfprintf_r+0x1f2>
  404aa8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404aac:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404aae:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404ab2:	f7ff bbcd 	b.w	404250 <_svfprintf_r+0x434>
  404ab6:	1e5e      	subs	r6, r3, #1
  404ab8:	2e00      	cmp	r6, #0
  404aba:	f77f af48 	ble.w	40494e <_svfprintf_r+0xb32>
  404abe:	4b9c      	ldr	r3, [pc, #624]	; (404d30 <_svfprintf_r+0xf14>)
  404ac0:	930f      	str	r3, [sp, #60]	; 0x3c
  404ac2:	2e10      	cmp	r6, #16
  404ac4:	dd2c      	ble.n	404b20 <_svfprintf_r+0xd04>
  404ac6:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  404aca:	2710      	movs	r7, #16
  404acc:	46b0      	mov	r8, r6
  404ace:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404ad2:	9e09      	ldr	r6, [sp, #36]	; 0x24
  404ad4:	e006      	b.n	404ae4 <_svfprintf_r+0xcc8>
  404ad6:	f1a8 0810 	sub.w	r8, r8, #16
  404ada:	f1b8 0f10 	cmp.w	r8, #16
  404ade:	f109 0908 	add.w	r9, r9, #8
  404ae2:	dd1a      	ble.n	404b1a <_svfprintf_r+0xcfe>
  404ae4:	3501      	adds	r5, #1
  404ae6:	3410      	adds	r4, #16
  404ae8:	2d07      	cmp	r5, #7
  404aea:	9425      	str	r4, [sp, #148]	; 0x94
  404aec:	9524      	str	r5, [sp, #144]	; 0x90
  404aee:	f8c9 a000 	str.w	sl, [r9]
  404af2:	f8c9 7004 	str.w	r7, [r9, #4]
  404af6:	ddee      	ble.n	404ad6 <_svfprintf_r+0xcba>
  404af8:	aa23      	add	r2, sp, #140	; 0x8c
  404afa:	4631      	mov	r1, r6
  404afc:	4658      	mov	r0, fp
  404afe:	f002 fcad 	bl	40745c <__ssprint_r>
  404b02:	2800      	cmp	r0, #0
  404b04:	f47f aa83 	bne.w	40400e <_svfprintf_r+0x1f2>
  404b08:	f1a8 0810 	sub.w	r8, r8, #16
  404b0c:	f1b8 0f10 	cmp.w	r8, #16
  404b10:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404b12:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404b14:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404b18:	dce4      	bgt.n	404ae4 <_svfprintf_r+0xcc8>
  404b1a:	4646      	mov	r6, r8
  404b1c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  404b20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404b22:	3501      	adds	r5, #1
  404b24:	4434      	add	r4, r6
  404b26:	2d07      	cmp	r5, #7
  404b28:	9425      	str	r4, [sp, #148]	; 0x94
  404b2a:	9524      	str	r5, [sp, #144]	; 0x90
  404b2c:	e889 0048 	stmia.w	r9, {r3, r6}
  404b30:	f77f af0b 	ble.w	40494a <_svfprintf_r+0xb2e>
  404b34:	aa23      	add	r2, sp, #140	; 0x8c
  404b36:	9909      	ldr	r1, [sp, #36]	; 0x24
  404b38:	980a      	ldr	r0, [sp, #40]	; 0x28
  404b3a:	f002 fc8f 	bl	40745c <__ssprint_r>
  404b3e:	2800      	cmp	r0, #0
  404b40:	f47f aa65 	bne.w	40400e <_svfprintf_r+0x1f2>
  404b44:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404b46:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404b48:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404b4c:	e6ff      	b.n	40494e <_svfprintf_r+0xb32>
  404b4e:	9907      	ldr	r1, [sp, #28]
  404b50:	f011 0210 	ands.w	r2, r1, #16
  404b54:	f000 8108 	beq.w	404d68 <_svfprintf_r+0xf4c>
  404b58:	980e      	ldr	r0, [sp, #56]	; 0x38
  404b5a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404b5e:	f1bb 0f00 	cmp.w	fp, #0
  404b62:	6804      	ldr	r4, [r0, #0]
  404b64:	f100 0704 	add.w	r7, r0, #4
  404b68:	f04f 0500 	mov.w	r5, #0
  404b6c:	db26      	blt.n	404bbc <_svfprintf_r+0xda0>
  404b6e:	460a      	mov	r2, r1
  404b70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  404b74:	9207      	str	r2, [sp, #28]
  404b76:	ea54 0205 	orrs.w	r2, r4, r5
  404b7a:	970e      	str	r7, [sp, #56]	; 0x38
  404b7c:	461f      	mov	r7, r3
  404b7e:	f47f aaef 	bne.w	404160 <_svfprintf_r+0x344>
  404b82:	e4c8      	b.n	404516 <_svfprintf_r+0x6fa>
  404b84:	9b07      	ldr	r3, [sp, #28]
  404b86:	06d9      	lsls	r1, r3, #27
  404b88:	d42a      	bmi.n	404be0 <_svfprintf_r+0xdc4>
  404b8a:	9b07      	ldr	r3, [sp, #28]
  404b8c:	065a      	lsls	r2, r3, #25
  404b8e:	d527      	bpl.n	404be0 <_svfprintf_r+0xdc4>
  404b90:	990e      	ldr	r1, [sp, #56]	; 0x38
  404b92:	f9b1 4000 	ldrsh.w	r4, [r1]
  404b96:	3104      	adds	r1, #4
  404b98:	17e5      	asrs	r5, r4, #31
  404b9a:	4622      	mov	r2, r4
  404b9c:	462b      	mov	r3, r5
  404b9e:	910e      	str	r1, [sp, #56]	; 0x38
  404ba0:	f7ff bacb 	b.w	40413a <_svfprintf_r+0x31e>
  404ba4:	990e      	ldr	r1, [sp, #56]	; 0x38
  404ba6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404baa:	f1bb 0f00 	cmp.w	fp, #0
  404bae:	680c      	ldr	r4, [r1, #0]
  404bb0:	f101 0704 	add.w	r7, r1, #4
  404bb4:	f04f 0500 	mov.w	r5, #0
  404bb8:	f280 8247 	bge.w	40504a <_svfprintf_r+0x122e>
  404bbc:	970e      	str	r7, [sp, #56]	; 0x38
  404bbe:	461f      	mov	r7, r3
  404bc0:	ea54 0305 	orrs.w	r3, r4, r5
  404bc4:	f47f aacc 	bne.w	404160 <_svfprintf_r+0x344>
  404bc8:	e4aa      	b.n	404520 <_svfprintf_r+0x704>
  404bca:	3301      	adds	r3, #1
  404bcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404bce:	9324      	str	r3, [sp, #144]	; 0x90
  404bd0:	442c      	add	r4, r5
  404bd2:	2b07      	cmp	r3, #7
  404bd4:	9425      	str	r4, [sp, #148]	; 0x94
  404bd6:	e889 0024 	stmia.w	r9, {r2, r5}
  404bda:	f77f abad 	ble.w	404338 <_svfprintf_r+0x51c>
  404bde:	e6c3      	b.n	404968 <_svfprintf_r+0xb4c>
  404be0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404be2:	6814      	ldr	r4, [r2, #0]
  404be4:	4613      	mov	r3, r2
  404be6:	3304      	adds	r3, #4
  404be8:	17e5      	asrs	r5, r4, #31
  404bea:	4622      	mov	r2, r4
  404bec:	930e      	str	r3, [sp, #56]	; 0x38
  404bee:	2a00      	cmp	r2, #0
  404bf0:	462b      	mov	r3, r5
  404bf2:	f173 0300 	sbcs.w	r3, r3, #0
  404bf6:	f6bf aaa5 	bge.w	404144 <_svfprintf_r+0x328>
  404bfa:	4264      	negs	r4, r4
  404bfc:	f04f 072d 	mov.w	r7, #45	; 0x2d
  404c00:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404c04:	f1bb 0f00 	cmp.w	fp, #0
  404c08:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404c0c:	f6ff aaa8 	blt.w	404160 <_svfprintf_r+0x344>
  404c10:	9b07      	ldr	r3, [sp, #28]
  404c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404c16:	9307      	str	r3, [sp, #28]
  404c18:	f7ff baa2 	b.w	404160 <_svfprintf_r+0x344>
  404c1c:	aa23      	add	r2, sp, #140	; 0x8c
  404c1e:	9909      	ldr	r1, [sp, #36]	; 0x24
  404c20:	980a      	ldr	r0, [sp, #40]	; 0x28
  404c22:	f002 fc1b 	bl	40745c <__ssprint_r>
  404c26:	2800      	cmp	r0, #0
  404c28:	f47f a9f1 	bne.w	40400e <_svfprintf_r+0x1f2>
  404c2c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404c2e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404c32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404c34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404c36:	4432      	add	r2, r6
  404c38:	4617      	mov	r7, r2
  404c3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404c3c:	4293      	cmp	r3, r2
  404c3e:	db47      	blt.n	404cd0 <_svfprintf_r+0xeb4>
  404c40:	9a07      	ldr	r2, [sp, #28]
  404c42:	07d5      	lsls	r5, r2, #31
  404c44:	d444      	bmi.n	404cd0 <_svfprintf_r+0xeb4>
  404c46:	9912      	ldr	r1, [sp, #72]	; 0x48
  404c48:	440e      	add	r6, r1
  404c4a:	1bf5      	subs	r5, r6, r7
  404c4c:	1acb      	subs	r3, r1, r3
  404c4e:	429d      	cmp	r5, r3
  404c50:	bfa8      	it	ge
  404c52:	461d      	movge	r5, r3
  404c54:	2d00      	cmp	r5, #0
  404c56:	462e      	mov	r6, r5
  404c58:	dd0d      	ble.n	404c76 <_svfprintf_r+0xe5a>
  404c5a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404c5c:	f8c9 7000 	str.w	r7, [r9]
  404c60:	3201      	adds	r2, #1
  404c62:	442c      	add	r4, r5
  404c64:	2a07      	cmp	r2, #7
  404c66:	9425      	str	r4, [sp, #148]	; 0x94
  404c68:	f8c9 5004 	str.w	r5, [r9, #4]
  404c6c:	9224      	str	r2, [sp, #144]	; 0x90
  404c6e:	f300 830b 	bgt.w	405288 <_svfprintf_r+0x146c>
  404c72:	f109 0908 	add.w	r9, r9, #8
  404c76:	2e00      	cmp	r6, #0
  404c78:	bfac      	ite	ge
  404c7a:	1b9d      	subge	r5, r3, r6
  404c7c:	461d      	movlt	r5, r3
  404c7e:	2d00      	cmp	r5, #0
  404c80:	f77f ab5c 	ble.w	40433c <_svfprintf_r+0x520>
  404c84:	4a2a      	ldr	r2, [pc, #168]	; (404d30 <_svfprintf_r+0xf14>)
  404c86:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404c88:	920f      	str	r2, [sp, #60]	; 0x3c
  404c8a:	2d10      	cmp	r5, #16
  404c8c:	dd9d      	ble.n	404bca <_svfprintf_r+0xdae>
  404c8e:	2610      	movs	r6, #16
  404c90:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404c92:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  404c96:	e004      	b.n	404ca2 <_svfprintf_r+0xe86>
  404c98:	f109 0908 	add.w	r9, r9, #8
  404c9c:	3d10      	subs	r5, #16
  404c9e:	2d10      	cmp	r5, #16
  404ca0:	dd93      	ble.n	404bca <_svfprintf_r+0xdae>
  404ca2:	3301      	adds	r3, #1
  404ca4:	3410      	adds	r4, #16
  404ca6:	2b07      	cmp	r3, #7
  404ca8:	9425      	str	r4, [sp, #148]	; 0x94
  404caa:	9324      	str	r3, [sp, #144]	; 0x90
  404cac:	f8c9 a000 	str.w	sl, [r9]
  404cb0:	f8c9 6004 	str.w	r6, [r9, #4]
  404cb4:	ddf0      	ble.n	404c98 <_svfprintf_r+0xe7c>
  404cb6:	aa23      	add	r2, sp, #140	; 0x8c
  404cb8:	4659      	mov	r1, fp
  404cba:	4638      	mov	r0, r7
  404cbc:	f002 fbce 	bl	40745c <__ssprint_r>
  404cc0:	2800      	cmp	r0, #0
  404cc2:	f47f a9a4 	bne.w	40400e <_svfprintf_r+0x1f2>
  404cc6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404cc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404cca:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404cce:	e7e5      	b.n	404c9c <_svfprintf_r+0xe80>
  404cd0:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404cd2:	9816      	ldr	r0, [sp, #88]	; 0x58
  404cd4:	9917      	ldr	r1, [sp, #92]	; 0x5c
  404cd6:	f8c9 1000 	str.w	r1, [r9]
  404cda:	3201      	adds	r2, #1
  404cdc:	4404      	add	r4, r0
  404cde:	2a07      	cmp	r2, #7
  404ce0:	9425      	str	r4, [sp, #148]	; 0x94
  404ce2:	f8c9 0004 	str.w	r0, [r9, #4]
  404ce6:	9224      	str	r2, [sp, #144]	; 0x90
  404ce8:	f300 82a9 	bgt.w	40523e <_svfprintf_r+0x1422>
  404cec:	f109 0908 	add.w	r9, r9, #8
  404cf0:	e7a9      	b.n	404c46 <_svfprintf_r+0xe2a>
  404cf2:	9b07      	ldr	r3, [sp, #28]
  404cf4:	07d8      	lsls	r0, r3, #31
  404cf6:	f53f adf4 	bmi.w	4048e2 <_svfprintf_r+0xac6>
  404cfa:	3501      	adds	r5, #1
  404cfc:	3401      	adds	r4, #1
  404cfe:	2301      	movs	r3, #1
  404d00:	2d07      	cmp	r5, #7
  404d02:	9425      	str	r4, [sp, #148]	; 0x94
  404d04:	9524      	str	r5, [sp, #144]	; 0x90
  404d06:	f8c9 6000 	str.w	r6, [r9]
  404d0a:	f8c9 3004 	str.w	r3, [r9, #4]
  404d0e:	f77f ae1c 	ble.w	40494a <_svfprintf_r+0xb2e>
  404d12:	e70f      	b.n	404b34 <_svfprintf_r+0xd18>
  404d14:	aa23      	add	r2, sp, #140	; 0x8c
  404d16:	9909      	ldr	r1, [sp, #36]	; 0x24
  404d18:	980a      	ldr	r0, [sp, #40]	; 0x28
  404d1a:	f002 fb9f 	bl	40745c <__ssprint_r>
  404d1e:	2800      	cmp	r0, #0
  404d20:	f47f a975 	bne.w	40400e <_svfprintf_r+0x1f2>
  404d24:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404d26:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404d28:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404d2c:	e5e7      	b.n	4048fe <_svfprintf_r+0xae2>
  404d2e:	bf00      	nop
  404d30:	0040939c 	.word	0x0040939c
  404d34:	aa23      	add	r2, sp, #140	; 0x8c
  404d36:	9909      	ldr	r1, [sp, #36]	; 0x24
  404d38:	980a      	ldr	r0, [sp, #40]	; 0x28
  404d3a:	f002 fb8f 	bl	40745c <__ssprint_r>
  404d3e:	2800      	cmp	r0, #0
  404d40:	f47f a965 	bne.w	40400e <_svfprintf_r+0x1f2>
  404d44:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404d46:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404d48:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404d4c:	e5e6      	b.n	40491c <_svfprintf_r+0xb00>
  404d4e:	aa23      	add	r2, sp, #140	; 0x8c
  404d50:	9909      	ldr	r1, [sp, #36]	; 0x24
  404d52:	980a      	ldr	r0, [sp, #40]	; 0x28
  404d54:	f002 fb82 	bl	40745c <__ssprint_r>
  404d58:	2800      	cmp	r0, #0
  404d5a:	f47f a958 	bne.w	40400e <_svfprintf_r+0x1f2>
  404d5e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404d60:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404d64:	f7ff ba98 	b.w	404298 <_svfprintf_r+0x47c>
  404d68:	9907      	ldr	r1, [sp, #28]
  404d6a:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  404d6e:	f43f af19 	beq.w	404ba4 <_svfprintf_r+0xd88>
  404d72:	980e      	ldr	r0, [sp, #56]	; 0x38
  404d74:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404d78:	f1bb 0f00 	cmp.w	fp, #0
  404d7c:	8804      	ldrh	r4, [r0, #0]
  404d7e:	f100 0704 	add.w	r7, r0, #4
  404d82:	f04f 0500 	mov.w	r5, #0
  404d86:	f2c0 81b9 	blt.w	4050fc <_svfprintf_r+0x12e0>
  404d8a:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  404d8e:	9307      	str	r3, [sp, #28]
  404d90:	ea54 0305 	orrs.w	r3, r4, r5
  404d94:	970e      	str	r7, [sp, #56]	; 0x38
  404d96:	4617      	mov	r7, r2
  404d98:	f47f a9e2 	bne.w	404160 <_svfprintf_r+0x344>
  404d9c:	f7ff bbbb 	b.w	404516 <_svfprintf_r+0x6fa>
  404da0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404da2:	4622      	mov	r2, r4
  404da4:	4620      	mov	r0, r4
  404da6:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404da8:	4623      	mov	r3, r4
  404daa:	4621      	mov	r1, r4
  404dac:	f003 fc34 	bl	408618 <__aeabi_dcmpun>
  404db0:	2800      	cmp	r0, #0
  404db2:	f040 8317 	bne.w	4053e4 <_svfprintf_r+0x15c8>
  404db6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404db8:	f1bb 3fff 	cmp.w	fp, #4294967295
  404dbc:	f023 0320 	bic.w	r3, r3, #32
  404dc0:	930d      	str	r3, [sp, #52]	; 0x34
  404dc2:	f000 8270 	beq.w	4052a6 <_svfprintf_r+0x148a>
  404dc6:	2b47      	cmp	r3, #71	; 0x47
  404dc8:	f000 8192 	beq.w	4050f0 <_svfprintf_r+0x12d4>
  404dcc:	9b07      	ldr	r3, [sp, #28]
  404dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404dd2:	9310      	str	r3, [sp, #64]	; 0x40
  404dd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404dd6:	1e1f      	subs	r7, r3, #0
  404dd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404dda:	9308      	str	r3, [sp, #32]
  404ddc:	bfbb      	ittet	lt
  404dde:	463b      	movlt	r3, r7
  404de0:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404de4:	2300      	movge	r3, #0
  404de6:	232d      	movlt	r3, #45	; 0x2d
  404de8:	930f      	str	r3, [sp, #60]	; 0x3c
  404dea:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404dec:	2b66      	cmp	r3, #102	; 0x66
  404dee:	f000 825d 	beq.w	4052ac <_svfprintf_r+0x1490>
  404df2:	2b46      	cmp	r3, #70	; 0x46
  404df4:	f000 8151 	beq.w	40509a <_svfprintf_r+0x127e>
  404df8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404dfa:	9a08      	ldr	r2, [sp, #32]
  404dfc:	2b45      	cmp	r3, #69	; 0x45
  404dfe:	a821      	add	r0, sp, #132	; 0x84
  404e00:	a91e      	add	r1, sp, #120	; 0x78
  404e02:	bf0c      	ite	eq
  404e04:	f10b 0501 	addeq.w	r5, fp, #1
  404e08:	465d      	movne	r5, fp
  404e0a:	9004      	str	r0, [sp, #16]
  404e0c:	9103      	str	r1, [sp, #12]
  404e0e:	a81d      	add	r0, sp, #116	; 0x74
  404e10:	2102      	movs	r1, #2
  404e12:	463b      	mov	r3, r7
  404e14:	9002      	str	r0, [sp, #8]
  404e16:	9501      	str	r5, [sp, #4]
  404e18:	9100      	str	r1, [sp, #0]
  404e1a:	980a      	ldr	r0, [sp, #40]	; 0x28
  404e1c:	f000 fbf0 	bl	405600 <_dtoa_r>
  404e20:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404e22:	2b67      	cmp	r3, #103	; 0x67
  404e24:	4606      	mov	r6, r0
  404e26:	f040 8290 	bne.w	40534a <_svfprintf_r+0x152e>
  404e2a:	9b07      	ldr	r3, [sp, #28]
  404e2c:	07da      	lsls	r2, r3, #31
  404e2e:	f140 82af 	bpl.w	405390 <_svfprintf_r+0x1574>
  404e32:	1974      	adds	r4, r6, r5
  404e34:	9808      	ldr	r0, [sp, #32]
  404e36:	4639      	mov	r1, r7
  404e38:	2200      	movs	r2, #0
  404e3a:	2300      	movs	r3, #0
  404e3c:	f003 fbba 	bl	4085b4 <__aeabi_dcmpeq>
  404e40:	2800      	cmp	r0, #0
  404e42:	f040 8190 	bne.w	405166 <_svfprintf_r+0x134a>
  404e46:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404e48:	429c      	cmp	r4, r3
  404e4a:	d906      	bls.n	404e5a <_svfprintf_r+0x103e>
  404e4c:	2130      	movs	r1, #48	; 0x30
  404e4e:	1c5a      	adds	r2, r3, #1
  404e50:	9221      	str	r2, [sp, #132]	; 0x84
  404e52:	7019      	strb	r1, [r3, #0]
  404e54:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404e56:	429c      	cmp	r4, r3
  404e58:	d8f9      	bhi.n	404e4e <_svfprintf_r+0x1032>
  404e5a:	1b9b      	subs	r3, r3, r6
  404e5c:	9312      	str	r3, [sp, #72]	; 0x48
  404e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404e60:	2b47      	cmp	r3, #71	; 0x47
  404e62:	f000 8179 	beq.w	405158 <_svfprintf_r+0x133c>
  404e66:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404e68:	2b65      	cmp	r3, #101	; 0x65
  404e6a:	f340 827d 	ble.w	405368 <_svfprintf_r+0x154c>
  404e6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404e70:	2b66      	cmp	r3, #102	; 0x66
  404e72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404e74:	9313      	str	r3, [sp, #76]	; 0x4c
  404e76:	f000 825b 	beq.w	405330 <_svfprintf_r+0x1514>
  404e7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404e7c:	9912      	ldr	r1, [sp, #72]	; 0x48
  404e7e:	428a      	cmp	r2, r1
  404e80:	f2c0 8230 	blt.w	4052e4 <_svfprintf_r+0x14c8>
  404e84:	9b07      	ldr	r3, [sp, #28]
  404e86:	07d9      	lsls	r1, r3, #31
  404e88:	f100 8284 	bmi.w	405394 <_svfprintf_r+0x1578>
  404e8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404e90:	920d      	str	r2, [sp, #52]	; 0x34
  404e92:	2267      	movs	r2, #103	; 0x67
  404e94:	9211      	str	r2, [sp, #68]	; 0x44
  404e96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404e98:	2a00      	cmp	r2, #0
  404e9a:	f040 8153 	bne.w	405144 <_svfprintf_r+0x1328>
  404e9e:	9308      	str	r3, [sp, #32]
  404ea0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404ea2:	9307      	str	r3, [sp, #28]
  404ea4:	4693      	mov	fp, r2
  404ea6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404eaa:	f7ff b97d 	b.w	4041a8 <_svfprintf_r+0x38c>
  404eae:	9907      	ldr	r1, [sp, #28]
  404eb0:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  404eb4:	d015      	beq.n	404ee2 <_svfprintf_r+0x10c6>
  404eb6:	980e      	ldr	r0, [sp, #56]	; 0x38
  404eb8:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404ebc:	f1bb 0f00 	cmp.w	fp, #0
  404ec0:	8804      	ldrh	r4, [r0, #0]
  404ec2:	f100 0704 	add.w	r7, r0, #4
  404ec6:	f04f 0500 	mov.w	r5, #0
  404eca:	db16      	blt.n	404efa <_svfprintf_r+0x10de>
  404ecc:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  404ed0:	9307      	str	r3, [sp, #28]
  404ed2:	ea54 0305 	orrs.w	r3, r4, r5
  404ed6:	970e      	str	r7, [sp, #56]	; 0x38
  404ed8:	f43f ac3a 	beq.w	404750 <_svfprintf_r+0x934>
  404edc:	4617      	mov	r7, r2
  404ede:	f7ff b8c2 	b.w	404066 <_svfprintf_r+0x24a>
  404ee2:	990e      	ldr	r1, [sp, #56]	; 0x38
  404ee4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404ee8:	f1bb 0f00 	cmp.w	fp, #0
  404eec:	680c      	ldr	r4, [r1, #0]
  404eee:	f101 0704 	add.w	r7, r1, #4
  404ef2:	f04f 0500 	mov.w	r5, #0
  404ef6:	f280 80a5 	bge.w	405044 <_svfprintf_r+0x1228>
  404efa:	970e      	str	r7, [sp, #56]	; 0x38
  404efc:	2700      	movs	r7, #0
  404efe:	f7ff b8b2 	b.w	404066 <_svfprintf_r+0x24a>
  404f02:	9b07      	ldr	r3, [sp, #28]
  404f04:	06df      	lsls	r7, r3, #27
  404f06:	d40b      	bmi.n	404f20 <_svfprintf_r+0x1104>
  404f08:	9b07      	ldr	r3, [sp, #28]
  404f0a:	065e      	lsls	r6, r3, #25
  404f0c:	d508      	bpl.n	404f20 <_svfprintf_r+0x1104>
  404f0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404f10:	6813      	ldr	r3, [r2, #0]
  404f12:	3204      	adds	r2, #4
  404f14:	920e      	str	r2, [sp, #56]	; 0x38
  404f16:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  404f1a:	801a      	strh	r2, [r3, #0]
  404f1c:	f7fe bfa4 	b.w	403e68 <_svfprintf_r+0x4c>
  404f20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404f22:	6813      	ldr	r3, [r2, #0]
  404f24:	3204      	adds	r2, #4
  404f26:	920e      	str	r2, [sp, #56]	; 0x38
  404f28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404f2a:	601a      	str	r2, [r3, #0]
  404f2c:	f7fe bf9c 	b.w	403e68 <_svfprintf_r+0x4c>
  404f30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404f32:	9b07      	ldr	r3, [sp, #28]
  404f34:	f013 0f40 	tst.w	r3, #64	; 0x40
  404f38:	4613      	mov	r3, r2
  404f3a:	f103 0304 	add.w	r3, r3, #4
  404f3e:	bf0c      	ite	eq
  404f40:	6814      	ldreq	r4, [r2, #0]
  404f42:	8814      	ldrhne	r4, [r2, #0]
  404f44:	930e      	str	r3, [sp, #56]	; 0x38
  404f46:	2500      	movs	r5, #0
  404f48:	f7ff bb02 	b.w	404550 <_svfprintf_r+0x734>
  404f4c:	2700      	movs	r7, #0
  404f4e:	45bb      	cmp	fp, r7
  404f50:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404f54:	f6ff ac0e 	blt.w	404774 <_svfprintf_r+0x958>
  404f58:	9b07      	ldr	r3, [sp, #28]
  404f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404f5e:	9307      	str	r3, [sp, #28]
  404f60:	f7ff bbd6 	b.w	404710 <_svfprintf_r+0x8f4>
  404f64:	4614      	mov	r4, r2
  404f66:	3301      	adds	r3, #1
  404f68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404f6a:	9324      	str	r3, [sp, #144]	; 0x90
  404f6c:	442c      	add	r4, r5
  404f6e:	2b07      	cmp	r3, #7
  404f70:	9425      	str	r4, [sp, #148]	; 0x94
  404f72:	e889 0024 	stmia.w	r9, {r2, r5}
  404f76:	f73f ae51 	bgt.w	404c1c <_svfprintf_r+0xe00>
  404f7a:	f109 0908 	add.w	r9, r9, #8
  404f7e:	e658      	b.n	404c32 <_svfprintf_r+0xe16>
  404f80:	aa23      	add	r2, sp, #140	; 0x8c
  404f82:	9909      	ldr	r1, [sp, #36]	; 0x24
  404f84:	980a      	ldr	r0, [sp, #40]	; 0x28
  404f86:	f002 fa69 	bl	40745c <__ssprint_r>
  404f8a:	2800      	cmp	r0, #0
  404f8c:	f47f a83f 	bne.w	40400e <_svfprintf_r+0x1f2>
  404f90:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404f92:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404f96:	e40f      	b.n	4047b8 <_svfprintf_r+0x99c>
  404f98:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404f9a:	f7ff bbe4 	b.w	404766 <_svfprintf_r+0x94a>
  404f9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404fa0:	4ab5      	ldr	r2, [pc, #724]	; (405278 <_svfprintf_r+0x145c>)
  404fa2:	f8c9 2000 	str.w	r2, [r9]
  404fa6:	3301      	adds	r3, #1
  404fa8:	3401      	adds	r4, #1
  404faa:	2201      	movs	r2, #1
  404fac:	2b07      	cmp	r3, #7
  404fae:	9425      	str	r4, [sp, #148]	; 0x94
  404fb0:	9324      	str	r3, [sp, #144]	; 0x90
  404fb2:	f8c9 2004 	str.w	r2, [r9, #4]
  404fb6:	f300 808e 	bgt.w	4050d6 <_svfprintf_r+0x12ba>
  404fba:	f109 0908 	add.w	r9, r9, #8
  404fbe:	b92d      	cbnz	r5, 404fcc <_svfprintf_r+0x11b0>
  404fc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404fc2:	b91b      	cbnz	r3, 404fcc <_svfprintf_r+0x11b0>
  404fc4:	9b07      	ldr	r3, [sp, #28]
  404fc6:	07df      	lsls	r7, r3, #31
  404fc8:	f57f a9b8 	bpl.w	40433c <_svfprintf_r+0x520>
  404fcc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404fce:	9916      	ldr	r1, [sp, #88]	; 0x58
  404fd0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  404fd2:	f8c9 2000 	str.w	r2, [r9]
  404fd6:	3301      	adds	r3, #1
  404fd8:	440c      	add	r4, r1
  404fda:	2b07      	cmp	r3, #7
  404fdc:	9425      	str	r4, [sp, #148]	; 0x94
  404fde:	f8c9 1004 	str.w	r1, [r9, #4]
  404fe2:	9324      	str	r3, [sp, #144]	; 0x90
  404fe4:	f300 81c2 	bgt.w	40536c <_svfprintf_r+0x1550>
  404fe8:	f109 0908 	add.w	r9, r9, #8
  404fec:	426d      	negs	r5, r5
  404fee:	2d00      	cmp	r5, #0
  404ff0:	f340 809b 	ble.w	40512a <_svfprintf_r+0x130e>
  404ff4:	4aa1      	ldr	r2, [pc, #644]	; (40527c <_svfprintf_r+0x1460>)
  404ff6:	920f      	str	r2, [sp, #60]	; 0x3c
  404ff8:	2d10      	cmp	r5, #16
  404ffa:	f340 80c3 	ble.w	405184 <_svfprintf_r+0x1368>
  404ffe:	4622      	mov	r2, r4
  405000:	2710      	movs	r7, #16
  405002:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405006:	9c09      	ldr	r4, [sp, #36]	; 0x24
  405008:	e005      	b.n	405016 <_svfprintf_r+0x11fa>
  40500a:	f109 0908 	add.w	r9, r9, #8
  40500e:	3d10      	subs	r5, #16
  405010:	2d10      	cmp	r5, #16
  405012:	f340 80b6 	ble.w	405182 <_svfprintf_r+0x1366>
  405016:	3301      	adds	r3, #1
  405018:	3210      	adds	r2, #16
  40501a:	2b07      	cmp	r3, #7
  40501c:	9225      	str	r2, [sp, #148]	; 0x94
  40501e:	9324      	str	r3, [sp, #144]	; 0x90
  405020:	f8c9 a000 	str.w	sl, [r9]
  405024:	f8c9 7004 	str.w	r7, [r9, #4]
  405028:	ddef      	ble.n	40500a <_svfprintf_r+0x11ee>
  40502a:	aa23      	add	r2, sp, #140	; 0x8c
  40502c:	4621      	mov	r1, r4
  40502e:	4658      	mov	r0, fp
  405030:	f002 fa14 	bl	40745c <__ssprint_r>
  405034:	2800      	cmp	r0, #0
  405036:	f47e afea 	bne.w	40400e <_svfprintf_r+0x1f2>
  40503a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40503c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40503e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405042:	e7e4      	b.n	40500e <_svfprintf_r+0x11f2>
  405044:	9a07      	ldr	r2, [sp, #28]
  405046:	f7ff ba38 	b.w	4044ba <_svfprintf_r+0x69e>
  40504a:	9a07      	ldr	r2, [sp, #28]
  40504c:	e590      	b.n	404b70 <_svfprintf_r+0xd54>
  40504e:	9b07      	ldr	r3, [sp, #28]
  405050:	f043 0320 	orr.w	r3, r3, #32
  405054:	9307      	str	r3, [sp, #28]
  405056:	f108 0801 	add.w	r8, r8, #1
  40505a:	f898 3000 	ldrb.w	r3, [r8]
  40505e:	f7fe bf36 	b.w	403ece <_svfprintf_r+0xb2>
  405062:	aa23      	add	r2, sp, #140	; 0x8c
  405064:	9909      	ldr	r1, [sp, #36]	; 0x24
  405066:	980a      	ldr	r0, [sp, #40]	; 0x28
  405068:	f002 f9f8 	bl	40745c <__ssprint_r>
  40506c:	2800      	cmp	r0, #0
  40506e:	f47e afce 	bne.w	40400e <_svfprintf_r+0x1f2>
  405072:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405074:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405078:	f7ff bbb6 	b.w	4047e8 <_svfprintf_r+0x9cc>
  40507c:	2140      	movs	r1, #64	; 0x40
  40507e:	980a      	ldr	r0, [sp, #40]	; 0x28
  405080:	f001 fa02 	bl	406488 <_malloc_r>
  405084:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405086:	6010      	str	r0, [r2, #0]
  405088:	6110      	str	r0, [r2, #16]
  40508a:	2800      	cmp	r0, #0
  40508c:	f000 81e5 	beq.w	40545a <_svfprintf_r+0x163e>
  405090:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405092:	2340      	movs	r3, #64	; 0x40
  405094:	6153      	str	r3, [r2, #20]
  405096:	f7fe bed8 	b.w	403e4a <_svfprintf_r+0x2e>
  40509a:	a821      	add	r0, sp, #132	; 0x84
  40509c:	a91e      	add	r1, sp, #120	; 0x78
  40509e:	9004      	str	r0, [sp, #16]
  4050a0:	9103      	str	r1, [sp, #12]
  4050a2:	a81d      	add	r0, sp, #116	; 0x74
  4050a4:	2103      	movs	r1, #3
  4050a6:	9002      	str	r0, [sp, #8]
  4050a8:	9a08      	ldr	r2, [sp, #32]
  4050aa:	f8cd b004 	str.w	fp, [sp, #4]
  4050ae:	463b      	mov	r3, r7
  4050b0:	9100      	str	r1, [sp, #0]
  4050b2:	980a      	ldr	r0, [sp, #40]	; 0x28
  4050b4:	f000 faa4 	bl	405600 <_dtoa_r>
  4050b8:	465d      	mov	r5, fp
  4050ba:	4606      	mov	r6, r0
  4050bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4050be:	2b46      	cmp	r3, #70	; 0x46
  4050c0:	eb06 0405 	add.w	r4, r6, r5
  4050c4:	f47f aeb6 	bne.w	404e34 <_svfprintf_r+0x1018>
  4050c8:	7833      	ldrb	r3, [r6, #0]
  4050ca:	2b30      	cmp	r3, #48	; 0x30
  4050cc:	f000 817c 	beq.w	4053c8 <_svfprintf_r+0x15ac>
  4050d0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4050d2:	442c      	add	r4, r5
  4050d4:	e6ae      	b.n	404e34 <_svfprintf_r+0x1018>
  4050d6:	aa23      	add	r2, sp, #140	; 0x8c
  4050d8:	9909      	ldr	r1, [sp, #36]	; 0x24
  4050da:	980a      	ldr	r0, [sp, #40]	; 0x28
  4050dc:	f002 f9be 	bl	40745c <__ssprint_r>
  4050e0:	2800      	cmp	r0, #0
  4050e2:	f47e af94 	bne.w	40400e <_svfprintf_r+0x1f2>
  4050e6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4050e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4050ea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4050ee:	e766      	b.n	404fbe <_svfprintf_r+0x11a2>
  4050f0:	f1bb 0f00 	cmp.w	fp, #0
  4050f4:	bf08      	it	eq
  4050f6:	f04f 0b01 	moveq.w	fp, #1
  4050fa:	e667      	b.n	404dcc <_svfprintf_r+0xfb0>
  4050fc:	970e      	str	r7, [sp, #56]	; 0x38
  4050fe:	4617      	mov	r7, r2
  405100:	e55e      	b.n	404bc0 <_svfprintf_r+0xda4>
  405102:	4630      	mov	r0, r6
  405104:	f002 f93c 	bl	407380 <strlen>
  405108:	46a3      	mov	fp, r4
  40510a:	4603      	mov	r3, r0
  40510c:	900d      	str	r0, [sp, #52]	; 0x34
  40510e:	f7ff baf4 	b.w	4046fa <_svfprintf_r+0x8de>
  405112:	aa23      	add	r2, sp, #140	; 0x8c
  405114:	9909      	ldr	r1, [sp, #36]	; 0x24
  405116:	980a      	ldr	r0, [sp, #40]	; 0x28
  405118:	f002 f9a0 	bl	40745c <__ssprint_r>
  40511c:	2800      	cmp	r0, #0
  40511e:	f47e af76 	bne.w	40400e <_svfprintf_r+0x1f2>
  405122:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405124:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405126:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40512a:	9912      	ldr	r1, [sp, #72]	; 0x48
  40512c:	f8c9 6000 	str.w	r6, [r9]
  405130:	3301      	adds	r3, #1
  405132:	440c      	add	r4, r1
  405134:	2b07      	cmp	r3, #7
  405136:	9425      	str	r4, [sp, #148]	; 0x94
  405138:	9324      	str	r3, [sp, #144]	; 0x90
  40513a:	f8c9 1004 	str.w	r1, [r9, #4]
  40513e:	f77f a8fb 	ble.w	404338 <_svfprintf_r+0x51c>
  405142:	e411      	b.n	404968 <_svfprintf_r+0xb4c>
  405144:	272d      	movs	r7, #45	; 0x2d
  405146:	9308      	str	r3, [sp, #32]
  405148:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40514a:	9307      	str	r3, [sp, #28]
  40514c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  405150:	f04f 0b00 	mov.w	fp, #0
  405154:	f7ff b829 	b.w	4041aa <_svfprintf_r+0x38e>
  405158:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40515a:	1cdd      	adds	r5, r3, #3
  40515c:	db1e      	blt.n	40519c <_svfprintf_r+0x1380>
  40515e:	459b      	cmp	fp, r3
  405160:	db1c      	blt.n	40519c <_svfprintf_r+0x1380>
  405162:	9313      	str	r3, [sp, #76]	; 0x4c
  405164:	e689      	b.n	404e7a <_svfprintf_r+0x105e>
  405166:	4623      	mov	r3, r4
  405168:	e677      	b.n	404e5a <_svfprintf_r+0x103e>
  40516a:	aa23      	add	r2, sp, #140	; 0x8c
  40516c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40516e:	980a      	ldr	r0, [sp, #40]	; 0x28
  405170:	f002 f974 	bl	40745c <__ssprint_r>
  405174:	2800      	cmp	r0, #0
  405176:	f47e af4a 	bne.w	40400e <_svfprintf_r+0x1f2>
  40517a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40517c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405180:	e459      	b.n	404a36 <_svfprintf_r+0xc1a>
  405182:	4614      	mov	r4, r2
  405184:	3301      	adds	r3, #1
  405186:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405188:	9324      	str	r3, [sp, #144]	; 0x90
  40518a:	442c      	add	r4, r5
  40518c:	2b07      	cmp	r3, #7
  40518e:	9425      	str	r4, [sp, #148]	; 0x94
  405190:	e889 0024 	stmia.w	r9, {r2, r5}
  405194:	dcbd      	bgt.n	405112 <_svfprintf_r+0x12f6>
  405196:	f109 0908 	add.w	r9, r9, #8
  40519a:	e7c6      	b.n	40512a <_svfprintf_r+0x130e>
  40519c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40519e:	3a02      	subs	r2, #2
  4051a0:	9211      	str	r2, [sp, #68]	; 0x44
  4051a2:	3b01      	subs	r3, #1
  4051a4:	2b00      	cmp	r3, #0
  4051a6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4051aa:	931d      	str	r3, [sp, #116]	; 0x74
  4051ac:	bfb8      	it	lt
  4051ae:	425b      	neglt	r3, r3
  4051b0:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  4051b4:	bfb4      	ite	lt
  4051b6:	222d      	movlt	r2, #45	; 0x2d
  4051b8:	222b      	movge	r2, #43	; 0x2b
  4051ba:	2b09      	cmp	r3, #9
  4051bc:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4051c0:	f340 80f1 	ble.w	4053a6 <_svfprintf_r+0x158a>
  4051c4:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  4051c8:	4604      	mov	r4, r0
  4051ca:	4a2d      	ldr	r2, [pc, #180]	; (405280 <_svfprintf_r+0x1464>)
  4051cc:	fb82 2103 	smull	r2, r1, r2, r3
  4051d0:	17da      	asrs	r2, r3, #31
  4051d2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  4051d6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  4051da:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  4051de:	f103 0130 	add.w	r1, r3, #48	; 0x30
  4051e2:	2a09      	cmp	r2, #9
  4051e4:	4613      	mov	r3, r2
  4051e6:	f804 1d01 	strb.w	r1, [r4, #-1]!
  4051ea:	dcee      	bgt.n	4051ca <_svfprintf_r+0x13ae>
  4051ec:	4621      	mov	r1, r4
  4051ee:	3330      	adds	r3, #48	; 0x30
  4051f0:	b2da      	uxtb	r2, r3
  4051f2:	f801 2d01 	strb.w	r2, [r1, #-1]!
  4051f6:	4288      	cmp	r0, r1
  4051f8:	f240 813a 	bls.w	405470 <_svfprintf_r+0x1654>
  4051fc:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  405200:	4623      	mov	r3, r4
  405202:	e001      	b.n	405208 <_svfprintf_r+0x13ec>
  405204:	f813 2b01 	ldrb.w	r2, [r3], #1
  405208:	f801 2b01 	strb.w	r2, [r1], #1
  40520c:	4298      	cmp	r0, r3
  40520e:	d1f9      	bne.n	405204 <_svfprintf_r+0x13e8>
  405210:	1c43      	adds	r3, r0, #1
  405212:	1b1b      	subs	r3, r3, r4
  405214:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  405218:	4413      	add	r3, r2
  40521a:	aa1f      	add	r2, sp, #124	; 0x7c
  40521c:	1a9b      	subs	r3, r3, r2
  40521e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405220:	9319      	str	r3, [sp, #100]	; 0x64
  405222:	2a01      	cmp	r2, #1
  405224:	4413      	add	r3, r2
  405226:	930d      	str	r3, [sp, #52]	; 0x34
  405228:	f340 80ea 	ble.w	405400 <_svfprintf_r+0x15e4>
  40522c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40522e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405230:	4413      	add	r3, r2
  405232:	2200      	movs	r2, #0
  405234:	930d      	str	r3, [sp, #52]	; 0x34
  405236:	9213      	str	r2, [sp, #76]	; 0x4c
  405238:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40523c:	e62b      	b.n	404e96 <_svfprintf_r+0x107a>
  40523e:	aa23      	add	r2, sp, #140	; 0x8c
  405240:	9909      	ldr	r1, [sp, #36]	; 0x24
  405242:	980a      	ldr	r0, [sp, #40]	; 0x28
  405244:	f002 f90a 	bl	40745c <__ssprint_r>
  405248:	2800      	cmp	r0, #0
  40524a:	f47e aee0 	bne.w	40400e <_svfprintf_r+0x1f2>
  40524e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405250:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405252:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405256:	e4f6      	b.n	404c46 <_svfprintf_r+0xe2a>
  405258:	2d06      	cmp	r5, #6
  40525a:	462b      	mov	r3, r5
  40525c:	bf28      	it	cs
  40525e:	2306      	movcs	r3, #6
  405260:	930d      	str	r3, [sp, #52]	; 0x34
  405262:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405266:	46b3      	mov	fp, r6
  405268:	970e      	str	r7, [sp, #56]	; 0x38
  40526a:	9613      	str	r6, [sp, #76]	; 0x4c
  40526c:	4637      	mov	r7, r6
  40526e:	9308      	str	r3, [sp, #32]
  405270:	4e04      	ldr	r6, [pc, #16]	; (405284 <_svfprintf_r+0x1468>)
  405272:	f7fe bf99 	b.w	4041a8 <_svfprintf_r+0x38c>
  405276:	bf00      	nop
  405278:	004093ec 	.word	0x004093ec
  40527c:	0040939c 	.word	0x0040939c
  405280:	66666667 	.word	0x66666667
  405284:	004093e4 	.word	0x004093e4
  405288:	aa23      	add	r2, sp, #140	; 0x8c
  40528a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40528c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40528e:	f002 f8e5 	bl	40745c <__ssprint_r>
  405292:	2800      	cmp	r0, #0
  405294:	f47e aebb 	bne.w	40400e <_svfprintf_r+0x1f2>
  405298:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40529a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40529c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40529e:	1ad3      	subs	r3, r2, r3
  4052a0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4052a4:	e4e7      	b.n	404c76 <_svfprintf_r+0xe5a>
  4052a6:	f04f 0b06 	mov.w	fp, #6
  4052aa:	e58f      	b.n	404dcc <_svfprintf_r+0xfb0>
  4052ac:	a821      	add	r0, sp, #132	; 0x84
  4052ae:	a91e      	add	r1, sp, #120	; 0x78
  4052b0:	9004      	str	r0, [sp, #16]
  4052b2:	9103      	str	r1, [sp, #12]
  4052b4:	a81d      	add	r0, sp, #116	; 0x74
  4052b6:	2103      	movs	r1, #3
  4052b8:	9002      	str	r0, [sp, #8]
  4052ba:	9a08      	ldr	r2, [sp, #32]
  4052bc:	f8cd b004 	str.w	fp, [sp, #4]
  4052c0:	463b      	mov	r3, r7
  4052c2:	9100      	str	r1, [sp, #0]
  4052c4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4052c6:	f000 f99b 	bl	405600 <_dtoa_r>
  4052ca:	465d      	mov	r5, fp
  4052cc:	4606      	mov	r6, r0
  4052ce:	eb00 040b 	add.w	r4, r0, fp
  4052d2:	e6f9      	b.n	4050c8 <_svfprintf_r+0x12ac>
  4052d4:	9307      	str	r3, [sp, #28]
  4052d6:	f7ff b959 	b.w	40458c <_svfprintf_r+0x770>
  4052da:	272d      	movs	r7, #45	; 0x2d
  4052dc:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4052e0:	f7ff b8b2 	b.w	404448 <_svfprintf_r+0x62c>
  4052e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4052e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4052e8:	4413      	add	r3, r2
  4052ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4052ec:	930d      	str	r3, [sp, #52]	; 0x34
  4052ee:	2a00      	cmp	r2, #0
  4052f0:	dd7e      	ble.n	4053f0 <_svfprintf_r+0x15d4>
  4052f2:	2267      	movs	r2, #103	; 0x67
  4052f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4052f8:	9211      	str	r2, [sp, #68]	; 0x44
  4052fa:	e5cc      	b.n	404e96 <_svfprintf_r+0x107a>
  4052fc:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  405300:	970e      	str	r7, [sp, #56]	; 0x38
  405302:	9308      	str	r3, [sp, #32]
  405304:	950d      	str	r5, [sp, #52]	; 0x34
  405306:	4683      	mov	fp, r0
  405308:	9013      	str	r0, [sp, #76]	; 0x4c
  40530a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40530e:	f7fe bf4b 	b.w	4041a8 <_svfprintf_r+0x38c>
  405312:	9b07      	ldr	r3, [sp, #28]
  405314:	07db      	lsls	r3, r3, #31
  405316:	465f      	mov	r7, fp
  405318:	d505      	bpl.n	405326 <_svfprintf_r+0x150a>
  40531a:	ae40      	add	r6, sp, #256	; 0x100
  40531c:	2330      	movs	r3, #48	; 0x30
  40531e:	f806 3d41 	strb.w	r3, [r6, #-65]!
  405322:	f7fe bf37 	b.w	404194 <_svfprintf_r+0x378>
  405326:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40532a:	ae30      	add	r6, sp, #192	; 0xc0
  40532c:	f7fe bf35 	b.w	40419a <_svfprintf_r+0x37e>
  405330:	2b00      	cmp	r3, #0
  405332:	dd7d      	ble.n	405430 <_svfprintf_r+0x1614>
  405334:	f1bb 0f00 	cmp.w	fp, #0
  405338:	d13d      	bne.n	4053b6 <_svfprintf_r+0x159a>
  40533a:	9a07      	ldr	r2, [sp, #28]
  40533c:	07d4      	lsls	r4, r2, #31
  40533e:	d43a      	bmi.n	4053b6 <_svfprintf_r+0x159a>
  405340:	461a      	mov	r2, r3
  405342:	920d      	str	r2, [sp, #52]	; 0x34
  405344:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405348:	e5a5      	b.n	404e96 <_svfprintf_r+0x107a>
  40534a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40534c:	2b47      	cmp	r3, #71	; 0x47
  40534e:	f47f ad70 	bne.w	404e32 <_svfprintf_r+0x1016>
  405352:	9b07      	ldr	r3, [sp, #28]
  405354:	07db      	lsls	r3, r3, #31
  405356:	f53f aeb1 	bmi.w	4050bc <_svfprintf_r+0x12a0>
  40535a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40535c:	1b9b      	subs	r3, r3, r6
  40535e:	9312      	str	r3, [sp, #72]	; 0x48
  405360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405362:	2b47      	cmp	r3, #71	; 0x47
  405364:	f43f aef8 	beq.w	405158 <_svfprintf_r+0x133c>
  405368:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40536a:	e71a      	b.n	4051a2 <_svfprintf_r+0x1386>
  40536c:	aa23      	add	r2, sp, #140	; 0x8c
  40536e:	9909      	ldr	r1, [sp, #36]	; 0x24
  405370:	980a      	ldr	r0, [sp, #40]	; 0x28
  405372:	f002 f873 	bl	40745c <__ssprint_r>
  405376:	2800      	cmp	r0, #0
  405378:	f47e ae49 	bne.w	40400e <_svfprintf_r+0x1f2>
  40537c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40537e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405380:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405382:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405386:	e631      	b.n	404fec <_svfprintf_r+0x11d0>
  405388:	46a0      	mov	r8, r4
  40538a:	2500      	movs	r5, #0
  40538c:	f7fe bda1 	b.w	403ed2 <_svfprintf_r+0xb6>
  405390:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405392:	e562      	b.n	404e5a <_svfprintf_r+0x103e>
  405394:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405396:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405398:	4413      	add	r3, r2
  40539a:	2267      	movs	r2, #103	; 0x67
  40539c:	930d      	str	r3, [sp, #52]	; 0x34
  40539e:	9211      	str	r2, [sp, #68]	; 0x44
  4053a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4053a4:	e577      	b.n	404e96 <_svfprintf_r+0x107a>
  4053a6:	3330      	adds	r3, #48	; 0x30
  4053a8:	2230      	movs	r2, #48	; 0x30
  4053aa:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  4053ae:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  4053b2:	ab20      	add	r3, sp, #128	; 0x80
  4053b4:	e731      	b.n	40521a <_svfprintf_r+0x13fe>
  4053b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4053b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4053ba:	189d      	adds	r5, r3, r2
  4053bc:	eb05 030b 	add.w	r3, r5, fp
  4053c0:	930d      	str	r3, [sp, #52]	; 0x34
  4053c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4053c6:	e566      	b.n	404e96 <_svfprintf_r+0x107a>
  4053c8:	9808      	ldr	r0, [sp, #32]
  4053ca:	4639      	mov	r1, r7
  4053cc:	2200      	movs	r2, #0
  4053ce:	2300      	movs	r3, #0
  4053d0:	f003 f8f0 	bl	4085b4 <__aeabi_dcmpeq>
  4053d4:	2800      	cmp	r0, #0
  4053d6:	f47f ae7b 	bne.w	4050d0 <_svfprintf_r+0x12b4>
  4053da:	f1c5 0501 	rsb	r5, r5, #1
  4053de:	951d      	str	r5, [sp, #116]	; 0x74
  4053e0:	442c      	add	r4, r5
  4053e2:	e527      	b.n	404e34 <_svfprintf_r+0x1018>
  4053e4:	4e32      	ldr	r6, [pc, #200]	; (4054b0 <_svfprintf_r+0x1694>)
  4053e6:	4b33      	ldr	r3, [pc, #204]	; (4054b4 <_svfprintf_r+0x1698>)
  4053e8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4053ec:	f7ff b82e 	b.w	40444c <_svfprintf_r+0x630>
  4053f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4053f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4053f4:	f1c3 0301 	rsb	r3, r3, #1
  4053f8:	441a      	add	r2, r3
  4053fa:	4613      	mov	r3, r2
  4053fc:	920d      	str	r2, [sp, #52]	; 0x34
  4053fe:	e778      	b.n	4052f2 <_svfprintf_r+0x14d6>
  405400:	9b07      	ldr	r3, [sp, #28]
  405402:	f013 0301 	ands.w	r3, r3, #1
  405406:	f47f af11 	bne.w	40522c <_svfprintf_r+0x1410>
  40540a:	9313      	str	r3, [sp, #76]	; 0x4c
  40540c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40540e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405412:	e540      	b.n	404e96 <_svfprintf_r+0x107a>
  405414:	980e      	ldr	r0, [sp, #56]	; 0x38
  405416:	f898 3001 	ldrb.w	r3, [r8, #1]
  40541a:	6805      	ldr	r5, [r0, #0]
  40541c:	3004      	adds	r0, #4
  40541e:	2d00      	cmp	r5, #0
  405420:	900e      	str	r0, [sp, #56]	; 0x38
  405422:	46a0      	mov	r8, r4
  405424:	f6be ad53 	bge.w	403ece <_svfprintf_r+0xb2>
  405428:	f04f 35ff 	mov.w	r5, #4294967295
  40542c:	f7fe bd4f 	b.w	403ece <_svfprintf_r+0xb2>
  405430:	f1bb 0f00 	cmp.w	fp, #0
  405434:	d102      	bne.n	40543c <_svfprintf_r+0x1620>
  405436:	9b07      	ldr	r3, [sp, #28]
  405438:	07d8      	lsls	r0, r3, #31
  40543a:	d507      	bpl.n	40544c <_svfprintf_r+0x1630>
  40543c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40543e:	1c5d      	adds	r5, r3, #1
  405440:	eb05 030b 	add.w	r3, r5, fp
  405444:	930d      	str	r3, [sp, #52]	; 0x34
  405446:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40544a:	e524      	b.n	404e96 <_svfprintf_r+0x107a>
  40544c:	2301      	movs	r3, #1
  40544e:	930d      	str	r3, [sp, #52]	; 0x34
  405450:	e521      	b.n	404e96 <_svfprintf_r+0x107a>
  405452:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405456:	f7ff b921 	b.w	40469c <_svfprintf_r+0x880>
  40545a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40545c:	230c      	movs	r3, #12
  40545e:	6013      	str	r3, [r2, #0]
  405460:	f04f 30ff 	mov.w	r0, #4294967295
  405464:	f7fe bddc 	b.w	404020 <_svfprintf_r+0x204>
  405468:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40546c:	f7ff b8f9 	b.w	404662 <_svfprintf_r+0x846>
  405470:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  405474:	e6d1      	b.n	40521a <_svfprintf_r+0x13fe>
  405476:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40547a:	f7fe bdd9 	b.w	404030 <_svfprintf_r+0x214>
  40547e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405482:	f7ff b857 	b.w	404534 <_svfprintf_r+0x718>
  405486:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40548a:	f7ff b825 	b.w	4044d8 <_svfprintf_r+0x6bc>
  40548e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405492:	f7ff b94c 	b.w	40472e <_svfprintf_r+0x912>
  405496:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40549a:	f7fe bff3 	b.w	404484 <_svfprintf_r+0x668>
  40549e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4054a2:	f7fe bfa3 	b.w	4043ec <_svfprintf_r+0x5d0>
  4054a6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4054aa:	f7fe be33 	b.w	404114 <_svfprintf_r+0x2f8>
  4054ae:	bf00      	nop
  4054b0:	004093b8 	.word	0x004093b8
  4054b4:	004093b4 	.word	0x004093b4

004054b8 <register_fini>:
  4054b8:	4b02      	ldr	r3, [pc, #8]	; (4054c4 <register_fini+0xc>)
  4054ba:	b113      	cbz	r3, 4054c2 <register_fini+0xa>
  4054bc:	4802      	ldr	r0, [pc, #8]	; (4054c8 <register_fini+0x10>)
  4054be:	f000 b805 	b.w	4054cc <atexit>
  4054c2:	4770      	bx	lr
  4054c4:	00000000 	.word	0x00000000
  4054c8:	00406459 	.word	0x00406459

004054cc <atexit>:
  4054cc:	2300      	movs	r3, #0
  4054ce:	4601      	mov	r1, r0
  4054d0:	461a      	mov	r2, r3
  4054d2:	4618      	mov	r0, r3
  4054d4:	f002 b842 	b.w	40755c <__register_exitproc>

004054d8 <quorem>:
  4054d8:	6902      	ldr	r2, [r0, #16]
  4054da:	690b      	ldr	r3, [r1, #16]
  4054dc:	4293      	cmp	r3, r2
  4054de:	f300 808d 	bgt.w	4055fc <quorem+0x124>
  4054e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4054e6:	f103 38ff 	add.w	r8, r3, #4294967295
  4054ea:	f101 0714 	add.w	r7, r1, #20
  4054ee:	f100 0b14 	add.w	fp, r0, #20
  4054f2:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4054f6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4054fa:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4054fe:	b083      	sub	sp, #12
  405500:	3201      	adds	r2, #1
  405502:	fbb3 f9f2 	udiv	r9, r3, r2
  405506:	eb0b 0304 	add.w	r3, fp, r4
  40550a:	9400      	str	r4, [sp, #0]
  40550c:	eb07 0a04 	add.w	sl, r7, r4
  405510:	9301      	str	r3, [sp, #4]
  405512:	f1b9 0f00 	cmp.w	r9, #0
  405516:	d039      	beq.n	40558c <quorem+0xb4>
  405518:	2500      	movs	r5, #0
  40551a:	46bc      	mov	ip, r7
  40551c:	46de      	mov	lr, fp
  40551e:	462b      	mov	r3, r5
  405520:	f85c 6b04 	ldr.w	r6, [ip], #4
  405524:	f8de 2000 	ldr.w	r2, [lr]
  405528:	b2b4      	uxth	r4, r6
  40552a:	fb09 5504 	mla	r5, r9, r4, r5
  40552e:	0c36      	lsrs	r6, r6, #16
  405530:	0c2c      	lsrs	r4, r5, #16
  405532:	fb09 4406 	mla	r4, r9, r6, r4
  405536:	b2ad      	uxth	r5, r5
  405538:	1b5b      	subs	r3, r3, r5
  40553a:	b2a6      	uxth	r6, r4
  40553c:	fa13 f382 	uxtah	r3, r3, r2
  405540:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  405544:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405548:	b29b      	uxth	r3, r3
  40554a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40554e:	45e2      	cmp	sl, ip
  405550:	f84e 3b04 	str.w	r3, [lr], #4
  405554:	ea4f 4514 	mov.w	r5, r4, lsr #16
  405558:	ea4f 4326 	mov.w	r3, r6, asr #16
  40555c:	d2e0      	bcs.n	405520 <quorem+0x48>
  40555e:	9b00      	ldr	r3, [sp, #0]
  405560:	f85b 3003 	ldr.w	r3, [fp, r3]
  405564:	b993      	cbnz	r3, 40558c <quorem+0xb4>
  405566:	9c01      	ldr	r4, [sp, #4]
  405568:	1f23      	subs	r3, r4, #4
  40556a:	459b      	cmp	fp, r3
  40556c:	d20c      	bcs.n	405588 <quorem+0xb0>
  40556e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405572:	b94b      	cbnz	r3, 405588 <quorem+0xb0>
  405574:	f1a4 0308 	sub.w	r3, r4, #8
  405578:	e002      	b.n	405580 <quorem+0xa8>
  40557a:	681a      	ldr	r2, [r3, #0]
  40557c:	3b04      	subs	r3, #4
  40557e:	b91a      	cbnz	r2, 405588 <quorem+0xb0>
  405580:	459b      	cmp	fp, r3
  405582:	f108 38ff 	add.w	r8, r8, #4294967295
  405586:	d3f8      	bcc.n	40557a <quorem+0xa2>
  405588:	f8c0 8010 	str.w	r8, [r0, #16]
  40558c:	4604      	mov	r4, r0
  40558e:	f001 fd5f 	bl	407050 <__mcmp>
  405592:	2800      	cmp	r0, #0
  405594:	db2e      	blt.n	4055f4 <quorem+0x11c>
  405596:	f109 0901 	add.w	r9, r9, #1
  40559a:	465d      	mov	r5, fp
  40559c:	2300      	movs	r3, #0
  40559e:	f857 1b04 	ldr.w	r1, [r7], #4
  4055a2:	6828      	ldr	r0, [r5, #0]
  4055a4:	b28a      	uxth	r2, r1
  4055a6:	1a9a      	subs	r2, r3, r2
  4055a8:	0c09      	lsrs	r1, r1, #16
  4055aa:	fa12 f280 	uxtah	r2, r2, r0
  4055ae:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  4055b2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4055b6:	b291      	uxth	r1, r2
  4055b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  4055bc:	45ba      	cmp	sl, r7
  4055be:	f845 1b04 	str.w	r1, [r5], #4
  4055c2:	ea4f 4323 	mov.w	r3, r3, asr #16
  4055c6:	d2ea      	bcs.n	40559e <quorem+0xc6>
  4055c8:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4055cc:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4055d0:	b982      	cbnz	r2, 4055f4 <quorem+0x11c>
  4055d2:	1f1a      	subs	r2, r3, #4
  4055d4:	4593      	cmp	fp, r2
  4055d6:	d20b      	bcs.n	4055f0 <quorem+0x118>
  4055d8:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4055dc:	b942      	cbnz	r2, 4055f0 <quorem+0x118>
  4055de:	3b08      	subs	r3, #8
  4055e0:	e002      	b.n	4055e8 <quorem+0x110>
  4055e2:	681a      	ldr	r2, [r3, #0]
  4055e4:	3b04      	subs	r3, #4
  4055e6:	b91a      	cbnz	r2, 4055f0 <quorem+0x118>
  4055e8:	459b      	cmp	fp, r3
  4055ea:	f108 38ff 	add.w	r8, r8, #4294967295
  4055ee:	d3f8      	bcc.n	4055e2 <quorem+0x10a>
  4055f0:	f8c4 8010 	str.w	r8, [r4, #16]
  4055f4:	4648      	mov	r0, r9
  4055f6:	b003      	add	sp, #12
  4055f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4055fc:	2000      	movs	r0, #0
  4055fe:	4770      	bx	lr

00405600 <_dtoa_r>:
  405600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405604:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405606:	b097      	sub	sp, #92	; 0x5c
  405608:	4681      	mov	r9, r0
  40560a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  40560c:	4692      	mov	sl, r2
  40560e:	469b      	mov	fp, r3
  405610:	b149      	cbz	r1, 405626 <_dtoa_r+0x26>
  405612:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405614:	604a      	str	r2, [r1, #4]
  405616:	2301      	movs	r3, #1
  405618:	4093      	lsls	r3, r2
  40561a:	608b      	str	r3, [r1, #8]
  40561c:	f001 fb36 	bl	406c8c <_Bfree>
  405620:	2300      	movs	r3, #0
  405622:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  405626:	f1bb 0f00 	cmp.w	fp, #0
  40562a:	46d8      	mov	r8, fp
  40562c:	db33      	blt.n	405696 <_dtoa_r+0x96>
  40562e:	2300      	movs	r3, #0
  405630:	6023      	str	r3, [r4, #0]
  405632:	4ba5      	ldr	r3, [pc, #660]	; (4058c8 <_dtoa_r+0x2c8>)
  405634:	461a      	mov	r2, r3
  405636:	ea08 0303 	and.w	r3, r8, r3
  40563a:	4293      	cmp	r3, r2
  40563c:	d014      	beq.n	405668 <_dtoa_r+0x68>
  40563e:	4650      	mov	r0, sl
  405640:	4659      	mov	r1, fp
  405642:	2200      	movs	r2, #0
  405644:	2300      	movs	r3, #0
  405646:	f002 ffb5 	bl	4085b4 <__aeabi_dcmpeq>
  40564a:	4605      	mov	r5, r0
  40564c:	b348      	cbz	r0, 4056a2 <_dtoa_r+0xa2>
  40564e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  405650:	2301      	movs	r3, #1
  405652:	6013      	str	r3, [r2, #0]
  405654:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405656:	2b00      	cmp	r3, #0
  405658:	f000 80c5 	beq.w	4057e6 <_dtoa_r+0x1e6>
  40565c:	489b      	ldr	r0, [pc, #620]	; (4058cc <_dtoa_r+0x2cc>)
  40565e:	6018      	str	r0, [r3, #0]
  405660:	3801      	subs	r0, #1
  405662:	b017      	add	sp, #92	; 0x5c
  405664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405668:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40566a:	f242 730f 	movw	r3, #9999	; 0x270f
  40566e:	6013      	str	r3, [r2, #0]
  405670:	f1ba 0f00 	cmp.w	sl, #0
  405674:	f000 80a2 	beq.w	4057bc <_dtoa_r+0x1bc>
  405678:	4895      	ldr	r0, [pc, #596]	; (4058d0 <_dtoa_r+0x2d0>)
  40567a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40567c:	2b00      	cmp	r3, #0
  40567e:	d0f0      	beq.n	405662 <_dtoa_r+0x62>
  405680:	78c3      	ldrb	r3, [r0, #3]
  405682:	2b00      	cmp	r3, #0
  405684:	f000 80b1 	beq.w	4057ea <_dtoa_r+0x1ea>
  405688:	f100 0308 	add.w	r3, r0, #8
  40568c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40568e:	6013      	str	r3, [r2, #0]
  405690:	b017      	add	sp, #92	; 0x5c
  405692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405696:	2301      	movs	r3, #1
  405698:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  40569c:	6023      	str	r3, [r4, #0]
  40569e:	46c3      	mov	fp, r8
  4056a0:	e7c7      	b.n	405632 <_dtoa_r+0x32>
  4056a2:	aa14      	add	r2, sp, #80	; 0x50
  4056a4:	ab15      	add	r3, sp, #84	; 0x54
  4056a6:	9201      	str	r2, [sp, #4]
  4056a8:	9300      	str	r3, [sp, #0]
  4056aa:	4652      	mov	r2, sl
  4056ac:	465b      	mov	r3, fp
  4056ae:	4648      	mov	r0, r9
  4056b0:	f001 fd78 	bl	4071a4 <__d2b>
  4056b4:	ea5f 5418 	movs.w	r4, r8, lsr #20
  4056b8:	9008      	str	r0, [sp, #32]
  4056ba:	f040 8088 	bne.w	4057ce <_dtoa_r+0x1ce>
  4056be:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4056c0:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4056c2:	442c      	add	r4, r5
  4056c4:	f204 4332 	addw	r3, r4, #1074	; 0x432
  4056c8:	2b20      	cmp	r3, #32
  4056ca:	f340 8291 	ble.w	405bf0 <_dtoa_r+0x5f0>
  4056ce:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4056d2:	f204 4012 	addw	r0, r4, #1042	; 0x412
  4056d6:	fa08 f803 	lsl.w	r8, r8, r3
  4056da:	fa2a f000 	lsr.w	r0, sl, r0
  4056de:	ea40 0008 	orr.w	r0, r0, r8
  4056e2:	f002 fc89 	bl	407ff8 <__aeabi_ui2d>
  4056e6:	2301      	movs	r3, #1
  4056e8:	3c01      	subs	r4, #1
  4056ea:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4056ee:	9310      	str	r3, [sp, #64]	; 0x40
  4056f0:	2200      	movs	r2, #0
  4056f2:	4b78      	ldr	r3, [pc, #480]	; (4058d4 <_dtoa_r+0x2d4>)
  4056f4:	f002 fb42 	bl	407d7c <__aeabi_dsub>
  4056f8:	a36d      	add	r3, pc, #436	; (adr r3, 4058b0 <_dtoa_r+0x2b0>)
  4056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056fe:	f002 fcf1 	bl	4080e4 <__aeabi_dmul>
  405702:	a36d      	add	r3, pc, #436	; (adr r3, 4058b8 <_dtoa_r+0x2b8>)
  405704:	e9d3 2300 	ldrd	r2, r3, [r3]
  405708:	f002 fb3a 	bl	407d80 <__adddf3>
  40570c:	4606      	mov	r6, r0
  40570e:	4620      	mov	r0, r4
  405710:	460f      	mov	r7, r1
  405712:	f002 fc81 	bl	408018 <__aeabi_i2d>
  405716:	a36a      	add	r3, pc, #424	; (adr r3, 4058c0 <_dtoa_r+0x2c0>)
  405718:	e9d3 2300 	ldrd	r2, r3, [r3]
  40571c:	f002 fce2 	bl	4080e4 <__aeabi_dmul>
  405720:	4602      	mov	r2, r0
  405722:	460b      	mov	r3, r1
  405724:	4630      	mov	r0, r6
  405726:	4639      	mov	r1, r7
  405728:	f002 fb2a 	bl	407d80 <__adddf3>
  40572c:	4606      	mov	r6, r0
  40572e:	460f      	mov	r7, r1
  405730:	f002 ff88 	bl	408644 <__aeabi_d2iz>
  405734:	2200      	movs	r2, #0
  405736:	9004      	str	r0, [sp, #16]
  405738:	2300      	movs	r3, #0
  40573a:	4630      	mov	r0, r6
  40573c:	4639      	mov	r1, r7
  40573e:	f002 ff43 	bl	4085c8 <__aeabi_dcmplt>
  405742:	2800      	cmp	r0, #0
  405744:	f040 8230 	bne.w	405ba8 <_dtoa_r+0x5a8>
  405748:	9e04      	ldr	r6, [sp, #16]
  40574a:	2e16      	cmp	r6, #22
  40574c:	f200 8229 	bhi.w	405ba2 <_dtoa_r+0x5a2>
  405750:	4b61      	ldr	r3, [pc, #388]	; (4058d8 <_dtoa_r+0x2d8>)
  405752:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  405756:	e9d3 0100 	ldrd	r0, r1, [r3]
  40575a:	4652      	mov	r2, sl
  40575c:	465b      	mov	r3, fp
  40575e:	f002 ff51 	bl	408604 <__aeabi_dcmpgt>
  405762:	2800      	cmp	r0, #0
  405764:	f000 8249 	beq.w	405bfa <_dtoa_r+0x5fa>
  405768:	1e73      	subs	r3, r6, #1
  40576a:	9304      	str	r3, [sp, #16]
  40576c:	2300      	movs	r3, #0
  40576e:	930c      	str	r3, [sp, #48]	; 0x30
  405770:	1b2c      	subs	r4, r5, r4
  405772:	1e63      	subs	r3, r4, #1
  405774:	9302      	str	r3, [sp, #8]
  405776:	f100 8232 	bmi.w	405bde <_dtoa_r+0x5de>
  40577a:	2300      	movs	r3, #0
  40577c:	9305      	str	r3, [sp, #20]
  40577e:	9b04      	ldr	r3, [sp, #16]
  405780:	2b00      	cmp	r3, #0
  405782:	f2c0 8223 	blt.w	405bcc <_dtoa_r+0x5cc>
  405786:	9a02      	ldr	r2, [sp, #8]
  405788:	930b      	str	r3, [sp, #44]	; 0x2c
  40578a:	4611      	mov	r1, r2
  40578c:	4419      	add	r1, r3
  40578e:	2300      	movs	r3, #0
  405790:	9102      	str	r1, [sp, #8]
  405792:	930a      	str	r3, [sp, #40]	; 0x28
  405794:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405796:	2b09      	cmp	r3, #9
  405798:	d829      	bhi.n	4057ee <_dtoa_r+0x1ee>
  40579a:	2b05      	cmp	r3, #5
  40579c:	f340 8658 	ble.w	406450 <_dtoa_r+0xe50>
  4057a0:	3b04      	subs	r3, #4
  4057a2:	9320      	str	r3, [sp, #128]	; 0x80
  4057a4:	2500      	movs	r5, #0
  4057a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4057a8:	3b02      	subs	r3, #2
  4057aa:	2b03      	cmp	r3, #3
  4057ac:	f200 8635 	bhi.w	40641a <_dtoa_r+0xe1a>
  4057b0:	e8df f013 	tbh	[pc, r3, lsl #1]
  4057b4:	0228032c 	.word	0x0228032c
  4057b8:	04590337 	.word	0x04590337
  4057bc:	4b44      	ldr	r3, [pc, #272]	; (4058d0 <_dtoa_r+0x2d0>)
  4057be:	4a47      	ldr	r2, [pc, #284]	; (4058dc <_dtoa_r+0x2dc>)
  4057c0:	f3c8 0013 	ubfx	r0, r8, #0, #20
  4057c4:	2800      	cmp	r0, #0
  4057c6:	bf14      	ite	ne
  4057c8:	4618      	movne	r0, r3
  4057ca:	4610      	moveq	r0, r2
  4057cc:	e755      	b.n	40567a <_dtoa_r+0x7a>
  4057ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4057d2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4057d6:	9510      	str	r5, [sp, #64]	; 0x40
  4057d8:	4650      	mov	r0, sl
  4057da:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  4057de:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4057e2:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4057e4:	e784      	b.n	4056f0 <_dtoa_r+0xf0>
  4057e6:	483e      	ldr	r0, [pc, #248]	; (4058e0 <_dtoa_r+0x2e0>)
  4057e8:	e73b      	b.n	405662 <_dtoa_r+0x62>
  4057ea:	1cc3      	adds	r3, r0, #3
  4057ec:	e74e      	b.n	40568c <_dtoa_r+0x8c>
  4057ee:	2100      	movs	r1, #0
  4057f0:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4057f4:	4648      	mov	r0, r9
  4057f6:	9120      	str	r1, [sp, #128]	; 0x80
  4057f8:	f001 fa22 	bl	406c40 <_Balloc>
  4057fc:	f04f 33ff 	mov.w	r3, #4294967295
  405800:	9306      	str	r3, [sp, #24]
  405802:	9a20      	ldr	r2, [sp, #128]	; 0x80
  405804:	930d      	str	r3, [sp, #52]	; 0x34
  405806:	2301      	movs	r3, #1
  405808:	9007      	str	r0, [sp, #28]
  40580a:	9221      	str	r2, [sp, #132]	; 0x84
  40580c:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  405810:	9309      	str	r3, [sp, #36]	; 0x24
  405812:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405814:	2b00      	cmp	r3, #0
  405816:	f2c0 80d1 	blt.w	4059bc <_dtoa_r+0x3bc>
  40581a:	9a04      	ldr	r2, [sp, #16]
  40581c:	2a0e      	cmp	r2, #14
  40581e:	f300 80cd 	bgt.w	4059bc <_dtoa_r+0x3bc>
  405822:	4b2d      	ldr	r3, [pc, #180]	; (4058d8 <_dtoa_r+0x2d8>)
  405824:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405828:	e9d3 3400 	ldrd	r3, r4, [r3]
  40582c:	e9cd 3402 	strd	r3, r4, [sp, #8]
  405830:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405832:	2b00      	cmp	r3, #0
  405834:	f2c0 8300 	blt.w	405e38 <_dtoa_r+0x838>
  405838:	4656      	mov	r6, sl
  40583a:	465f      	mov	r7, fp
  40583c:	4650      	mov	r0, sl
  40583e:	4659      	mov	r1, fp
  405840:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  405844:	4652      	mov	r2, sl
  405846:	465b      	mov	r3, fp
  405848:	f002 fd76 	bl	408338 <__aeabi_ddiv>
  40584c:	f002 fefa 	bl	408644 <__aeabi_d2iz>
  405850:	4604      	mov	r4, r0
  405852:	f002 fbe1 	bl	408018 <__aeabi_i2d>
  405856:	4652      	mov	r2, sl
  405858:	465b      	mov	r3, fp
  40585a:	f002 fc43 	bl	4080e4 <__aeabi_dmul>
  40585e:	460b      	mov	r3, r1
  405860:	4602      	mov	r2, r0
  405862:	4639      	mov	r1, r7
  405864:	4630      	mov	r0, r6
  405866:	f002 fa89 	bl	407d7c <__aeabi_dsub>
  40586a:	9d07      	ldr	r5, [sp, #28]
  40586c:	f104 0330 	add.w	r3, r4, #48	; 0x30
  405870:	702b      	strb	r3, [r5, #0]
  405872:	9b06      	ldr	r3, [sp, #24]
  405874:	2b01      	cmp	r3, #1
  405876:	4606      	mov	r6, r0
  405878:	460f      	mov	r7, r1
  40587a:	f105 0501 	add.w	r5, r5, #1
  40587e:	d062      	beq.n	405946 <_dtoa_r+0x346>
  405880:	2200      	movs	r2, #0
  405882:	4b18      	ldr	r3, [pc, #96]	; (4058e4 <_dtoa_r+0x2e4>)
  405884:	f002 fc2e 	bl	4080e4 <__aeabi_dmul>
  405888:	2200      	movs	r2, #0
  40588a:	2300      	movs	r3, #0
  40588c:	4606      	mov	r6, r0
  40588e:	460f      	mov	r7, r1
  405890:	f002 fe90 	bl	4085b4 <__aeabi_dcmpeq>
  405894:	2800      	cmp	r0, #0
  405896:	d17e      	bne.n	405996 <_dtoa_r+0x396>
  405898:	f8cd 9014 	str.w	r9, [sp, #20]
  40589c:	f8dd a018 	ldr.w	sl, [sp, #24]
  4058a0:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4058a4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  4058a8:	e029      	b.n	4058fe <_dtoa_r+0x2fe>
  4058aa:	bf00      	nop
  4058ac:	f3af 8000 	nop.w
  4058b0:	636f4361 	.word	0x636f4361
  4058b4:	3fd287a7 	.word	0x3fd287a7
  4058b8:	8b60c8b3 	.word	0x8b60c8b3
  4058bc:	3fc68a28 	.word	0x3fc68a28
  4058c0:	509f79fb 	.word	0x509f79fb
  4058c4:	3fd34413 	.word	0x3fd34413
  4058c8:	7ff00000 	.word	0x7ff00000
  4058cc:	004093ed 	.word	0x004093ed
  4058d0:	0040940c 	.word	0x0040940c
  4058d4:	3ff80000 	.word	0x3ff80000
  4058d8:	00409420 	.word	0x00409420
  4058dc:	00409400 	.word	0x00409400
  4058e0:	004093ec 	.word	0x004093ec
  4058e4:	40240000 	.word	0x40240000
  4058e8:	f002 fbfc 	bl	4080e4 <__aeabi_dmul>
  4058ec:	2200      	movs	r2, #0
  4058ee:	2300      	movs	r3, #0
  4058f0:	4606      	mov	r6, r0
  4058f2:	460f      	mov	r7, r1
  4058f4:	f002 fe5e 	bl	4085b4 <__aeabi_dcmpeq>
  4058f8:	2800      	cmp	r0, #0
  4058fa:	f040 83b7 	bne.w	40606c <_dtoa_r+0xa6c>
  4058fe:	4642      	mov	r2, r8
  405900:	464b      	mov	r3, r9
  405902:	4630      	mov	r0, r6
  405904:	4639      	mov	r1, r7
  405906:	f002 fd17 	bl	408338 <__aeabi_ddiv>
  40590a:	f002 fe9b 	bl	408644 <__aeabi_d2iz>
  40590e:	4604      	mov	r4, r0
  405910:	f002 fb82 	bl	408018 <__aeabi_i2d>
  405914:	4642      	mov	r2, r8
  405916:	464b      	mov	r3, r9
  405918:	f002 fbe4 	bl	4080e4 <__aeabi_dmul>
  40591c:	4602      	mov	r2, r0
  40591e:	460b      	mov	r3, r1
  405920:	4630      	mov	r0, r6
  405922:	4639      	mov	r1, r7
  405924:	f002 fa2a 	bl	407d7c <__aeabi_dsub>
  405928:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40592c:	f805 eb01 	strb.w	lr, [r5], #1
  405930:	ebcb 0e05 	rsb	lr, fp, r5
  405934:	45d6      	cmp	lr, sl
  405936:	4606      	mov	r6, r0
  405938:	460f      	mov	r7, r1
  40593a:	f04f 0200 	mov.w	r2, #0
  40593e:	4bb0      	ldr	r3, [pc, #704]	; (405c00 <_dtoa_r+0x600>)
  405940:	d1d2      	bne.n	4058e8 <_dtoa_r+0x2e8>
  405942:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405946:	4632      	mov	r2, r6
  405948:	463b      	mov	r3, r7
  40594a:	4630      	mov	r0, r6
  40594c:	4639      	mov	r1, r7
  40594e:	f002 fa17 	bl	407d80 <__adddf3>
  405952:	4606      	mov	r6, r0
  405954:	460f      	mov	r7, r1
  405956:	4602      	mov	r2, r0
  405958:	460b      	mov	r3, r1
  40595a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40595e:	f002 fe33 	bl	4085c8 <__aeabi_dcmplt>
  405962:	b940      	cbnz	r0, 405976 <_dtoa_r+0x376>
  405964:	4632      	mov	r2, r6
  405966:	463b      	mov	r3, r7
  405968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40596c:	f002 fe22 	bl	4085b4 <__aeabi_dcmpeq>
  405970:	b188      	cbz	r0, 405996 <_dtoa_r+0x396>
  405972:	07e3      	lsls	r3, r4, #31
  405974:	d50f      	bpl.n	405996 <_dtoa_r+0x396>
  405976:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40597a:	9a07      	ldr	r2, [sp, #28]
  40597c:	1e6b      	subs	r3, r5, #1
  40597e:	e004      	b.n	40598a <_dtoa_r+0x38a>
  405980:	429a      	cmp	r2, r3
  405982:	f000 842c 	beq.w	4061de <_dtoa_r+0xbde>
  405986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40598a:	2c39      	cmp	r4, #57	; 0x39
  40598c:	f103 0501 	add.w	r5, r3, #1
  405990:	d0f6      	beq.n	405980 <_dtoa_r+0x380>
  405992:	3401      	adds	r4, #1
  405994:	701c      	strb	r4, [r3, #0]
  405996:	9908      	ldr	r1, [sp, #32]
  405998:	4648      	mov	r0, r9
  40599a:	f001 f977 	bl	406c8c <_Bfree>
  40599e:	2200      	movs	r2, #0
  4059a0:	9b04      	ldr	r3, [sp, #16]
  4059a2:	702a      	strb	r2, [r5, #0]
  4059a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4059a6:	3301      	adds	r3, #1
  4059a8:	6013      	str	r3, [r2, #0]
  4059aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4059ac:	2b00      	cmp	r3, #0
  4059ae:	f000 83a7 	beq.w	406100 <_dtoa_r+0xb00>
  4059b2:	9807      	ldr	r0, [sp, #28]
  4059b4:	601d      	str	r5, [r3, #0]
  4059b6:	b017      	add	sp, #92	; 0x5c
  4059b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4059be:	2a00      	cmp	r2, #0
  4059c0:	f000 8112 	beq.w	405be8 <_dtoa_r+0x5e8>
  4059c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4059c6:	2a01      	cmp	r2, #1
  4059c8:	f340 8258 	ble.w	405e7c <_dtoa_r+0x87c>
  4059cc:	9b06      	ldr	r3, [sp, #24]
  4059ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4059d0:	1e5f      	subs	r7, r3, #1
  4059d2:	42ba      	cmp	r2, r7
  4059d4:	f2c0 8397 	blt.w	406106 <_dtoa_r+0xb06>
  4059d8:	1bd7      	subs	r7, r2, r7
  4059da:	9b06      	ldr	r3, [sp, #24]
  4059dc:	2b00      	cmp	r3, #0
  4059de:	f2c0 848a 	blt.w	4062f6 <_dtoa_r+0xcf6>
  4059e2:	9d05      	ldr	r5, [sp, #20]
  4059e4:	9b06      	ldr	r3, [sp, #24]
  4059e6:	9a05      	ldr	r2, [sp, #20]
  4059e8:	441a      	add	r2, r3
  4059ea:	9205      	str	r2, [sp, #20]
  4059ec:	9a02      	ldr	r2, [sp, #8]
  4059ee:	2101      	movs	r1, #1
  4059f0:	441a      	add	r2, r3
  4059f2:	4648      	mov	r0, r9
  4059f4:	9202      	str	r2, [sp, #8]
  4059f6:	f001 f9e1 	bl	406dbc <__i2b>
  4059fa:	4606      	mov	r6, r0
  4059fc:	b165      	cbz	r5, 405a18 <_dtoa_r+0x418>
  4059fe:	9902      	ldr	r1, [sp, #8]
  405a00:	2900      	cmp	r1, #0
  405a02:	460b      	mov	r3, r1
  405a04:	dd08      	ble.n	405a18 <_dtoa_r+0x418>
  405a06:	42a9      	cmp	r1, r5
  405a08:	9a05      	ldr	r2, [sp, #20]
  405a0a:	bfa8      	it	ge
  405a0c:	462b      	movge	r3, r5
  405a0e:	1ad2      	subs	r2, r2, r3
  405a10:	1aed      	subs	r5, r5, r3
  405a12:	1acb      	subs	r3, r1, r3
  405a14:	9205      	str	r2, [sp, #20]
  405a16:	9302      	str	r3, [sp, #8]
  405a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405a1a:	2b00      	cmp	r3, #0
  405a1c:	f340 82fc 	ble.w	406018 <_dtoa_r+0xa18>
  405a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405a22:	2a00      	cmp	r2, #0
  405a24:	f000 8201 	beq.w	405e2a <_dtoa_r+0x82a>
  405a28:	2f00      	cmp	r7, #0
  405a2a:	f000 81fe 	beq.w	405e2a <_dtoa_r+0x82a>
  405a2e:	4631      	mov	r1, r6
  405a30:	463a      	mov	r2, r7
  405a32:	4648      	mov	r0, r9
  405a34:	f001 fa64 	bl	406f00 <__pow5mult>
  405a38:	f8dd 8020 	ldr.w	r8, [sp, #32]
  405a3c:	4601      	mov	r1, r0
  405a3e:	4642      	mov	r2, r8
  405a40:	4606      	mov	r6, r0
  405a42:	4648      	mov	r0, r9
  405a44:	f001 f9c4 	bl	406dd0 <__multiply>
  405a48:	4641      	mov	r1, r8
  405a4a:	4604      	mov	r4, r0
  405a4c:	4648      	mov	r0, r9
  405a4e:	f001 f91d 	bl	406c8c <_Bfree>
  405a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405a54:	1bdb      	subs	r3, r3, r7
  405a56:	930a      	str	r3, [sp, #40]	; 0x28
  405a58:	f040 81e6 	bne.w	405e28 <_dtoa_r+0x828>
  405a5c:	2101      	movs	r1, #1
  405a5e:	4648      	mov	r0, r9
  405a60:	f001 f9ac 	bl	406dbc <__i2b>
  405a64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405a66:	4680      	mov	r8, r0
  405a68:	2b00      	cmp	r3, #0
  405a6a:	f000 8219 	beq.w	405ea0 <_dtoa_r+0x8a0>
  405a6e:	4601      	mov	r1, r0
  405a70:	461a      	mov	r2, r3
  405a72:	4648      	mov	r0, r9
  405a74:	f001 fa44 	bl	406f00 <__pow5mult>
  405a78:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405a7a:	2b01      	cmp	r3, #1
  405a7c:	4680      	mov	r8, r0
  405a7e:	f340 82f8 	ble.w	406072 <_dtoa_r+0xa72>
  405a82:	2700      	movs	r7, #0
  405a84:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405a88:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405a8c:	6918      	ldr	r0, [r3, #16]
  405a8e:	f001 f947 	bl	406d20 <__hi0bits>
  405a92:	f1c0 0020 	rsb	r0, r0, #32
  405a96:	9a02      	ldr	r2, [sp, #8]
  405a98:	4410      	add	r0, r2
  405a9a:	f010 001f 	ands.w	r0, r0, #31
  405a9e:	f000 81f6 	beq.w	405e8e <_dtoa_r+0x88e>
  405aa2:	f1c0 0320 	rsb	r3, r0, #32
  405aa6:	2b04      	cmp	r3, #4
  405aa8:	f340 84ca 	ble.w	406440 <_dtoa_r+0xe40>
  405aac:	9b05      	ldr	r3, [sp, #20]
  405aae:	f1c0 001c 	rsb	r0, r0, #28
  405ab2:	4403      	add	r3, r0
  405ab4:	9305      	str	r3, [sp, #20]
  405ab6:	4613      	mov	r3, r2
  405ab8:	4403      	add	r3, r0
  405aba:	4405      	add	r5, r0
  405abc:	9302      	str	r3, [sp, #8]
  405abe:	9b05      	ldr	r3, [sp, #20]
  405ac0:	2b00      	cmp	r3, #0
  405ac2:	dd05      	ble.n	405ad0 <_dtoa_r+0x4d0>
  405ac4:	4621      	mov	r1, r4
  405ac6:	461a      	mov	r2, r3
  405ac8:	4648      	mov	r0, r9
  405aca:	f001 fa69 	bl	406fa0 <__lshift>
  405ace:	4604      	mov	r4, r0
  405ad0:	9b02      	ldr	r3, [sp, #8]
  405ad2:	2b00      	cmp	r3, #0
  405ad4:	dd05      	ble.n	405ae2 <_dtoa_r+0x4e2>
  405ad6:	4641      	mov	r1, r8
  405ad8:	461a      	mov	r2, r3
  405ada:	4648      	mov	r0, r9
  405adc:	f001 fa60 	bl	406fa0 <__lshift>
  405ae0:	4680      	mov	r8, r0
  405ae2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405ae4:	2b00      	cmp	r3, #0
  405ae6:	f040 827c 	bne.w	405fe2 <_dtoa_r+0x9e2>
  405aea:	9b06      	ldr	r3, [sp, #24]
  405aec:	2b00      	cmp	r3, #0
  405aee:	f340 8295 	ble.w	40601c <_dtoa_r+0xa1c>
  405af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405af4:	2b00      	cmp	r3, #0
  405af6:	f040 81f5 	bne.w	405ee4 <_dtoa_r+0x8e4>
  405afa:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405afe:	9f06      	ldr	r7, [sp, #24]
  405b00:	465d      	mov	r5, fp
  405b02:	e002      	b.n	405b0a <_dtoa_r+0x50a>
  405b04:	f001 f8cc 	bl	406ca0 <__multadd>
  405b08:	4604      	mov	r4, r0
  405b0a:	4641      	mov	r1, r8
  405b0c:	4620      	mov	r0, r4
  405b0e:	f7ff fce3 	bl	4054d8 <quorem>
  405b12:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  405b16:	f805 ab01 	strb.w	sl, [r5], #1
  405b1a:	ebcb 0305 	rsb	r3, fp, r5
  405b1e:	42bb      	cmp	r3, r7
  405b20:	f04f 020a 	mov.w	r2, #10
  405b24:	f04f 0300 	mov.w	r3, #0
  405b28:	4621      	mov	r1, r4
  405b2a:	4648      	mov	r0, r9
  405b2c:	dbea      	blt.n	405b04 <_dtoa_r+0x504>
  405b2e:	9b07      	ldr	r3, [sp, #28]
  405b30:	9a06      	ldr	r2, [sp, #24]
  405b32:	2a01      	cmp	r2, #1
  405b34:	bfac      	ite	ge
  405b36:	189b      	addge	r3, r3, r2
  405b38:	3301      	addlt	r3, #1
  405b3a:	461d      	mov	r5, r3
  405b3c:	f04f 0b00 	mov.w	fp, #0
  405b40:	4621      	mov	r1, r4
  405b42:	2201      	movs	r2, #1
  405b44:	4648      	mov	r0, r9
  405b46:	f001 fa2b 	bl	406fa0 <__lshift>
  405b4a:	4641      	mov	r1, r8
  405b4c:	9008      	str	r0, [sp, #32]
  405b4e:	f001 fa7f 	bl	407050 <__mcmp>
  405b52:	2800      	cmp	r0, #0
  405b54:	f340 830d 	ble.w	406172 <_dtoa_r+0xb72>
  405b58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405b5c:	9907      	ldr	r1, [sp, #28]
  405b5e:	1e6b      	subs	r3, r5, #1
  405b60:	e004      	b.n	405b6c <_dtoa_r+0x56c>
  405b62:	428b      	cmp	r3, r1
  405b64:	f000 8278 	beq.w	406058 <_dtoa_r+0xa58>
  405b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405b6c:	2a39      	cmp	r2, #57	; 0x39
  405b6e:	f103 0501 	add.w	r5, r3, #1
  405b72:	d0f6      	beq.n	405b62 <_dtoa_r+0x562>
  405b74:	3201      	adds	r2, #1
  405b76:	701a      	strb	r2, [r3, #0]
  405b78:	4641      	mov	r1, r8
  405b7a:	4648      	mov	r0, r9
  405b7c:	f001 f886 	bl	406c8c <_Bfree>
  405b80:	2e00      	cmp	r6, #0
  405b82:	f43f af08 	beq.w	405996 <_dtoa_r+0x396>
  405b86:	f1bb 0f00 	cmp.w	fp, #0
  405b8a:	d005      	beq.n	405b98 <_dtoa_r+0x598>
  405b8c:	45b3      	cmp	fp, r6
  405b8e:	d003      	beq.n	405b98 <_dtoa_r+0x598>
  405b90:	4659      	mov	r1, fp
  405b92:	4648      	mov	r0, r9
  405b94:	f001 f87a 	bl	406c8c <_Bfree>
  405b98:	4631      	mov	r1, r6
  405b9a:	4648      	mov	r0, r9
  405b9c:	f001 f876 	bl	406c8c <_Bfree>
  405ba0:	e6f9      	b.n	405996 <_dtoa_r+0x396>
  405ba2:	2301      	movs	r3, #1
  405ba4:	930c      	str	r3, [sp, #48]	; 0x30
  405ba6:	e5e3      	b.n	405770 <_dtoa_r+0x170>
  405ba8:	f8dd 8010 	ldr.w	r8, [sp, #16]
  405bac:	4640      	mov	r0, r8
  405bae:	f002 fa33 	bl	408018 <__aeabi_i2d>
  405bb2:	4602      	mov	r2, r0
  405bb4:	460b      	mov	r3, r1
  405bb6:	4630      	mov	r0, r6
  405bb8:	4639      	mov	r1, r7
  405bba:	f002 fcfb 	bl	4085b4 <__aeabi_dcmpeq>
  405bbe:	2800      	cmp	r0, #0
  405bc0:	f47f adc2 	bne.w	405748 <_dtoa_r+0x148>
  405bc4:	f108 33ff 	add.w	r3, r8, #4294967295
  405bc8:	9304      	str	r3, [sp, #16]
  405bca:	e5bd      	b.n	405748 <_dtoa_r+0x148>
  405bcc:	9a05      	ldr	r2, [sp, #20]
  405bce:	9b04      	ldr	r3, [sp, #16]
  405bd0:	1ad2      	subs	r2, r2, r3
  405bd2:	425b      	negs	r3, r3
  405bd4:	930a      	str	r3, [sp, #40]	; 0x28
  405bd6:	2300      	movs	r3, #0
  405bd8:	9205      	str	r2, [sp, #20]
  405bda:	930b      	str	r3, [sp, #44]	; 0x2c
  405bdc:	e5da      	b.n	405794 <_dtoa_r+0x194>
  405bde:	425b      	negs	r3, r3
  405be0:	9305      	str	r3, [sp, #20]
  405be2:	2300      	movs	r3, #0
  405be4:	9302      	str	r3, [sp, #8]
  405be6:	e5ca      	b.n	40577e <_dtoa_r+0x17e>
  405be8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405bea:	9d05      	ldr	r5, [sp, #20]
  405bec:	9e09      	ldr	r6, [sp, #36]	; 0x24
  405bee:	e705      	b.n	4059fc <_dtoa_r+0x3fc>
  405bf0:	f1c3 0820 	rsb	r8, r3, #32
  405bf4:	fa0a f008 	lsl.w	r0, sl, r8
  405bf8:	e573      	b.n	4056e2 <_dtoa_r+0xe2>
  405bfa:	900c      	str	r0, [sp, #48]	; 0x30
  405bfc:	e5b8      	b.n	405770 <_dtoa_r+0x170>
  405bfe:	bf00      	nop
  405c00:	40240000 	.word	0x40240000
  405c04:	2300      	movs	r3, #0
  405c06:	9309      	str	r3, [sp, #36]	; 0x24
  405c08:	9b04      	ldr	r3, [sp, #16]
  405c0a:	9a21      	ldr	r2, [sp, #132]	; 0x84
  405c0c:	4413      	add	r3, r2
  405c0e:	930d      	str	r3, [sp, #52]	; 0x34
  405c10:	3301      	adds	r3, #1
  405c12:	2b00      	cmp	r3, #0
  405c14:	9306      	str	r3, [sp, #24]
  405c16:	f340 8283 	ble.w	406120 <_dtoa_r+0xb20>
  405c1a:	9c06      	ldr	r4, [sp, #24]
  405c1c:	4626      	mov	r6, r4
  405c1e:	2100      	movs	r1, #0
  405c20:	2e17      	cmp	r6, #23
  405c22:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  405c26:	d90b      	bls.n	405c40 <_dtoa_r+0x640>
  405c28:	2201      	movs	r2, #1
  405c2a:	2304      	movs	r3, #4
  405c2c:	005b      	lsls	r3, r3, #1
  405c2e:	f103 0014 	add.w	r0, r3, #20
  405c32:	42b0      	cmp	r0, r6
  405c34:	4611      	mov	r1, r2
  405c36:	f102 0201 	add.w	r2, r2, #1
  405c3a:	d9f7      	bls.n	405c2c <_dtoa_r+0x62c>
  405c3c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  405c40:	4648      	mov	r0, r9
  405c42:	f000 fffd 	bl	406c40 <_Balloc>
  405c46:	2c0e      	cmp	r4, #14
  405c48:	9007      	str	r0, [sp, #28]
  405c4a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  405c4e:	f63f ade0 	bhi.w	405812 <_dtoa_r+0x212>
  405c52:	2d00      	cmp	r5, #0
  405c54:	f43f addd 	beq.w	405812 <_dtoa_r+0x212>
  405c58:	9904      	ldr	r1, [sp, #16]
  405c5a:	4657      	mov	r7, sl
  405c5c:	46d8      	mov	r8, fp
  405c5e:	2900      	cmp	r1, #0
  405c60:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  405c64:	f340 8292 	ble.w	40618c <_dtoa_r+0xb8c>
  405c68:	4b91      	ldr	r3, [pc, #580]	; (405eb0 <_dtoa_r+0x8b0>)
  405c6a:	f001 020f 	and.w	r2, r1, #15
  405c6e:	110e      	asrs	r6, r1, #4
  405c70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405c74:	06f0      	lsls	r0, r6, #27
  405c76:	e9d3 4500 	ldrd	r4, r5, [r3]
  405c7a:	f140 824c 	bpl.w	406116 <_dtoa_r+0xb16>
  405c7e:	4b8d      	ldr	r3, [pc, #564]	; (405eb4 <_dtoa_r+0x8b4>)
  405c80:	4650      	mov	r0, sl
  405c82:	4659      	mov	r1, fp
  405c84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405c88:	f002 fb56 	bl	408338 <__aeabi_ddiv>
  405c8c:	f006 060f 	and.w	r6, r6, #15
  405c90:	4682      	mov	sl, r0
  405c92:	468b      	mov	fp, r1
  405c94:	f04f 0803 	mov.w	r8, #3
  405c98:	b186      	cbz	r6, 405cbc <_dtoa_r+0x6bc>
  405c9a:	4f86      	ldr	r7, [pc, #536]	; (405eb4 <_dtoa_r+0x8b4>)
  405c9c:	07f1      	lsls	r1, r6, #31
  405c9e:	d509      	bpl.n	405cb4 <_dtoa_r+0x6b4>
  405ca0:	4620      	mov	r0, r4
  405ca2:	4629      	mov	r1, r5
  405ca4:	e9d7 2300 	ldrd	r2, r3, [r7]
  405ca8:	f002 fa1c 	bl	4080e4 <__aeabi_dmul>
  405cac:	f108 0801 	add.w	r8, r8, #1
  405cb0:	4604      	mov	r4, r0
  405cb2:	460d      	mov	r5, r1
  405cb4:	1076      	asrs	r6, r6, #1
  405cb6:	f107 0708 	add.w	r7, r7, #8
  405cba:	d1ef      	bne.n	405c9c <_dtoa_r+0x69c>
  405cbc:	4622      	mov	r2, r4
  405cbe:	462b      	mov	r3, r5
  405cc0:	4650      	mov	r0, sl
  405cc2:	4659      	mov	r1, fp
  405cc4:	f002 fb38 	bl	408338 <__aeabi_ddiv>
  405cc8:	4606      	mov	r6, r0
  405cca:	460f      	mov	r7, r1
  405ccc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405cce:	b143      	cbz	r3, 405ce2 <_dtoa_r+0x6e2>
  405cd0:	2200      	movs	r2, #0
  405cd2:	4b79      	ldr	r3, [pc, #484]	; (405eb8 <_dtoa_r+0x8b8>)
  405cd4:	4630      	mov	r0, r6
  405cd6:	4639      	mov	r1, r7
  405cd8:	f002 fc76 	bl	4085c8 <__aeabi_dcmplt>
  405cdc:	2800      	cmp	r0, #0
  405cde:	f040 8320 	bne.w	406322 <_dtoa_r+0xd22>
  405ce2:	4640      	mov	r0, r8
  405ce4:	f002 f998 	bl	408018 <__aeabi_i2d>
  405ce8:	4632      	mov	r2, r6
  405cea:	463b      	mov	r3, r7
  405cec:	f002 f9fa 	bl	4080e4 <__aeabi_dmul>
  405cf0:	4b72      	ldr	r3, [pc, #456]	; (405ebc <_dtoa_r+0x8bc>)
  405cf2:	2200      	movs	r2, #0
  405cf4:	f002 f844 	bl	407d80 <__adddf3>
  405cf8:	9b06      	ldr	r3, [sp, #24]
  405cfa:	4604      	mov	r4, r0
  405cfc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  405d00:	2b00      	cmp	r3, #0
  405d02:	f000 81df 	beq.w	4060c4 <_dtoa_r+0xac4>
  405d06:	9b04      	ldr	r3, [sp, #16]
  405d08:	f8dd 8018 	ldr.w	r8, [sp, #24]
  405d0c:	9311      	str	r3, [sp, #68]	; 0x44
  405d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405d10:	2b00      	cmp	r3, #0
  405d12:	f000 8297 	beq.w	406244 <_dtoa_r+0xc44>
  405d16:	4b66      	ldr	r3, [pc, #408]	; (405eb0 <_dtoa_r+0x8b0>)
  405d18:	4969      	ldr	r1, [pc, #420]	; (405ec0 <_dtoa_r+0x8c0>)
  405d1a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  405d1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405d22:	2000      	movs	r0, #0
  405d24:	f002 fb08 	bl	408338 <__aeabi_ddiv>
  405d28:	4622      	mov	r2, r4
  405d2a:	462b      	mov	r3, r5
  405d2c:	f002 f826 	bl	407d7c <__aeabi_dsub>
  405d30:	4682      	mov	sl, r0
  405d32:	468b      	mov	fp, r1
  405d34:	4630      	mov	r0, r6
  405d36:	4639      	mov	r1, r7
  405d38:	f002 fc84 	bl	408644 <__aeabi_d2iz>
  405d3c:	4604      	mov	r4, r0
  405d3e:	f002 f96b 	bl	408018 <__aeabi_i2d>
  405d42:	4602      	mov	r2, r0
  405d44:	460b      	mov	r3, r1
  405d46:	4630      	mov	r0, r6
  405d48:	4639      	mov	r1, r7
  405d4a:	f002 f817 	bl	407d7c <__aeabi_dsub>
  405d4e:	3430      	adds	r4, #48	; 0x30
  405d50:	9d07      	ldr	r5, [sp, #28]
  405d52:	b2e4      	uxtb	r4, r4
  405d54:	4606      	mov	r6, r0
  405d56:	460f      	mov	r7, r1
  405d58:	702c      	strb	r4, [r5, #0]
  405d5a:	4602      	mov	r2, r0
  405d5c:	460b      	mov	r3, r1
  405d5e:	4650      	mov	r0, sl
  405d60:	4659      	mov	r1, fp
  405d62:	3501      	adds	r5, #1
  405d64:	f002 fc4e 	bl	408604 <__aeabi_dcmpgt>
  405d68:	2800      	cmp	r0, #0
  405d6a:	d14c      	bne.n	405e06 <_dtoa_r+0x806>
  405d6c:	4632      	mov	r2, r6
  405d6e:	463b      	mov	r3, r7
  405d70:	2000      	movs	r0, #0
  405d72:	4951      	ldr	r1, [pc, #324]	; (405eb8 <_dtoa_r+0x8b8>)
  405d74:	f002 f802 	bl	407d7c <__aeabi_dsub>
  405d78:	4602      	mov	r2, r0
  405d7a:	460b      	mov	r3, r1
  405d7c:	4650      	mov	r0, sl
  405d7e:	4659      	mov	r1, fp
  405d80:	f002 fc40 	bl	408604 <__aeabi_dcmpgt>
  405d84:	2800      	cmp	r0, #0
  405d86:	f040 830d 	bne.w	4063a4 <_dtoa_r+0xda4>
  405d8a:	f1b8 0f01 	cmp.w	r8, #1
  405d8e:	f340 81b3 	ble.w	4060f8 <_dtoa_r+0xaf8>
  405d92:	9b07      	ldr	r3, [sp, #28]
  405d94:	4498      	add	r8, r3
  405d96:	e00d      	b.n	405db4 <_dtoa_r+0x7b4>
  405d98:	2000      	movs	r0, #0
  405d9a:	4947      	ldr	r1, [pc, #284]	; (405eb8 <_dtoa_r+0x8b8>)
  405d9c:	f001 ffee 	bl	407d7c <__aeabi_dsub>
  405da0:	4652      	mov	r2, sl
  405da2:	465b      	mov	r3, fp
  405da4:	f002 fc10 	bl	4085c8 <__aeabi_dcmplt>
  405da8:	2800      	cmp	r0, #0
  405daa:	f040 82fb 	bne.w	4063a4 <_dtoa_r+0xda4>
  405dae:	4545      	cmp	r5, r8
  405db0:	f000 81a2 	beq.w	4060f8 <_dtoa_r+0xaf8>
  405db4:	4650      	mov	r0, sl
  405db6:	4659      	mov	r1, fp
  405db8:	2200      	movs	r2, #0
  405dba:	4b42      	ldr	r3, [pc, #264]	; (405ec4 <_dtoa_r+0x8c4>)
  405dbc:	f002 f992 	bl	4080e4 <__aeabi_dmul>
  405dc0:	2200      	movs	r2, #0
  405dc2:	4b40      	ldr	r3, [pc, #256]	; (405ec4 <_dtoa_r+0x8c4>)
  405dc4:	4682      	mov	sl, r0
  405dc6:	468b      	mov	fp, r1
  405dc8:	4630      	mov	r0, r6
  405dca:	4639      	mov	r1, r7
  405dcc:	f002 f98a 	bl	4080e4 <__aeabi_dmul>
  405dd0:	460f      	mov	r7, r1
  405dd2:	4606      	mov	r6, r0
  405dd4:	f002 fc36 	bl	408644 <__aeabi_d2iz>
  405dd8:	4604      	mov	r4, r0
  405dda:	f002 f91d 	bl	408018 <__aeabi_i2d>
  405dde:	4602      	mov	r2, r0
  405de0:	460b      	mov	r3, r1
  405de2:	4630      	mov	r0, r6
  405de4:	4639      	mov	r1, r7
  405de6:	f001 ffc9 	bl	407d7c <__aeabi_dsub>
  405dea:	3430      	adds	r4, #48	; 0x30
  405dec:	b2e4      	uxtb	r4, r4
  405dee:	4652      	mov	r2, sl
  405df0:	465b      	mov	r3, fp
  405df2:	f805 4b01 	strb.w	r4, [r5], #1
  405df6:	4606      	mov	r6, r0
  405df8:	460f      	mov	r7, r1
  405dfa:	f002 fbe5 	bl	4085c8 <__aeabi_dcmplt>
  405dfe:	4632      	mov	r2, r6
  405e00:	463b      	mov	r3, r7
  405e02:	2800      	cmp	r0, #0
  405e04:	d0c8      	beq.n	405d98 <_dtoa_r+0x798>
  405e06:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405e08:	9304      	str	r3, [sp, #16]
  405e0a:	e5c4      	b.n	405996 <_dtoa_r+0x396>
  405e0c:	2300      	movs	r3, #0
  405e0e:	9309      	str	r3, [sp, #36]	; 0x24
  405e10:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405e12:	2b00      	cmp	r3, #0
  405e14:	f340 8189 	ble.w	40612a <_dtoa_r+0xb2a>
  405e18:	461e      	mov	r6, r3
  405e1a:	461c      	mov	r4, r3
  405e1c:	930d      	str	r3, [sp, #52]	; 0x34
  405e1e:	9306      	str	r3, [sp, #24]
  405e20:	e6fd      	b.n	405c1e <_dtoa_r+0x61e>
  405e22:	2301      	movs	r3, #1
  405e24:	9309      	str	r3, [sp, #36]	; 0x24
  405e26:	e7f3      	b.n	405e10 <_dtoa_r+0x810>
  405e28:	9408      	str	r4, [sp, #32]
  405e2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405e2c:	9908      	ldr	r1, [sp, #32]
  405e2e:	4648      	mov	r0, r9
  405e30:	f001 f866 	bl	406f00 <__pow5mult>
  405e34:	4604      	mov	r4, r0
  405e36:	e611      	b.n	405a5c <_dtoa_r+0x45c>
  405e38:	9b06      	ldr	r3, [sp, #24]
  405e3a:	2b00      	cmp	r3, #0
  405e3c:	f73f acfc 	bgt.w	405838 <_dtoa_r+0x238>
  405e40:	f040 82da 	bne.w	4063f8 <_dtoa_r+0xdf8>
  405e44:	2200      	movs	r2, #0
  405e46:	4b20      	ldr	r3, [pc, #128]	; (405ec8 <_dtoa_r+0x8c8>)
  405e48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405e4c:	f002 f94a 	bl	4080e4 <__aeabi_dmul>
  405e50:	4652      	mov	r2, sl
  405e52:	465b      	mov	r3, fp
  405e54:	f002 fbcc 	bl	4085f0 <__aeabi_dcmpge>
  405e58:	f8dd 8018 	ldr.w	r8, [sp, #24]
  405e5c:	4646      	mov	r6, r8
  405e5e:	2800      	cmp	r0, #0
  405e60:	f000 80f2 	beq.w	406048 <_dtoa_r+0xa48>
  405e64:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405e66:	9d07      	ldr	r5, [sp, #28]
  405e68:	43db      	mvns	r3, r3
  405e6a:	9304      	str	r3, [sp, #16]
  405e6c:	4641      	mov	r1, r8
  405e6e:	4648      	mov	r0, r9
  405e70:	f000 ff0c 	bl	406c8c <_Bfree>
  405e74:	2e00      	cmp	r6, #0
  405e76:	f43f ad8e 	beq.w	405996 <_dtoa_r+0x396>
  405e7a:	e68d      	b.n	405b98 <_dtoa_r+0x598>
  405e7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  405e7e:	2a00      	cmp	r2, #0
  405e80:	f000 8241 	beq.w	406306 <_dtoa_r+0xd06>
  405e84:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405e88:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405e8a:	9d05      	ldr	r5, [sp, #20]
  405e8c:	e5ab      	b.n	4059e6 <_dtoa_r+0x3e6>
  405e8e:	201c      	movs	r0, #28
  405e90:	9b05      	ldr	r3, [sp, #20]
  405e92:	4403      	add	r3, r0
  405e94:	9305      	str	r3, [sp, #20]
  405e96:	9b02      	ldr	r3, [sp, #8]
  405e98:	4403      	add	r3, r0
  405e9a:	4405      	add	r5, r0
  405e9c:	9302      	str	r3, [sp, #8]
  405e9e:	e60e      	b.n	405abe <_dtoa_r+0x4be>
  405ea0:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405ea2:	2b01      	cmp	r3, #1
  405ea4:	f340 8282 	ble.w	4063ac <_dtoa_r+0xdac>
  405ea8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  405eaa:	2001      	movs	r0, #1
  405eac:	e5f3      	b.n	405a96 <_dtoa_r+0x496>
  405eae:	bf00      	nop
  405eb0:	00409420 	.word	0x00409420
  405eb4:	004094e8 	.word	0x004094e8
  405eb8:	3ff00000 	.word	0x3ff00000
  405ebc:	401c0000 	.word	0x401c0000
  405ec0:	3fe00000 	.word	0x3fe00000
  405ec4:	40240000 	.word	0x40240000
  405ec8:	40140000 	.word	0x40140000
  405ecc:	4631      	mov	r1, r6
  405ece:	2300      	movs	r3, #0
  405ed0:	220a      	movs	r2, #10
  405ed2:	4648      	mov	r0, r9
  405ed4:	f000 fee4 	bl	406ca0 <__multadd>
  405ed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405eda:	2b00      	cmp	r3, #0
  405edc:	4606      	mov	r6, r0
  405ede:	f340 8297 	ble.w	406410 <_dtoa_r+0xe10>
  405ee2:	9306      	str	r3, [sp, #24]
  405ee4:	2d00      	cmp	r5, #0
  405ee6:	dd05      	ble.n	405ef4 <_dtoa_r+0x8f4>
  405ee8:	4631      	mov	r1, r6
  405eea:	462a      	mov	r2, r5
  405eec:	4648      	mov	r0, r9
  405eee:	f001 f857 	bl	406fa0 <__lshift>
  405ef2:	4606      	mov	r6, r0
  405ef4:	2f00      	cmp	r7, #0
  405ef6:	f040 817c 	bne.w	4061f2 <_dtoa_r+0xbf2>
  405efa:	9605      	str	r6, [sp, #20]
  405efc:	9b06      	ldr	r3, [sp, #24]
  405efe:	9a07      	ldr	r2, [sp, #28]
  405f00:	f8dd b014 	ldr.w	fp, [sp, #20]
  405f04:	3b01      	subs	r3, #1
  405f06:	18d3      	adds	r3, r2, r3
  405f08:	9308      	str	r3, [sp, #32]
  405f0a:	f00a 0301 	and.w	r3, sl, #1
  405f0e:	9309      	str	r3, [sp, #36]	; 0x24
  405f10:	4617      	mov	r7, r2
  405f12:	46c2      	mov	sl, r8
  405f14:	4651      	mov	r1, sl
  405f16:	4620      	mov	r0, r4
  405f18:	f7ff fade 	bl	4054d8 <quorem>
  405f1c:	4631      	mov	r1, r6
  405f1e:	4605      	mov	r5, r0
  405f20:	4620      	mov	r0, r4
  405f22:	f001 f895 	bl	407050 <__mcmp>
  405f26:	465a      	mov	r2, fp
  405f28:	9002      	str	r0, [sp, #8]
  405f2a:	4651      	mov	r1, sl
  405f2c:	4648      	mov	r0, r9
  405f2e:	f001 f8af 	bl	407090 <__mdiff>
  405f32:	68c2      	ldr	r2, [r0, #12]
  405f34:	4680      	mov	r8, r0
  405f36:	f105 0330 	add.w	r3, r5, #48	; 0x30
  405f3a:	2a00      	cmp	r2, #0
  405f3c:	d149      	bne.n	405fd2 <_dtoa_r+0x9d2>
  405f3e:	4601      	mov	r1, r0
  405f40:	4620      	mov	r0, r4
  405f42:	9306      	str	r3, [sp, #24]
  405f44:	f001 f884 	bl	407050 <__mcmp>
  405f48:	4641      	mov	r1, r8
  405f4a:	9005      	str	r0, [sp, #20]
  405f4c:	4648      	mov	r0, r9
  405f4e:	f000 fe9d 	bl	406c8c <_Bfree>
  405f52:	9a05      	ldr	r2, [sp, #20]
  405f54:	9b06      	ldr	r3, [sp, #24]
  405f56:	b92a      	cbnz	r2, 405f64 <_dtoa_r+0x964>
  405f58:	9920      	ldr	r1, [sp, #128]	; 0x80
  405f5a:	b919      	cbnz	r1, 405f64 <_dtoa_r+0x964>
  405f5c:	9909      	ldr	r1, [sp, #36]	; 0x24
  405f5e:	2900      	cmp	r1, #0
  405f60:	f000 8236 	beq.w	4063d0 <_dtoa_r+0xdd0>
  405f64:	9902      	ldr	r1, [sp, #8]
  405f66:	2900      	cmp	r1, #0
  405f68:	f2c0 80e4 	blt.w	406134 <_dtoa_r+0xb34>
  405f6c:	d105      	bne.n	405f7a <_dtoa_r+0x97a>
  405f6e:	9920      	ldr	r1, [sp, #128]	; 0x80
  405f70:	b919      	cbnz	r1, 405f7a <_dtoa_r+0x97a>
  405f72:	9909      	ldr	r1, [sp, #36]	; 0x24
  405f74:	2900      	cmp	r1, #0
  405f76:	f000 80dd 	beq.w	406134 <_dtoa_r+0xb34>
  405f7a:	2a00      	cmp	r2, #0
  405f7c:	f300 814d 	bgt.w	40621a <_dtoa_r+0xc1a>
  405f80:	9a08      	ldr	r2, [sp, #32]
  405f82:	703b      	strb	r3, [r7, #0]
  405f84:	f107 0801 	add.w	r8, r7, #1
  405f88:	4297      	cmp	r7, r2
  405f8a:	4645      	mov	r5, r8
  405f8c:	f000 8154 	beq.w	406238 <_dtoa_r+0xc38>
  405f90:	4621      	mov	r1, r4
  405f92:	2300      	movs	r3, #0
  405f94:	220a      	movs	r2, #10
  405f96:	4648      	mov	r0, r9
  405f98:	f000 fe82 	bl	406ca0 <__multadd>
  405f9c:	455e      	cmp	r6, fp
  405f9e:	4604      	mov	r4, r0
  405fa0:	4631      	mov	r1, r6
  405fa2:	f04f 0300 	mov.w	r3, #0
  405fa6:	f04f 020a 	mov.w	r2, #10
  405faa:	4648      	mov	r0, r9
  405fac:	d00b      	beq.n	405fc6 <_dtoa_r+0x9c6>
  405fae:	f000 fe77 	bl	406ca0 <__multadd>
  405fb2:	4659      	mov	r1, fp
  405fb4:	4606      	mov	r6, r0
  405fb6:	2300      	movs	r3, #0
  405fb8:	220a      	movs	r2, #10
  405fba:	4648      	mov	r0, r9
  405fbc:	f000 fe70 	bl	406ca0 <__multadd>
  405fc0:	4647      	mov	r7, r8
  405fc2:	4683      	mov	fp, r0
  405fc4:	e7a6      	b.n	405f14 <_dtoa_r+0x914>
  405fc6:	f000 fe6b 	bl	406ca0 <__multadd>
  405fca:	4647      	mov	r7, r8
  405fcc:	4606      	mov	r6, r0
  405fce:	4683      	mov	fp, r0
  405fd0:	e7a0      	b.n	405f14 <_dtoa_r+0x914>
  405fd2:	4601      	mov	r1, r0
  405fd4:	4648      	mov	r0, r9
  405fd6:	9305      	str	r3, [sp, #20]
  405fd8:	f000 fe58 	bl	406c8c <_Bfree>
  405fdc:	2201      	movs	r2, #1
  405fde:	9b05      	ldr	r3, [sp, #20]
  405fe0:	e7c0      	b.n	405f64 <_dtoa_r+0x964>
  405fe2:	4641      	mov	r1, r8
  405fe4:	4620      	mov	r0, r4
  405fe6:	f001 f833 	bl	407050 <__mcmp>
  405fea:	2800      	cmp	r0, #0
  405fec:	f6bf ad7d 	bge.w	405aea <_dtoa_r+0x4ea>
  405ff0:	4621      	mov	r1, r4
  405ff2:	9c04      	ldr	r4, [sp, #16]
  405ff4:	2300      	movs	r3, #0
  405ff6:	3c01      	subs	r4, #1
  405ff8:	220a      	movs	r2, #10
  405ffa:	4648      	mov	r0, r9
  405ffc:	9404      	str	r4, [sp, #16]
  405ffe:	f000 fe4f 	bl	406ca0 <__multadd>
  406002:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406004:	4604      	mov	r4, r0
  406006:	2b00      	cmp	r3, #0
  406008:	f47f af60 	bne.w	405ecc <_dtoa_r+0x8cc>
  40600c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40600e:	2b00      	cmp	r3, #0
  406010:	f340 81f6 	ble.w	406400 <_dtoa_r+0xe00>
  406014:	9306      	str	r3, [sp, #24]
  406016:	e570      	b.n	405afa <_dtoa_r+0x4fa>
  406018:	9c08      	ldr	r4, [sp, #32]
  40601a:	e51f      	b.n	405a5c <_dtoa_r+0x45c>
  40601c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40601e:	2b02      	cmp	r3, #2
  406020:	f77f ad67 	ble.w	405af2 <_dtoa_r+0x4f2>
  406024:	9b06      	ldr	r3, [sp, #24]
  406026:	2b00      	cmp	r3, #0
  406028:	f040 8179 	bne.w	40631e <_dtoa_r+0xd1e>
  40602c:	4641      	mov	r1, r8
  40602e:	2205      	movs	r2, #5
  406030:	4648      	mov	r0, r9
  406032:	f000 fe35 	bl	406ca0 <__multadd>
  406036:	4601      	mov	r1, r0
  406038:	4680      	mov	r8, r0
  40603a:	4620      	mov	r0, r4
  40603c:	f001 f808 	bl	407050 <__mcmp>
  406040:	2800      	cmp	r0, #0
  406042:	9408      	str	r4, [sp, #32]
  406044:	f77f af0e 	ble.w	405e64 <_dtoa_r+0x864>
  406048:	9a04      	ldr	r2, [sp, #16]
  40604a:	9907      	ldr	r1, [sp, #28]
  40604c:	2331      	movs	r3, #49	; 0x31
  40604e:	3201      	adds	r2, #1
  406050:	9204      	str	r2, [sp, #16]
  406052:	700b      	strb	r3, [r1, #0]
  406054:	1c4d      	adds	r5, r1, #1
  406056:	e709      	b.n	405e6c <_dtoa_r+0x86c>
  406058:	9a04      	ldr	r2, [sp, #16]
  40605a:	3201      	adds	r2, #1
  40605c:	9204      	str	r2, [sp, #16]
  40605e:	9a07      	ldr	r2, [sp, #28]
  406060:	2331      	movs	r3, #49	; 0x31
  406062:	7013      	strb	r3, [r2, #0]
  406064:	e588      	b.n	405b78 <_dtoa_r+0x578>
  406066:	2301      	movs	r3, #1
  406068:	9309      	str	r3, [sp, #36]	; 0x24
  40606a:	e5cd      	b.n	405c08 <_dtoa_r+0x608>
  40606c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  406070:	e491      	b.n	405996 <_dtoa_r+0x396>
  406072:	f1ba 0f00 	cmp.w	sl, #0
  406076:	f47f ad04 	bne.w	405a82 <_dtoa_r+0x482>
  40607a:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40607e:	2b00      	cmp	r3, #0
  406080:	f040 813f 	bne.w	406302 <_dtoa_r+0xd02>
  406084:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  406088:	0d3f      	lsrs	r7, r7, #20
  40608a:	053f      	lsls	r7, r7, #20
  40608c:	b137      	cbz	r7, 40609c <_dtoa_r+0xa9c>
  40608e:	9b05      	ldr	r3, [sp, #20]
  406090:	3301      	adds	r3, #1
  406092:	9305      	str	r3, [sp, #20]
  406094:	9b02      	ldr	r3, [sp, #8]
  406096:	3301      	adds	r3, #1
  406098:	9302      	str	r3, [sp, #8]
  40609a:	2701      	movs	r7, #1
  40609c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40609e:	2001      	movs	r0, #1
  4060a0:	2b00      	cmp	r3, #0
  4060a2:	f43f acf8 	beq.w	405a96 <_dtoa_r+0x496>
  4060a6:	e4ed      	b.n	405a84 <_dtoa_r+0x484>
  4060a8:	4640      	mov	r0, r8
  4060aa:	f001 ffb5 	bl	408018 <__aeabi_i2d>
  4060ae:	4632      	mov	r2, r6
  4060b0:	463b      	mov	r3, r7
  4060b2:	f002 f817 	bl	4080e4 <__aeabi_dmul>
  4060b6:	2200      	movs	r2, #0
  4060b8:	4bbf      	ldr	r3, [pc, #764]	; (4063b8 <_dtoa_r+0xdb8>)
  4060ba:	f001 fe61 	bl	407d80 <__adddf3>
  4060be:	4604      	mov	r4, r0
  4060c0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  4060c4:	4630      	mov	r0, r6
  4060c6:	4639      	mov	r1, r7
  4060c8:	2200      	movs	r2, #0
  4060ca:	4bbc      	ldr	r3, [pc, #752]	; (4063bc <_dtoa_r+0xdbc>)
  4060cc:	f001 fe56 	bl	407d7c <__aeabi_dsub>
  4060d0:	4622      	mov	r2, r4
  4060d2:	462b      	mov	r3, r5
  4060d4:	4606      	mov	r6, r0
  4060d6:	460f      	mov	r7, r1
  4060d8:	f002 fa94 	bl	408604 <__aeabi_dcmpgt>
  4060dc:	4680      	mov	r8, r0
  4060de:	2800      	cmp	r0, #0
  4060e0:	f040 8105 	bne.w	4062ee <_dtoa_r+0xcee>
  4060e4:	4622      	mov	r2, r4
  4060e6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  4060ea:	4630      	mov	r0, r6
  4060ec:	4639      	mov	r1, r7
  4060ee:	f002 fa6b 	bl	4085c8 <__aeabi_dcmplt>
  4060f2:	b108      	cbz	r0, 4060f8 <_dtoa_r+0xaf8>
  4060f4:	4646      	mov	r6, r8
  4060f6:	e6b5      	b.n	405e64 <_dtoa_r+0x864>
  4060f8:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  4060fc:	f7ff bb89 	b.w	405812 <_dtoa_r+0x212>
  406100:	9807      	ldr	r0, [sp, #28]
  406102:	f7ff baae 	b.w	405662 <_dtoa_r+0x62>
  406106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406108:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40610a:	970a      	str	r7, [sp, #40]	; 0x28
  40610c:	1afb      	subs	r3, r7, r3
  40610e:	441a      	add	r2, r3
  406110:	920b      	str	r2, [sp, #44]	; 0x2c
  406112:	2700      	movs	r7, #0
  406114:	e461      	b.n	4059da <_dtoa_r+0x3da>
  406116:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40611a:	f04f 0802 	mov.w	r8, #2
  40611e:	e5bb      	b.n	405c98 <_dtoa_r+0x698>
  406120:	461c      	mov	r4, r3
  406122:	2100      	movs	r1, #0
  406124:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  406128:	e58a      	b.n	405c40 <_dtoa_r+0x640>
  40612a:	2401      	movs	r4, #1
  40612c:	9421      	str	r4, [sp, #132]	; 0x84
  40612e:	940d      	str	r4, [sp, #52]	; 0x34
  406130:	9406      	str	r4, [sp, #24]
  406132:	e7f6      	b.n	406122 <_dtoa_r+0xb22>
  406134:	2a00      	cmp	r2, #0
  406136:	46d0      	mov	r8, sl
  406138:	f8cd b014 	str.w	fp, [sp, #20]
  40613c:	469a      	mov	sl, r3
  40613e:	dd11      	ble.n	406164 <_dtoa_r+0xb64>
  406140:	4621      	mov	r1, r4
  406142:	2201      	movs	r2, #1
  406144:	4648      	mov	r0, r9
  406146:	f000 ff2b 	bl	406fa0 <__lshift>
  40614a:	4641      	mov	r1, r8
  40614c:	4604      	mov	r4, r0
  40614e:	f000 ff7f 	bl	407050 <__mcmp>
  406152:	2800      	cmp	r0, #0
  406154:	f340 8149 	ble.w	4063ea <_dtoa_r+0xdea>
  406158:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40615c:	f000 8106 	beq.w	40636c <_dtoa_r+0xd6c>
  406160:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  406164:	46b3      	mov	fp, r6
  406166:	f887 a000 	strb.w	sl, [r7]
  40616a:	1c7d      	adds	r5, r7, #1
  40616c:	9e05      	ldr	r6, [sp, #20]
  40616e:	9408      	str	r4, [sp, #32]
  406170:	e502      	b.n	405b78 <_dtoa_r+0x578>
  406172:	d104      	bne.n	40617e <_dtoa_r+0xb7e>
  406174:	f01a 0f01 	tst.w	sl, #1
  406178:	d001      	beq.n	40617e <_dtoa_r+0xb7e>
  40617a:	e4ed      	b.n	405b58 <_dtoa_r+0x558>
  40617c:	4615      	mov	r5, r2
  40617e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406182:	2b30      	cmp	r3, #48	; 0x30
  406184:	f105 32ff 	add.w	r2, r5, #4294967295
  406188:	d0f8      	beq.n	40617c <_dtoa_r+0xb7c>
  40618a:	e4f5      	b.n	405b78 <_dtoa_r+0x578>
  40618c:	9b04      	ldr	r3, [sp, #16]
  40618e:	425c      	negs	r4, r3
  406190:	2c00      	cmp	r4, #0
  406192:	f000 80bf 	beq.w	406314 <_dtoa_r+0xd14>
  406196:	4b8a      	ldr	r3, [pc, #552]	; (4063c0 <_dtoa_r+0xdc0>)
  406198:	f004 020f 	and.w	r2, r4, #15
  40619c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4061a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4061a8:	f001 ff9c 	bl	4080e4 <__aeabi_dmul>
  4061ac:	1124      	asrs	r4, r4, #4
  4061ae:	4606      	mov	r6, r0
  4061b0:	460f      	mov	r7, r1
  4061b2:	f000 812a 	beq.w	40640a <_dtoa_r+0xe0a>
  4061b6:	4d83      	ldr	r5, [pc, #524]	; (4063c4 <_dtoa_r+0xdc4>)
  4061b8:	f04f 0802 	mov.w	r8, #2
  4061bc:	07e2      	lsls	r2, r4, #31
  4061be:	d509      	bpl.n	4061d4 <_dtoa_r+0xbd4>
  4061c0:	4630      	mov	r0, r6
  4061c2:	4639      	mov	r1, r7
  4061c4:	e9d5 2300 	ldrd	r2, r3, [r5]
  4061c8:	f001 ff8c 	bl	4080e4 <__aeabi_dmul>
  4061cc:	f108 0801 	add.w	r8, r8, #1
  4061d0:	4606      	mov	r6, r0
  4061d2:	460f      	mov	r7, r1
  4061d4:	1064      	asrs	r4, r4, #1
  4061d6:	f105 0508 	add.w	r5, r5, #8
  4061da:	d1ef      	bne.n	4061bc <_dtoa_r+0xbbc>
  4061dc:	e576      	b.n	405ccc <_dtoa_r+0x6cc>
  4061de:	9907      	ldr	r1, [sp, #28]
  4061e0:	2230      	movs	r2, #48	; 0x30
  4061e2:	700a      	strb	r2, [r1, #0]
  4061e4:	9a04      	ldr	r2, [sp, #16]
  4061e6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  4061ea:	3201      	adds	r2, #1
  4061ec:	9204      	str	r2, [sp, #16]
  4061ee:	f7ff bbd0 	b.w	405992 <_dtoa_r+0x392>
  4061f2:	6871      	ldr	r1, [r6, #4]
  4061f4:	4648      	mov	r0, r9
  4061f6:	f000 fd23 	bl	406c40 <_Balloc>
  4061fa:	6933      	ldr	r3, [r6, #16]
  4061fc:	1c9a      	adds	r2, r3, #2
  4061fe:	4605      	mov	r5, r0
  406200:	0092      	lsls	r2, r2, #2
  406202:	f106 010c 	add.w	r1, r6, #12
  406206:	300c      	adds	r0, #12
  406208:	f000 fc7c 	bl	406b04 <memcpy>
  40620c:	4629      	mov	r1, r5
  40620e:	2201      	movs	r2, #1
  406210:	4648      	mov	r0, r9
  406212:	f000 fec5 	bl	406fa0 <__lshift>
  406216:	9005      	str	r0, [sp, #20]
  406218:	e670      	b.n	405efc <_dtoa_r+0x8fc>
  40621a:	2b39      	cmp	r3, #57	; 0x39
  40621c:	f8cd b014 	str.w	fp, [sp, #20]
  406220:	46d0      	mov	r8, sl
  406222:	f000 80a3 	beq.w	40636c <_dtoa_r+0xd6c>
  406226:	f103 0a01 	add.w	sl, r3, #1
  40622a:	46b3      	mov	fp, r6
  40622c:	f887 a000 	strb.w	sl, [r7]
  406230:	1c7d      	adds	r5, r7, #1
  406232:	9e05      	ldr	r6, [sp, #20]
  406234:	9408      	str	r4, [sp, #32]
  406236:	e49f      	b.n	405b78 <_dtoa_r+0x578>
  406238:	465a      	mov	r2, fp
  40623a:	46d0      	mov	r8, sl
  40623c:	46b3      	mov	fp, r6
  40623e:	469a      	mov	sl, r3
  406240:	4616      	mov	r6, r2
  406242:	e47d      	b.n	405b40 <_dtoa_r+0x540>
  406244:	495e      	ldr	r1, [pc, #376]	; (4063c0 <_dtoa_r+0xdc0>)
  406246:	f108 3aff 	add.w	sl, r8, #4294967295
  40624a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  40624e:	4622      	mov	r2, r4
  406250:	462b      	mov	r3, r5
  406252:	e9d1 0100 	ldrd	r0, r1, [r1]
  406256:	f001 ff45 	bl	4080e4 <__aeabi_dmul>
  40625a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40625e:	4639      	mov	r1, r7
  406260:	4630      	mov	r0, r6
  406262:	f002 f9ef 	bl	408644 <__aeabi_d2iz>
  406266:	4604      	mov	r4, r0
  406268:	f001 fed6 	bl	408018 <__aeabi_i2d>
  40626c:	4602      	mov	r2, r0
  40626e:	460b      	mov	r3, r1
  406270:	4630      	mov	r0, r6
  406272:	4639      	mov	r1, r7
  406274:	f001 fd82 	bl	407d7c <__aeabi_dsub>
  406278:	9a07      	ldr	r2, [sp, #28]
  40627a:	3430      	adds	r4, #48	; 0x30
  40627c:	f1b8 0f01 	cmp.w	r8, #1
  406280:	4606      	mov	r6, r0
  406282:	460f      	mov	r7, r1
  406284:	7014      	strb	r4, [r2, #0]
  406286:	f102 0501 	add.w	r5, r2, #1
  40628a:	d01e      	beq.n	4062ca <_dtoa_r+0xcca>
  40628c:	9b07      	ldr	r3, [sp, #28]
  40628e:	eb03 0b08 	add.w	fp, r3, r8
  406292:	46a8      	mov	r8, r5
  406294:	2200      	movs	r2, #0
  406296:	4b4c      	ldr	r3, [pc, #304]	; (4063c8 <_dtoa_r+0xdc8>)
  406298:	4630      	mov	r0, r6
  40629a:	4639      	mov	r1, r7
  40629c:	f001 ff22 	bl	4080e4 <__aeabi_dmul>
  4062a0:	460f      	mov	r7, r1
  4062a2:	4606      	mov	r6, r0
  4062a4:	f002 f9ce 	bl	408644 <__aeabi_d2iz>
  4062a8:	4604      	mov	r4, r0
  4062aa:	f001 feb5 	bl	408018 <__aeabi_i2d>
  4062ae:	3430      	adds	r4, #48	; 0x30
  4062b0:	4602      	mov	r2, r0
  4062b2:	460b      	mov	r3, r1
  4062b4:	4630      	mov	r0, r6
  4062b6:	4639      	mov	r1, r7
  4062b8:	f001 fd60 	bl	407d7c <__aeabi_dsub>
  4062bc:	f808 4b01 	strb.w	r4, [r8], #1
  4062c0:	45c3      	cmp	fp, r8
  4062c2:	4606      	mov	r6, r0
  4062c4:	460f      	mov	r7, r1
  4062c6:	d1e5      	bne.n	406294 <_dtoa_r+0xc94>
  4062c8:	4455      	add	r5, sl
  4062ca:	2200      	movs	r2, #0
  4062cc:	4b3f      	ldr	r3, [pc, #252]	; (4063cc <_dtoa_r+0xdcc>)
  4062ce:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4062d2:	f001 fd55 	bl	407d80 <__adddf3>
  4062d6:	4632      	mov	r2, r6
  4062d8:	463b      	mov	r3, r7
  4062da:	f002 f975 	bl	4085c8 <__aeabi_dcmplt>
  4062de:	2800      	cmp	r0, #0
  4062e0:	d04c      	beq.n	40637c <_dtoa_r+0xd7c>
  4062e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4062e4:	9304      	str	r3, [sp, #16]
  4062e6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  4062ea:	f7ff bb46 	b.w	40597a <_dtoa_r+0x37a>
  4062ee:	f04f 0800 	mov.w	r8, #0
  4062f2:	4646      	mov	r6, r8
  4062f4:	e6a8      	b.n	406048 <_dtoa_r+0xa48>
  4062f6:	9b05      	ldr	r3, [sp, #20]
  4062f8:	9a06      	ldr	r2, [sp, #24]
  4062fa:	1a9d      	subs	r5, r3, r2
  4062fc:	2300      	movs	r3, #0
  4062fe:	f7ff bb72 	b.w	4059e6 <_dtoa_r+0x3e6>
  406302:	2700      	movs	r7, #0
  406304:	e6ca      	b.n	40609c <_dtoa_r+0xa9c>
  406306:	9b14      	ldr	r3, [sp, #80]	; 0x50
  406308:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40630a:	9d05      	ldr	r5, [sp, #20]
  40630c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  406310:	f7ff bb69 	b.w	4059e6 <_dtoa_r+0x3e6>
  406314:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  406318:	f04f 0802 	mov.w	r8, #2
  40631c:	e4d6      	b.n	405ccc <_dtoa_r+0x6cc>
  40631e:	9408      	str	r4, [sp, #32]
  406320:	e5a0      	b.n	405e64 <_dtoa_r+0x864>
  406322:	9b06      	ldr	r3, [sp, #24]
  406324:	2b00      	cmp	r3, #0
  406326:	f43f aebf 	beq.w	4060a8 <_dtoa_r+0xaa8>
  40632a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40632c:	2b00      	cmp	r3, #0
  40632e:	f77f aee3 	ble.w	4060f8 <_dtoa_r+0xaf8>
  406332:	2200      	movs	r2, #0
  406334:	4b24      	ldr	r3, [pc, #144]	; (4063c8 <_dtoa_r+0xdc8>)
  406336:	4630      	mov	r0, r6
  406338:	4639      	mov	r1, r7
  40633a:	f001 fed3 	bl	4080e4 <__aeabi_dmul>
  40633e:	4606      	mov	r6, r0
  406340:	460f      	mov	r7, r1
  406342:	f108 0001 	add.w	r0, r8, #1
  406346:	f001 fe67 	bl	408018 <__aeabi_i2d>
  40634a:	4632      	mov	r2, r6
  40634c:	463b      	mov	r3, r7
  40634e:	f001 fec9 	bl	4080e4 <__aeabi_dmul>
  406352:	2200      	movs	r2, #0
  406354:	4b18      	ldr	r3, [pc, #96]	; (4063b8 <_dtoa_r+0xdb8>)
  406356:	f001 fd13 	bl	407d80 <__adddf3>
  40635a:	9a04      	ldr	r2, [sp, #16]
  40635c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  406360:	3a01      	subs	r2, #1
  406362:	4604      	mov	r4, r0
  406364:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  406368:	9211      	str	r2, [sp, #68]	; 0x44
  40636a:	e4d0      	b.n	405d0e <_dtoa_r+0x70e>
  40636c:	2239      	movs	r2, #57	; 0x39
  40636e:	46b3      	mov	fp, r6
  406370:	9408      	str	r4, [sp, #32]
  406372:	9e05      	ldr	r6, [sp, #20]
  406374:	703a      	strb	r2, [r7, #0]
  406376:	1c7d      	adds	r5, r7, #1
  406378:	f7ff bbf0 	b.w	405b5c <_dtoa_r+0x55c>
  40637c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  406380:	2000      	movs	r0, #0
  406382:	4912      	ldr	r1, [pc, #72]	; (4063cc <_dtoa_r+0xdcc>)
  406384:	f001 fcfa 	bl	407d7c <__aeabi_dsub>
  406388:	4632      	mov	r2, r6
  40638a:	463b      	mov	r3, r7
  40638c:	f002 f93a 	bl	408604 <__aeabi_dcmpgt>
  406390:	b908      	cbnz	r0, 406396 <_dtoa_r+0xd96>
  406392:	e6b1      	b.n	4060f8 <_dtoa_r+0xaf8>
  406394:	4615      	mov	r5, r2
  406396:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40639a:	2b30      	cmp	r3, #48	; 0x30
  40639c:	f105 32ff 	add.w	r2, r5, #4294967295
  4063a0:	d0f8      	beq.n	406394 <_dtoa_r+0xd94>
  4063a2:	e530      	b.n	405e06 <_dtoa_r+0x806>
  4063a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4063a6:	9304      	str	r3, [sp, #16]
  4063a8:	f7ff bae7 	b.w	40597a <_dtoa_r+0x37a>
  4063ac:	f1ba 0f00 	cmp.w	sl, #0
  4063b0:	f47f ad7a 	bne.w	405ea8 <_dtoa_r+0x8a8>
  4063b4:	e661      	b.n	40607a <_dtoa_r+0xa7a>
  4063b6:	bf00      	nop
  4063b8:	401c0000 	.word	0x401c0000
  4063bc:	40140000 	.word	0x40140000
  4063c0:	00409420 	.word	0x00409420
  4063c4:	004094e8 	.word	0x004094e8
  4063c8:	40240000 	.word	0x40240000
  4063cc:	3fe00000 	.word	0x3fe00000
  4063d0:	2b39      	cmp	r3, #57	; 0x39
  4063d2:	f8cd b014 	str.w	fp, [sp, #20]
  4063d6:	46d0      	mov	r8, sl
  4063d8:	f8dd b008 	ldr.w	fp, [sp, #8]
  4063dc:	469a      	mov	sl, r3
  4063de:	d0c5      	beq.n	40636c <_dtoa_r+0xd6c>
  4063e0:	f1bb 0f00 	cmp.w	fp, #0
  4063e4:	f73f aebc 	bgt.w	406160 <_dtoa_r+0xb60>
  4063e8:	e6bc      	b.n	406164 <_dtoa_r+0xb64>
  4063ea:	f47f aebb 	bne.w	406164 <_dtoa_r+0xb64>
  4063ee:	f01a 0f01 	tst.w	sl, #1
  4063f2:	f43f aeb7 	beq.w	406164 <_dtoa_r+0xb64>
  4063f6:	e6af      	b.n	406158 <_dtoa_r+0xb58>
  4063f8:	f04f 0800 	mov.w	r8, #0
  4063fc:	4646      	mov	r6, r8
  4063fe:	e531      	b.n	405e64 <_dtoa_r+0x864>
  406400:	9b20      	ldr	r3, [sp, #128]	; 0x80
  406402:	2b02      	cmp	r3, #2
  406404:	dc21      	bgt.n	40644a <_dtoa_r+0xe4a>
  406406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406408:	e604      	b.n	406014 <_dtoa_r+0xa14>
  40640a:	f04f 0802 	mov.w	r8, #2
  40640e:	e45d      	b.n	405ccc <_dtoa_r+0x6cc>
  406410:	9b20      	ldr	r3, [sp, #128]	; 0x80
  406412:	2b02      	cmp	r3, #2
  406414:	dc19      	bgt.n	40644a <_dtoa_r+0xe4a>
  406416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406418:	e563      	b.n	405ee2 <_dtoa_r+0x8e2>
  40641a:	2400      	movs	r4, #0
  40641c:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  406420:	4621      	mov	r1, r4
  406422:	4648      	mov	r0, r9
  406424:	f000 fc0c 	bl	406c40 <_Balloc>
  406428:	f04f 33ff 	mov.w	r3, #4294967295
  40642c:	9306      	str	r3, [sp, #24]
  40642e:	930d      	str	r3, [sp, #52]	; 0x34
  406430:	2301      	movs	r3, #1
  406432:	9007      	str	r0, [sp, #28]
  406434:	9421      	str	r4, [sp, #132]	; 0x84
  406436:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40643a:	9309      	str	r3, [sp, #36]	; 0x24
  40643c:	f7ff b9e9 	b.w	405812 <_dtoa_r+0x212>
  406440:	f43f ab3d 	beq.w	405abe <_dtoa_r+0x4be>
  406444:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406448:	e522      	b.n	405e90 <_dtoa_r+0x890>
  40644a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40644c:	9306      	str	r3, [sp, #24]
  40644e:	e5e9      	b.n	406024 <_dtoa_r+0xa24>
  406450:	2501      	movs	r5, #1
  406452:	f7ff b9a8 	b.w	4057a6 <_dtoa_r+0x1a6>
  406456:	bf00      	nop

00406458 <__libc_fini_array>:
  406458:	b538      	push	{r3, r4, r5, lr}
  40645a:	4d07      	ldr	r5, [pc, #28]	; (406478 <__libc_fini_array+0x20>)
  40645c:	4c07      	ldr	r4, [pc, #28]	; (40647c <__libc_fini_array+0x24>)
  40645e:	1b2c      	subs	r4, r5, r4
  406460:	10a4      	asrs	r4, r4, #2
  406462:	d005      	beq.n	406470 <__libc_fini_array+0x18>
  406464:	3c01      	subs	r4, #1
  406466:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40646a:	4798      	blx	r3
  40646c:	2c00      	cmp	r4, #0
  40646e:	d1f9      	bne.n	406464 <__libc_fini_array+0xc>
  406470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406474:	f003 b85c 	b.w	409530 <_fini>
  406478:	00409540 	.word	0x00409540
  40647c:	0040953c 	.word	0x0040953c

00406480 <_localeconv_r>:
  406480:	4800      	ldr	r0, [pc, #0]	; (406484 <_localeconv_r+0x4>)
  406482:	4770      	bx	lr
  406484:	2000043c 	.word	0x2000043c

00406488 <_malloc_r>:
  406488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40648c:	f101 050b 	add.w	r5, r1, #11
  406490:	2d16      	cmp	r5, #22
  406492:	b083      	sub	sp, #12
  406494:	4606      	mov	r6, r0
  406496:	f240 809f 	bls.w	4065d8 <_malloc_r+0x150>
  40649a:	f035 0507 	bics.w	r5, r5, #7
  40649e:	f100 80bf 	bmi.w	406620 <_malloc_r+0x198>
  4064a2:	42a9      	cmp	r1, r5
  4064a4:	f200 80bc 	bhi.w	406620 <_malloc_r+0x198>
  4064a8:	f000 fbc6 	bl	406c38 <__malloc_lock>
  4064ac:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  4064b0:	f0c0 829c 	bcc.w	4069ec <_malloc_r+0x564>
  4064b4:	0a6b      	lsrs	r3, r5, #9
  4064b6:	f000 80ba 	beq.w	40662e <_malloc_r+0x1a6>
  4064ba:	2b04      	cmp	r3, #4
  4064bc:	f200 8183 	bhi.w	4067c6 <_malloc_r+0x33e>
  4064c0:	09a8      	lsrs	r0, r5, #6
  4064c2:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  4064c6:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4064ca:	3038      	adds	r0, #56	; 0x38
  4064cc:	4fc4      	ldr	r7, [pc, #784]	; (4067e0 <_malloc_r+0x358>)
  4064ce:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4064d2:	f1a3 0108 	sub.w	r1, r3, #8
  4064d6:	685c      	ldr	r4, [r3, #4]
  4064d8:	42a1      	cmp	r1, r4
  4064da:	d107      	bne.n	4064ec <_malloc_r+0x64>
  4064dc:	e0ac      	b.n	406638 <_malloc_r+0x1b0>
  4064de:	2a00      	cmp	r2, #0
  4064e0:	f280 80ac 	bge.w	40663c <_malloc_r+0x1b4>
  4064e4:	68e4      	ldr	r4, [r4, #12]
  4064e6:	42a1      	cmp	r1, r4
  4064e8:	f000 80a6 	beq.w	406638 <_malloc_r+0x1b0>
  4064ec:	6863      	ldr	r3, [r4, #4]
  4064ee:	f023 0303 	bic.w	r3, r3, #3
  4064f2:	1b5a      	subs	r2, r3, r5
  4064f4:	2a0f      	cmp	r2, #15
  4064f6:	ddf2      	ble.n	4064de <_malloc_r+0x56>
  4064f8:	49b9      	ldr	r1, [pc, #740]	; (4067e0 <_malloc_r+0x358>)
  4064fa:	693c      	ldr	r4, [r7, #16]
  4064fc:	f101 0e08 	add.w	lr, r1, #8
  406500:	4574      	cmp	r4, lr
  406502:	f000 81b3 	beq.w	40686c <_malloc_r+0x3e4>
  406506:	6863      	ldr	r3, [r4, #4]
  406508:	f023 0303 	bic.w	r3, r3, #3
  40650c:	1b5a      	subs	r2, r3, r5
  40650e:	2a0f      	cmp	r2, #15
  406510:	f300 8199 	bgt.w	406846 <_malloc_r+0x3be>
  406514:	2a00      	cmp	r2, #0
  406516:	f8c1 e014 	str.w	lr, [r1, #20]
  40651a:	f8c1 e010 	str.w	lr, [r1, #16]
  40651e:	f280 809e 	bge.w	40665e <_malloc_r+0x1d6>
  406522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406526:	f080 8167 	bcs.w	4067f8 <_malloc_r+0x370>
  40652a:	08db      	lsrs	r3, r3, #3
  40652c:	f103 0c01 	add.w	ip, r3, #1
  406530:	2201      	movs	r2, #1
  406532:	109b      	asrs	r3, r3, #2
  406534:	fa02 f303 	lsl.w	r3, r2, r3
  406538:	684a      	ldr	r2, [r1, #4]
  40653a:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  40653e:	f8c4 8008 	str.w	r8, [r4, #8]
  406542:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  406546:	431a      	orrs	r2, r3
  406548:	f1a9 0308 	sub.w	r3, r9, #8
  40654c:	60e3      	str	r3, [r4, #12]
  40654e:	604a      	str	r2, [r1, #4]
  406550:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  406554:	f8c8 400c 	str.w	r4, [r8, #12]
  406558:	1083      	asrs	r3, r0, #2
  40655a:	2401      	movs	r4, #1
  40655c:	409c      	lsls	r4, r3
  40655e:	4294      	cmp	r4, r2
  406560:	f200 808a 	bhi.w	406678 <_malloc_r+0x1f0>
  406564:	4214      	tst	r4, r2
  406566:	d106      	bne.n	406576 <_malloc_r+0xee>
  406568:	f020 0003 	bic.w	r0, r0, #3
  40656c:	0064      	lsls	r4, r4, #1
  40656e:	4214      	tst	r4, r2
  406570:	f100 0004 	add.w	r0, r0, #4
  406574:	d0fa      	beq.n	40656c <_malloc_r+0xe4>
  406576:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40657a:	46cc      	mov	ip, r9
  40657c:	4680      	mov	r8, r0
  40657e:	f8dc 100c 	ldr.w	r1, [ip, #12]
  406582:	458c      	cmp	ip, r1
  406584:	d107      	bne.n	406596 <_malloc_r+0x10e>
  406586:	e173      	b.n	406870 <_malloc_r+0x3e8>
  406588:	2a00      	cmp	r2, #0
  40658a:	f280 8181 	bge.w	406890 <_malloc_r+0x408>
  40658e:	68c9      	ldr	r1, [r1, #12]
  406590:	458c      	cmp	ip, r1
  406592:	f000 816d 	beq.w	406870 <_malloc_r+0x3e8>
  406596:	684b      	ldr	r3, [r1, #4]
  406598:	f023 0303 	bic.w	r3, r3, #3
  40659c:	1b5a      	subs	r2, r3, r5
  40659e:	2a0f      	cmp	r2, #15
  4065a0:	ddf2      	ble.n	406588 <_malloc_r+0x100>
  4065a2:	460c      	mov	r4, r1
  4065a4:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4065a8:	f854 8f08 	ldr.w	r8, [r4, #8]!
  4065ac:	194b      	adds	r3, r1, r5
  4065ae:	f045 0501 	orr.w	r5, r5, #1
  4065b2:	604d      	str	r5, [r1, #4]
  4065b4:	f042 0101 	orr.w	r1, r2, #1
  4065b8:	f8c8 c00c 	str.w	ip, [r8, #12]
  4065bc:	4630      	mov	r0, r6
  4065be:	f8cc 8008 	str.w	r8, [ip, #8]
  4065c2:	617b      	str	r3, [r7, #20]
  4065c4:	613b      	str	r3, [r7, #16]
  4065c6:	f8c3 e00c 	str.w	lr, [r3, #12]
  4065ca:	f8c3 e008 	str.w	lr, [r3, #8]
  4065ce:	6059      	str	r1, [r3, #4]
  4065d0:	509a      	str	r2, [r3, r2]
  4065d2:	f000 fb33 	bl	406c3c <__malloc_unlock>
  4065d6:	e01f      	b.n	406618 <_malloc_r+0x190>
  4065d8:	2910      	cmp	r1, #16
  4065da:	d821      	bhi.n	406620 <_malloc_r+0x198>
  4065dc:	f000 fb2c 	bl	406c38 <__malloc_lock>
  4065e0:	2510      	movs	r5, #16
  4065e2:	2306      	movs	r3, #6
  4065e4:	2002      	movs	r0, #2
  4065e6:	4f7e      	ldr	r7, [pc, #504]	; (4067e0 <_malloc_r+0x358>)
  4065e8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4065ec:	f1a3 0208 	sub.w	r2, r3, #8
  4065f0:	685c      	ldr	r4, [r3, #4]
  4065f2:	4294      	cmp	r4, r2
  4065f4:	f000 8145 	beq.w	406882 <_malloc_r+0x3fa>
  4065f8:	6863      	ldr	r3, [r4, #4]
  4065fa:	68e1      	ldr	r1, [r4, #12]
  4065fc:	68a5      	ldr	r5, [r4, #8]
  4065fe:	f023 0303 	bic.w	r3, r3, #3
  406602:	4423      	add	r3, r4
  406604:	4630      	mov	r0, r6
  406606:	685a      	ldr	r2, [r3, #4]
  406608:	60e9      	str	r1, [r5, #12]
  40660a:	f042 0201 	orr.w	r2, r2, #1
  40660e:	608d      	str	r5, [r1, #8]
  406610:	605a      	str	r2, [r3, #4]
  406612:	f000 fb13 	bl	406c3c <__malloc_unlock>
  406616:	3408      	adds	r4, #8
  406618:	4620      	mov	r0, r4
  40661a:	b003      	add	sp, #12
  40661c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406620:	2400      	movs	r4, #0
  406622:	230c      	movs	r3, #12
  406624:	4620      	mov	r0, r4
  406626:	6033      	str	r3, [r6, #0]
  406628:	b003      	add	sp, #12
  40662a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40662e:	2380      	movs	r3, #128	; 0x80
  406630:	f04f 0e40 	mov.w	lr, #64	; 0x40
  406634:	203f      	movs	r0, #63	; 0x3f
  406636:	e749      	b.n	4064cc <_malloc_r+0x44>
  406638:	4670      	mov	r0, lr
  40663a:	e75d      	b.n	4064f8 <_malloc_r+0x70>
  40663c:	4423      	add	r3, r4
  40663e:	68e1      	ldr	r1, [r4, #12]
  406640:	685a      	ldr	r2, [r3, #4]
  406642:	68a5      	ldr	r5, [r4, #8]
  406644:	f042 0201 	orr.w	r2, r2, #1
  406648:	60e9      	str	r1, [r5, #12]
  40664a:	4630      	mov	r0, r6
  40664c:	608d      	str	r5, [r1, #8]
  40664e:	605a      	str	r2, [r3, #4]
  406650:	f000 faf4 	bl	406c3c <__malloc_unlock>
  406654:	3408      	adds	r4, #8
  406656:	4620      	mov	r0, r4
  406658:	b003      	add	sp, #12
  40665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40665e:	4423      	add	r3, r4
  406660:	4630      	mov	r0, r6
  406662:	685a      	ldr	r2, [r3, #4]
  406664:	f042 0201 	orr.w	r2, r2, #1
  406668:	605a      	str	r2, [r3, #4]
  40666a:	f000 fae7 	bl	406c3c <__malloc_unlock>
  40666e:	3408      	adds	r4, #8
  406670:	4620      	mov	r0, r4
  406672:	b003      	add	sp, #12
  406674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406678:	68bc      	ldr	r4, [r7, #8]
  40667a:	6863      	ldr	r3, [r4, #4]
  40667c:	f023 0803 	bic.w	r8, r3, #3
  406680:	45a8      	cmp	r8, r5
  406682:	d304      	bcc.n	40668e <_malloc_r+0x206>
  406684:	ebc5 0308 	rsb	r3, r5, r8
  406688:	2b0f      	cmp	r3, #15
  40668a:	f300 808c 	bgt.w	4067a6 <_malloc_r+0x31e>
  40668e:	4b55      	ldr	r3, [pc, #340]	; (4067e4 <_malloc_r+0x35c>)
  406690:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4067f4 <_malloc_r+0x36c>
  406694:	681a      	ldr	r2, [r3, #0]
  406696:	f8d9 3000 	ldr.w	r3, [r9]
  40669a:	3301      	adds	r3, #1
  40669c:	442a      	add	r2, r5
  40669e:	eb04 0a08 	add.w	sl, r4, r8
  4066a2:	f000 8160 	beq.w	406966 <_malloc_r+0x4de>
  4066a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  4066aa:	320f      	adds	r2, #15
  4066ac:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4066b0:	f022 020f 	bic.w	r2, r2, #15
  4066b4:	4611      	mov	r1, r2
  4066b6:	4630      	mov	r0, r6
  4066b8:	9201      	str	r2, [sp, #4]
  4066ba:	f000 fdcf 	bl	40725c <_sbrk_r>
  4066be:	f1b0 3fff 	cmp.w	r0, #4294967295
  4066c2:	4683      	mov	fp, r0
  4066c4:	9a01      	ldr	r2, [sp, #4]
  4066c6:	f000 8158 	beq.w	40697a <_malloc_r+0x4f2>
  4066ca:	4582      	cmp	sl, r0
  4066cc:	f200 80fc 	bhi.w	4068c8 <_malloc_r+0x440>
  4066d0:	4b45      	ldr	r3, [pc, #276]	; (4067e8 <_malloc_r+0x360>)
  4066d2:	6819      	ldr	r1, [r3, #0]
  4066d4:	45da      	cmp	sl, fp
  4066d6:	4411      	add	r1, r2
  4066d8:	6019      	str	r1, [r3, #0]
  4066da:	f000 8153 	beq.w	406984 <_malloc_r+0x4fc>
  4066de:	f8d9 0000 	ldr.w	r0, [r9]
  4066e2:	f8df e110 	ldr.w	lr, [pc, #272]	; 4067f4 <_malloc_r+0x36c>
  4066e6:	3001      	adds	r0, #1
  4066e8:	bf1b      	ittet	ne
  4066ea:	ebca 0a0b 	rsbne	sl, sl, fp
  4066ee:	4451      	addne	r1, sl
  4066f0:	f8ce b000 	streq.w	fp, [lr]
  4066f4:	6019      	strne	r1, [r3, #0]
  4066f6:	f01b 0107 	ands.w	r1, fp, #7
  4066fa:	f000 8117 	beq.w	40692c <_malloc_r+0x4a4>
  4066fe:	f1c1 0008 	rsb	r0, r1, #8
  406702:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406706:	4483      	add	fp, r0
  406708:	3108      	adds	r1, #8
  40670a:	445a      	add	r2, fp
  40670c:	f3c2 020b 	ubfx	r2, r2, #0, #12
  406710:	ebc2 0901 	rsb	r9, r2, r1
  406714:	4649      	mov	r1, r9
  406716:	4630      	mov	r0, r6
  406718:	9301      	str	r3, [sp, #4]
  40671a:	f000 fd9f 	bl	40725c <_sbrk_r>
  40671e:	1c43      	adds	r3, r0, #1
  406720:	9b01      	ldr	r3, [sp, #4]
  406722:	f000 813f 	beq.w	4069a4 <_malloc_r+0x51c>
  406726:	ebcb 0200 	rsb	r2, fp, r0
  40672a:	444a      	add	r2, r9
  40672c:	f042 0201 	orr.w	r2, r2, #1
  406730:	6819      	ldr	r1, [r3, #0]
  406732:	f8c7 b008 	str.w	fp, [r7, #8]
  406736:	4449      	add	r1, r9
  406738:	42bc      	cmp	r4, r7
  40673a:	f8cb 2004 	str.w	r2, [fp, #4]
  40673e:	6019      	str	r1, [r3, #0]
  406740:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4067e8 <_malloc_r+0x360>
  406744:	d016      	beq.n	406774 <_malloc_r+0x2ec>
  406746:	f1b8 0f0f 	cmp.w	r8, #15
  40674a:	f240 80fd 	bls.w	406948 <_malloc_r+0x4c0>
  40674e:	6862      	ldr	r2, [r4, #4]
  406750:	f1a8 030c 	sub.w	r3, r8, #12
  406754:	f023 0307 	bic.w	r3, r3, #7
  406758:	18e0      	adds	r0, r4, r3
  40675a:	f002 0201 	and.w	r2, r2, #1
  40675e:	f04f 0e05 	mov.w	lr, #5
  406762:	431a      	orrs	r2, r3
  406764:	2b0f      	cmp	r3, #15
  406766:	6062      	str	r2, [r4, #4]
  406768:	f8c0 e004 	str.w	lr, [r0, #4]
  40676c:	f8c0 e008 	str.w	lr, [r0, #8]
  406770:	f200 811c 	bhi.w	4069ac <_malloc_r+0x524>
  406774:	4b1d      	ldr	r3, [pc, #116]	; (4067ec <_malloc_r+0x364>)
  406776:	68bc      	ldr	r4, [r7, #8]
  406778:	681a      	ldr	r2, [r3, #0]
  40677a:	4291      	cmp	r1, r2
  40677c:	bf88      	it	hi
  40677e:	6019      	strhi	r1, [r3, #0]
  406780:	4b1b      	ldr	r3, [pc, #108]	; (4067f0 <_malloc_r+0x368>)
  406782:	681a      	ldr	r2, [r3, #0]
  406784:	4291      	cmp	r1, r2
  406786:	6862      	ldr	r2, [r4, #4]
  406788:	bf88      	it	hi
  40678a:	6019      	strhi	r1, [r3, #0]
  40678c:	f022 0203 	bic.w	r2, r2, #3
  406790:	4295      	cmp	r5, r2
  406792:	eba2 0305 	sub.w	r3, r2, r5
  406796:	d801      	bhi.n	40679c <_malloc_r+0x314>
  406798:	2b0f      	cmp	r3, #15
  40679a:	dc04      	bgt.n	4067a6 <_malloc_r+0x31e>
  40679c:	4630      	mov	r0, r6
  40679e:	f000 fa4d 	bl	406c3c <__malloc_unlock>
  4067a2:	2400      	movs	r4, #0
  4067a4:	e738      	b.n	406618 <_malloc_r+0x190>
  4067a6:	1962      	adds	r2, r4, r5
  4067a8:	f043 0301 	orr.w	r3, r3, #1
  4067ac:	f045 0501 	orr.w	r5, r5, #1
  4067b0:	6065      	str	r5, [r4, #4]
  4067b2:	4630      	mov	r0, r6
  4067b4:	60ba      	str	r2, [r7, #8]
  4067b6:	6053      	str	r3, [r2, #4]
  4067b8:	f000 fa40 	bl	406c3c <__malloc_unlock>
  4067bc:	3408      	adds	r4, #8
  4067be:	4620      	mov	r0, r4
  4067c0:	b003      	add	sp, #12
  4067c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4067c6:	2b14      	cmp	r3, #20
  4067c8:	d971      	bls.n	4068ae <_malloc_r+0x426>
  4067ca:	2b54      	cmp	r3, #84	; 0x54
  4067cc:	f200 80a4 	bhi.w	406918 <_malloc_r+0x490>
  4067d0:	0b28      	lsrs	r0, r5, #12
  4067d2:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  4067d6:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4067da:	306e      	adds	r0, #110	; 0x6e
  4067dc:	e676      	b.n	4064cc <_malloc_r+0x44>
  4067de:	bf00      	nop
  4067e0:	20000474 	.word	0x20000474
  4067e4:	20000944 	.word	0x20000944
  4067e8:	20000948 	.word	0x20000948
  4067ec:	20000940 	.word	0x20000940
  4067f0:	2000093c 	.word	0x2000093c
  4067f4:	20000880 	.word	0x20000880
  4067f8:	0a5a      	lsrs	r2, r3, #9
  4067fa:	2a04      	cmp	r2, #4
  4067fc:	d95e      	bls.n	4068bc <_malloc_r+0x434>
  4067fe:	2a14      	cmp	r2, #20
  406800:	f200 80b3 	bhi.w	40696a <_malloc_r+0x4e2>
  406804:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  406808:	0049      	lsls	r1, r1, #1
  40680a:	325b      	adds	r2, #91	; 0x5b
  40680c:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  406810:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  406814:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4069f4 <_malloc_r+0x56c>
  406818:	f1ac 0c08 	sub.w	ip, ip, #8
  40681c:	458c      	cmp	ip, r1
  40681e:	f000 8088 	beq.w	406932 <_malloc_r+0x4aa>
  406822:	684a      	ldr	r2, [r1, #4]
  406824:	f022 0203 	bic.w	r2, r2, #3
  406828:	4293      	cmp	r3, r2
  40682a:	d202      	bcs.n	406832 <_malloc_r+0x3aa>
  40682c:	6889      	ldr	r1, [r1, #8]
  40682e:	458c      	cmp	ip, r1
  406830:	d1f7      	bne.n	406822 <_malloc_r+0x39a>
  406832:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  406836:	687a      	ldr	r2, [r7, #4]
  406838:	f8c4 c00c 	str.w	ip, [r4, #12]
  40683c:	60a1      	str	r1, [r4, #8]
  40683e:	f8cc 4008 	str.w	r4, [ip, #8]
  406842:	60cc      	str	r4, [r1, #12]
  406844:	e688      	b.n	406558 <_malloc_r+0xd0>
  406846:	1963      	adds	r3, r4, r5
  406848:	f042 0701 	orr.w	r7, r2, #1
  40684c:	f045 0501 	orr.w	r5, r5, #1
  406850:	6065      	str	r5, [r4, #4]
  406852:	4630      	mov	r0, r6
  406854:	614b      	str	r3, [r1, #20]
  406856:	610b      	str	r3, [r1, #16]
  406858:	f8c3 e00c 	str.w	lr, [r3, #12]
  40685c:	f8c3 e008 	str.w	lr, [r3, #8]
  406860:	605f      	str	r7, [r3, #4]
  406862:	509a      	str	r2, [r3, r2]
  406864:	3408      	adds	r4, #8
  406866:	f000 f9e9 	bl	406c3c <__malloc_unlock>
  40686a:	e6d5      	b.n	406618 <_malloc_r+0x190>
  40686c:	684a      	ldr	r2, [r1, #4]
  40686e:	e673      	b.n	406558 <_malloc_r+0xd0>
  406870:	f108 0801 	add.w	r8, r8, #1
  406874:	f018 0f03 	tst.w	r8, #3
  406878:	f10c 0c08 	add.w	ip, ip, #8
  40687c:	f47f ae7f 	bne.w	40657e <_malloc_r+0xf6>
  406880:	e030      	b.n	4068e4 <_malloc_r+0x45c>
  406882:	68dc      	ldr	r4, [r3, #12]
  406884:	42a3      	cmp	r3, r4
  406886:	bf08      	it	eq
  406888:	3002      	addeq	r0, #2
  40688a:	f43f ae35 	beq.w	4064f8 <_malloc_r+0x70>
  40688e:	e6b3      	b.n	4065f8 <_malloc_r+0x170>
  406890:	440b      	add	r3, r1
  406892:	460c      	mov	r4, r1
  406894:	685a      	ldr	r2, [r3, #4]
  406896:	68c9      	ldr	r1, [r1, #12]
  406898:	f854 5f08 	ldr.w	r5, [r4, #8]!
  40689c:	f042 0201 	orr.w	r2, r2, #1
  4068a0:	605a      	str	r2, [r3, #4]
  4068a2:	4630      	mov	r0, r6
  4068a4:	60e9      	str	r1, [r5, #12]
  4068a6:	608d      	str	r5, [r1, #8]
  4068a8:	f000 f9c8 	bl	406c3c <__malloc_unlock>
  4068ac:	e6b4      	b.n	406618 <_malloc_r+0x190>
  4068ae:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  4068b2:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  4068b6:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4068ba:	e607      	b.n	4064cc <_malloc_r+0x44>
  4068bc:	099a      	lsrs	r2, r3, #6
  4068be:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4068c2:	0049      	lsls	r1, r1, #1
  4068c4:	3238      	adds	r2, #56	; 0x38
  4068c6:	e7a1      	b.n	40680c <_malloc_r+0x384>
  4068c8:	42bc      	cmp	r4, r7
  4068ca:	4b4a      	ldr	r3, [pc, #296]	; (4069f4 <_malloc_r+0x56c>)
  4068cc:	f43f af00 	beq.w	4066d0 <_malloc_r+0x248>
  4068d0:	689c      	ldr	r4, [r3, #8]
  4068d2:	6862      	ldr	r2, [r4, #4]
  4068d4:	f022 0203 	bic.w	r2, r2, #3
  4068d8:	e75a      	b.n	406790 <_malloc_r+0x308>
  4068da:	f859 3908 	ldr.w	r3, [r9], #-8
  4068de:	4599      	cmp	r9, r3
  4068e0:	f040 8082 	bne.w	4069e8 <_malloc_r+0x560>
  4068e4:	f010 0f03 	tst.w	r0, #3
  4068e8:	f100 30ff 	add.w	r0, r0, #4294967295
  4068ec:	d1f5      	bne.n	4068da <_malloc_r+0x452>
  4068ee:	687b      	ldr	r3, [r7, #4]
  4068f0:	ea23 0304 	bic.w	r3, r3, r4
  4068f4:	607b      	str	r3, [r7, #4]
  4068f6:	0064      	lsls	r4, r4, #1
  4068f8:	429c      	cmp	r4, r3
  4068fa:	f63f aebd 	bhi.w	406678 <_malloc_r+0x1f0>
  4068fe:	2c00      	cmp	r4, #0
  406900:	f43f aeba 	beq.w	406678 <_malloc_r+0x1f0>
  406904:	421c      	tst	r4, r3
  406906:	4640      	mov	r0, r8
  406908:	f47f ae35 	bne.w	406576 <_malloc_r+0xee>
  40690c:	0064      	lsls	r4, r4, #1
  40690e:	421c      	tst	r4, r3
  406910:	f100 0004 	add.w	r0, r0, #4
  406914:	d0fa      	beq.n	40690c <_malloc_r+0x484>
  406916:	e62e      	b.n	406576 <_malloc_r+0xee>
  406918:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40691c:	d818      	bhi.n	406950 <_malloc_r+0x4c8>
  40691e:	0be8      	lsrs	r0, r5, #15
  406920:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  406924:	ea4f 034e 	mov.w	r3, lr, lsl #1
  406928:	3077      	adds	r0, #119	; 0x77
  40692a:	e5cf      	b.n	4064cc <_malloc_r+0x44>
  40692c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  406930:	e6eb      	b.n	40670a <_malloc_r+0x282>
  406932:	2101      	movs	r1, #1
  406934:	f8d8 3004 	ldr.w	r3, [r8, #4]
  406938:	1092      	asrs	r2, r2, #2
  40693a:	fa01 f202 	lsl.w	r2, r1, r2
  40693e:	431a      	orrs	r2, r3
  406940:	f8c8 2004 	str.w	r2, [r8, #4]
  406944:	4661      	mov	r1, ip
  406946:	e777      	b.n	406838 <_malloc_r+0x3b0>
  406948:	2301      	movs	r3, #1
  40694a:	f8cb 3004 	str.w	r3, [fp, #4]
  40694e:	e725      	b.n	40679c <_malloc_r+0x314>
  406950:	f240 5254 	movw	r2, #1364	; 0x554
  406954:	4293      	cmp	r3, r2
  406956:	d820      	bhi.n	40699a <_malloc_r+0x512>
  406958:	0ca8      	lsrs	r0, r5, #18
  40695a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  40695e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  406962:	307c      	adds	r0, #124	; 0x7c
  406964:	e5b2      	b.n	4064cc <_malloc_r+0x44>
  406966:	3210      	adds	r2, #16
  406968:	e6a4      	b.n	4066b4 <_malloc_r+0x22c>
  40696a:	2a54      	cmp	r2, #84	; 0x54
  40696c:	d826      	bhi.n	4069bc <_malloc_r+0x534>
  40696e:	0b1a      	lsrs	r2, r3, #12
  406970:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  406974:	0049      	lsls	r1, r1, #1
  406976:	326e      	adds	r2, #110	; 0x6e
  406978:	e748      	b.n	40680c <_malloc_r+0x384>
  40697a:	68bc      	ldr	r4, [r7, #8]
  40697c:	6862      	ldr	r2, [r4, #4]
  40697e:	f022 0203 	bic.w	r2, r2, #3
  406982:	e705      	b.n	406790 <_malloc_r+0x308>
  406984:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406988:	2800      	cmp	r0, #0
  40698a:	f47f aea8 	bne.w	4066de <_malloc_r+0x256>
  40698e:	4442      	add	r2, r8
  406990:	68bb      	ldr	r3, [r7, #8]
  406992:	f042 0201 	orr.w	r2, r2, #1
  406996:	605a      	str	r2, [r3, #4]
  406998:	e6ec      	b.n	406774 <_malloc_r+0x2ec>
  40699a:	23fe      	movs	r3, #254	; 0xfe
  40699c:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  4069a0:	207e      	movs	r0, #126	; 0x7e
  4069a2:	e593      	b.n	4064cc <_malloc_r+0x44>
  4069a4:	2201      	movs	r2, #1
  4069a6:	f04f 0900 	mov.w	r9, #0
  4069aa:	e6c1      	b.n	406730 <_malloc_r+0x2a8>
  4069ac:	f104 0108 	add.w	r1, r4, #8
  4069b0:	4630      	mov	r0, r6
  4069b2:	f000 fea3 	bl	4076fc <_free_r>
  4069b6:	f8d9 1000 	ldr.w	r1, [r9]
  4069ba:	e6db      	b.n	406774 <_malloc_r+0x2ec>
  4069bc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4069c0:	d805      	bhi.n	4069ce <_malloc_r+0x546>
  4069c2:	0bda      	lsrs	r2, r3, #15
  4069c4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4069c8:	0049      	lsls	r1, r1, #1
  4069ca:	3277      	adds	r2, #119	; 0x77
  4069cc:	e71e      	b.n	40680c <_malloc_r+0x384>
  4069ce:	f240 5154 	movw	r1, #1364	; 0x554
  4069d2:	428a      	cmp	r2, r1
  4069d4:	d805      	bhi.n	4069e2 <_malloc_r+0x55a>
  4069d6:	0c9a      	lsrs	r2, r3, #18
  4069d8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4069dc:	0049      	lsls	r1, r1, #1
  4069de:	327c      	adds	r2, #124	; 0x7c
  4069e0:	e714      	b.n	40680c <_malloc_r+0x384>
  4069e2:	21fe      	movs	r1, #254	; 0xfe
  4069e4:	227e      	movs	r2, #126	; 0x7e
  4069e6:	e711      	b.n	40680c <_malloc_r+0x384>
  4069e8:	687b      	ldr	r3, [r7, #4]
  4069ea:	e784      	b.n	4068f6 <_malloc_r+0x46e>
  4069ec:	08e8      	lsrs	r0, r5, #3
  4069ee:	1c43      	adds	r3, r0, #1
  4069f0:	005b      	lsls	r3, r3, #1
  4069f2:	e5f8      	b.n	4065e6 <_malloc_r+0x15e>
  4069f4:	20000474 	.word	0x20000474
	...

00406a00 <memchr>:
  406a00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406a04:	2a10      	cmp	r2, #16
  406a06:	db2b      	blt.n	406a60 <memchr+0x60>
  406a08:	f010 0f07 	tst.w	r0, #7
  406a0c:	d008      	beq.n	406a20 <memchr+0x20>
  406a0e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406a12:	3a01      	subs	r2, #1
  406a14:	428b      	cmp	r3, r1
  406a16:	d02d      	beq.n	406a74 <memchr+0x74>
  406a18:	f010 0f07 	tst.w	r0, #7
  406a1c:	b342      	cbz	r2, 406a70 <memchr+0x70>
  406a1e:	d1f6      	bne.n	406a0e <memchr+0xe>
  406a20:	b4f0      	push	{r4, r5, r6, r7}
  406a22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406a26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406a2a:	f022 0407 	bic.w	r4, r2, #7
  406a2e:	f07f 0700 	mvns.w	r7, #0
  406a32:	2300      	movs	r3, #0
  406a34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406a38:	3c08      	subs	r4, #8
  406a3a:	ea85 0501 	eor.w	r5, r5, r1
  406a3e:	ea86 0601 	eor.w	r6, r6, r1
  406a42:	fa85 f547 	uadd8	r5, r5, r7
  406a46:	faa3 f587 	sel	r5, r3, r7
  406a4a:	fa86 f647 	uadd8	r6, r6, r7
  406a4e:	faa5 f687 	sel	r6, r5, r7
  406a52:	b98e      	cbnz	r6, 406a78 <memchr+0x78>
  406a54:	d1ee      	bne.n	406a34 <memchr+0x34>
  406a56:	bcf0      	pop	{r4, r5, r6, r7}
  406a58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406a5c:	f002 0207 	and.w	r2, r2, #7
  406a60:	b132      	cbz	r2, 406a70 <memchr+0x70>
  406a62:	f810 3b01 	ldrb.w	r3, [r0], #1
  406a66:	3a01      	subs	r2, #1
  406a68:	ea83 0301 	eor.w	r3, r3, r1
  406a6c:	b113      	cbz	r3, 406a74 <memchr+0x74>
  406a6e:	d1f8      	bne.n	406a62 <memchr+0x62>
  406a70:	2000      	movs	r0, #0
  406a72:	4770      	bx	lr
  406a74:	3801      	subs	r0, #1
  406a76:	4770      	bx	lr
  406a78:	2d00      	cmp	r5, #0
  406a7a:	bf06      	itte	eq
  406a7c:	4635      	moveq	r5, r6
  406a7e:	3803      	subeq	r0, #3
  406a80:	3807      	subne	r0, #7
  406a82:	f015 0f01 	tst.w	r5, #1
  406a86:	d107      	bne.n	406a98 <memchr+0x98>
  406a88:	3001      	adds	r0, #1
  406a8a:	f415 7f80 	tst.w	r5, #256	; 0x100
  406a8e:	bf02      	ittt	eq
  406a90:	3001      	addeq	r0, #1
  406a92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406a96:	3001      	addeq	r0, #1
  406a98:	bcf0      	pop	{r4, r5, r6, r7}
  406a9a:	3801      	subs	r0, #1
  406a9c:	4770      	bx	lr
  406a9e:	bf00      	nop

00406aa0 <memcmp>:
  406aa0:	2a03      	cmp	r2, #3
  406aa2:	b470      	push	{r4, r5, r6}
  406aa4:	d926      	bls.n	406af4 <memcmp+0x54>
  406aa6:	ea40 0301 	orr.w	r3, r0, r1
  406aaa:	079b      	lsls	r3, r3, #30
  406aac:	d011      	beq.n	406ad2 <memcmp+0x32>
  406aae:	7804      	ldrb	r4, [r0, #0]
  406ab0:	780d      	ldrb	r5, [r1, #0]
  406ab2:	42ac      	cmp	r4, r5
  406ab4:	d122      	bne.n	406afc <memcmp+0x5c>
  406ab6:	4402      	add	r2, r0
  406ab8:	1c43      	adds	r3, r0, #1
  406aba:	e005      	b.n	406ac8 <memcmp+0x28>
  406abc:	f813 4b01 	ldrb.w	r4, [r3], #1
  406ac0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  406ac4:	42ac      	cmp	r4, r5
  406ac6:	d119      	bne.n	406afc <memcmp+0x5c>
  406ac8:	4293      	cmp	r3, r2
  406aca:	d1f7      	bne.n	406abc <memcmp+0x1c>
  406acc:	2000      	movs	r0, #0
  406ace:	bc70      	pop	{r4, r5, r6}
  406ad0:	4770      	bx	lr
  406ad2:	460c      	mov	r4, r1
  406ad4:	4603      	mov	r3, r0
  406ad6:	681e      	ldr	r6, [r3, #0]
  406ad8:	6825      	ldr	r5, [r4, #0]
  406ada:	42ae      	cmp	r6, r5
  406adc:	4618      	mov	r0, r3
  406ade:	4621      	mov	r1, r4
  406ae0:	f103 0304 	add.w	r3, r3, #4
  406ae4:	f104 0404 	add.w	r4, r4, #4
  406ae8:	d1e1      	bne.n	406aae <memcmp+0xe>
  406aea:	3a04      	subs	r2, #4
  406aec:	2a03      	cmp	r2, #3
  406aee:	4618      	mov	r0, r3
  406af0:	4621      	mov	r1, r4
  406af2:	d8f0      	bhi.n	406ad6 <memcmp+0x36>
  406af4:	2a00      	cmp	r2, #0
  406af6:	d1da      	bne.n	406aae <memcmp+0xe>
  406af8:	4610      	mov	r0, r2
  406afa:	e7e8      	b.n	406ace <memcmp+0x2e>
  406afc:	1b60      	subs	r0, r4, r5
  406afe:	bc70      	pop	{r4, r5, r6}
  406b00:	4770      	bx	lr
  406b02:	bf00      	nop

00406b04 <memcpy>:
  406b04:	4684      	mov	ip, r0
  406b06:	ea41 0300 	orr.w	r3, r1, r0
  406b0a:	f013 0303 	ands.w	r3, r3, #3
  406b0e:	d16d      	bne.n	406bec <memcpy+0xe8>
  406b10:	3a40      	subs	r2, #64	; 0x40
  406b12:	d341      	bcc.n	406b98 <memcpy+0x94>
  406b14:	f851 3b04 	ldr.w	r3, [r1], #4
  406b18:	f840 3b04 	str.w	r3, [r0], #4
  406b1c:	f851 3b04 	ldr.w	r3, [r1], #4
  406b20:	f840 3b04 	str.w	r3, [r0], #4
  406b24:	f851 3b04 	ldr.w	r3, [r1], #4
  406b28:	f840 3b04 	str.w	r3, [r0], #4
  406b2c:	f851 3b04 	ldr.w	r3, [r1], #4
  406b30:	f840 3b04 	str.w	r3, [r0], #4
  406b34:	f851 3b04 	ldr.w	r3, [r1], #4
  406b38:	f840 3b04 	str.w	r3, [r0], #4
  406b3c:	f851 3b04 	ldr.w	r3, [r1], #4
  406b40:	f840 3b04 	str.w	r3, [r0], #4
  406b44:	f851 3b04 	ldr.w	r3, [r1], #4
  406b48:	f840 3b04 	str.w	r3, [r0], #4
  406b4c:	f851 3b04 	ldr.w	r3, [r1], #4
  406b50:	f840 3b04 	str.w	r3, [r0], #4
  406b54:	f851 3b04 	ldr.w	r3, [r1], #4
  406b58:	f840 3b04 	str.w	r3, [r0], #4
  406b5c:	f851 3b04 	ldr.w	r3, [r1], #4
  406b60:	f840 3b04 	str.w	r3, [r0], #4
  406b64:	f851 3b04 	ldr.w	r3, [r1], #4
  406b68:	f840 3b04 	str.w	r3, [r0], #4
  406b6c:	f851 3b04 	ldr.w	r3, [r1], #4
  406b70:	f840 3b04 	str.w	r3, [r0], #4
  406b74:	f851 3b04 	ldr.w	r3, [r1], #4
  406b78:	f840 3b04 	str.w	r3, [r0], #4
  406b7c:	f851 3b04 	ldr.w	r3, [r1], #4
  406b80:	f840 3b04 	str.w	r3, [r0], #4
  406b84:	f851 3b04 	ldr.w	r3, [r1], #4
  406b88:	f840 3b04 	str.w	r3, [r0], #4
  406b8c:	f851 3b04 	ldr.w	r3, [r1], #4
  406b90:	f840 3b04 	str.w	r3, [r0], #4
  406b94:	3a40      	subs	r2, #64	; 0x40
  406b96:	d2bd      	bcs.n	406b14 <memcpy+0x10>
  406b98:	3230      	adds	r2, #48	; 0x30
  406b9a:	d311      	bcc.n	406bc0 <memcpy+0xbc>
  406b9c:	f851 3b04 	ldr.w	r3, [r1], #4
  406ba0:	f840 3b04 	str.w	r3, [r0], #4
  406ba4:	f851 3b04 	ldr.w	r3, [r1], #4
  406ba8:	f840 3b04 	str.w	r3, [r0], #4
  406bac:	f851 3b04 	ldr.w	r3, [r1], #4
  406bb0:	f840 3b04 	str.w	r3, [r0], #4
  406bb4:	f851 3b04 	ldr.w	r3, [r1], #4
  406bb8:	f840 3b04 	str.w	r3, [r0], #4
  406bbc:	3a10      	subs	r2, #16
  406bbe:	d2ed      	bcs.n	406b9c <memcpy+0x98>
  406bc0:	320c      	adds	r2, #12
  406bc2:	d305      	bcc.n	406bd0 <memcpy+0xcc>
  406bc4:	f851 3b04 	ldr.w	r3, [r1], #4
  406bc8:	f840 3b04 	str.w	r3, [r0], #4
  406bcc:	3a04      	subs	r2, #4
  406bce:	d2f9      	bcs.n	406bc4 <memcpy+0xc0>
  406bd0:	3204      	adds	r2, #4
  406bd2:	d008      	beq.n	406be6 <memcpy+0xe2>
  406bd4:	07d2      	lsls	r2, r2, #31
  406bd6:	bf1c      	itt	ne
  406bd8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406bdc:	f800 3b01 	strbne.w	r3, [r0], #1
  406be0:	d301      	bcc.n	406be6 <memcpy+0xe2>
  406be2:	880b      	ldrh	r3, [r1, #0]
  406be4:	8003      	strh	r3, [r0, #0]
  406be6:	4660      	mov	r0, ip
  406be8:	4770      	bx	lr
  406bea:	bf00      	nop
  406bec:	2a08      	cmp	r2, #8
  406bee:	d313      	bcc.n	406c18 <memcpy+0x114>
  406bf0:	078b      	lsls	r3, r1, #30
  406bf2:	d08d      	beq.n	406b10 <memcpy+0xc>
  406bf4:	f010 0303 	ands.w	r3, r0, #3
  406bf8:	d08a      	beq.n	406b10 <memcpy+0xc>
  406bfa:	f1c3 0304 	rsb	r3, r3, #4
  406bfe:	1ad2      	subs	r2, r2, r3
  406c00:	07db      	lsls	r3, r3, #31
  406c02:	bf1c      	itt	ne
  406c04:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406c08:	f800 3b01 	strbne.w	r3, [r0], #1
  406c0c:	d380      	bcc.n	406b10 <memcpy+0xc>
  406c0e:	f831 3b02 	ldrh.w	r3, [r1], #2
  406c12:	f820 3b02 	strh.w	r3, [r0], #2
  406c16:	e77b      	b.n	406b10 <memcpy+0xc>
  406c18:	3a04      	subs	r2, #4
  406c1a:	d3d9      	bcc.n	406bd0 <memcpy+0xcc>
  406c1c:	3a01      	subs	r2, #1
  406c1e:	f811 3b01 	ldrb.w	r3, [r1], #1
  406c22:	f800 3b01 	strb.w	r3, [r0], #1
  406c26:	d2f9      	bcs.n	406c1c <memcpy+0x118>
  406c28:	780b      	ldrb	r3, [r1, #0]
  406c2a:	7003      	strb	r3, [r0, #0]
  406c2c:	784b      	ldrb	r3, [r1, #1]
  406c2e:	7043      	strb	r3, [r0, #1]
  406c30:	788b      	ldrb	r3, [r1, #2]
  406c32:	7083      	strb	r3, [r0, #2]
  406c34:	4660      	mov	r0, ip
  406c36:	4770      	bx	lr

00406c38 <__malloc_lock>:
  406c38:	4770      	bx	lr
  406c3a:	bf00      	nop

00406c3c <__malloc_unlock>:
  406c3c:	4770      	bx	lr
  406c3e:	bf00      	nop

00406c40 <_Balloc>:
  406c40:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406c42:	b570      	push	{r4, r5, r6, lr}
  406c44:	4605      	mov	r5, r0
  406c46:	460c      	mov	r4, r1
  406c48:	b14b      	cbz	r3, 406c5e <_Balloc+0x1e>
  406c4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  406c4e:	b180      	cbz	r0, 406c72 <_Balloc+0x32>
  406c50:	6802      	ldr	r2, [r0, #0]
  406c52:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  406c56:	2300      	movs	r3, #0
  406c58:	6103      	str	r3, [r0, #16]
  406c5a:	60c3      	str	r3, [r0, #12]
  406c5c:	bd70      	pop	{r4, r5, r6, pc}
  406c5e:	2221      	movs	r2, #33	; 0x21
  406c60:	2104      	movs	r1, #4
  406c62:	f000 fccd 	bl	407600 <_calloc_r>
  406c66:	64e8      	str	r0, [r5, #76]	; 0x4c
  406c68:	4603      	mov	r3, r0
  406c6a:	2800      	cmp	r0, #0
  406c6c:	d1ed      	bne.n	406c4a <_Balloc+0xa>
  406c6e:	2000      	movs	r0, #0
  406c70:	bd70      	pop	{r4, r5, r6, pc}
  406c72:	2101      	movs	r1, #1
  406c74:	fa01 f604 	lsl.w	r6, r1, r4
  406c78:	1d72      	adds	r2, r6, #5
  406c7a:	4628      	mov	r0, r5
  406c7c:	0092      	lsls	r2, r2, #2
  406c7e:	f000 fcbf 	bl	407600 <_calloc_r>
  406c82:	2800      	cmp	r0, #0
  406c84:	d0f3      	beq.n	406c6e <_Balloc+0x2e>
  406c86:	6044      	str	r4, [r0, #4]
  406c88:	6086      	str	r6, [r0, #8]
  406c8a:	e7e4      	b.n	406c56 <_Balloc+0x16>

00406c8c <_Bfree>:
  406c8c:	b131      	cbz	r1, 406c9c <_Bfree+0x10>
  406c8e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406c90:	684a      	ldr	r2, [r1, #4]
  406c92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406c96:	6008      	str	r0, [r1, #0]
  406c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406c9c:	4770      	bx	lr
  406c9e:	bf00      	nop

00406ca0 <__multadd>:
  406ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
  406ca2:	690c      	ldr	r4, [r1, #16]
  406ca4:	b083      	sub	sp, #12
  406ca6:	460d      	mov	r5, r1
  406ca8:	4606      	mov	r6, r0
  406caa:	f101 0e14 	add.w	lr, r1, #20
  406cae:	2700      	movs	r7, #0
  406cb0:	f8de 0000 	ldr.w	r0, [lr]
  406cb4:	b281      	uxth	r1, r0
  406cb6:	fb02 3101 	mla	r1, r2, r1, r3
  406cba:	0c0b      	lsrs	r3, r1, #16
  406cbc:	0c00      	lsrs	r0, r0, #16
  406cbe:	fb02 3300 	mla	r3, r2, r0, r3
  406cc2:	b289      	uxth	r1, r1
  406cc4:	3701      	adds	r7, #1
  406cc6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  406cca:	42bc      	cmp	r4, r7
  406ccc:	f84e 1b04 	str.w	r1, [lr], #4
  406cd0:	ea4f 4313 	mov.w	r3, r3, lsr #16
  406cd4:	dcec      	bgt.n	406cb0 <__multadd+0x10>
  406cd6:	b13b      	cbz	r3, 406ce8 <__multadd+0x48>
  406cd8:	68aa      	ldr	r2, [r5, #8]
  406cda:	4294      	cmp	r4, r2
  406cdc:	da07      	bge.n	406cee <__multadd+0x4e>
  406cde:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  406ce2:	3401      	adds	r4, #1
  406ce4:	6153      	str	r3, [r2, #20]
  406ce6:	612c      	str	r4, [r5, #16]
  406ce8:	4628      	mov	r0, r5
  406cea:	b003      	add	sp, #12
  406cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406cee:	6869      	ldr	r1, [r5, #4]
  406cf0:	9301      	str	r3, [sp, #4]
  406cf2:	3101      	adds	r1, #1
  406cf4:	4630      	mov	r0, r6
  406cf6:	f7ff ffa3 	bl	406c40 <_Balloc>
  406cfa:	692a      	ldr	r2, [r5, #16]
  406cfc:	3202      	adds	r2, #2
  406cfe:	f105 010c 	add.w	r1, r5, #12
  406d02:	4607      	mov	r7, r0
  406d04:	0092      	lsls	r2, r2, #2
  406d06:	300c      	adds	r0, #12
  406d08:	f7ff fefc 	bl	406b04 <memcpy>
  406d0c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  406d0e:	6869      	ldr	r1, [r5, #4]
  406d10:	9b01      	ldr	r3, [sp, #4]
  406d12:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406d16:	6028      	str	r0, [r5, #0]
  406d18:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406d1c:	463d      	mov	r5, r7
  406d1e:	e7de      	b.n	406cde <__multadd+0x3e>

00406d20 <__hi0bits>:
  406d20:	0c03      	lsrs	r3, r0, #16
  406d22:	041b      	lsls	r3, r3, #16
  406d24:	b9b3      	cbnz	r3, 406d54 <__hi0bits+0x34>
  406d26:	0400      	lsls	r0, r0, #16
  406d28:	2310      	movs	r3, #16
  406d2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  406d2e:	bf04      	itt	eq
  406d30:	0200      	lsleq	r0, r0, #8
  406d32:	3308      	addeq	r3, #8
  406d34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  406d38:	bf04      	itt	eq
  406d3a:	0100      	lsleq	r0, r0, #4
  406d3c:	3304      	addeq	r3, #4
  406d3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  406d42:	bf04      	itt	eq
  406d44:	0080      	lsleq	r0, r0, #2
  406d46:	3302      	addeq	r3, #2
  406d48:	2800      	cmp	r0, #0
  406d4a:	db07      	blt.n	406d5c <__hi0bits+0x3c>
  406d4c:	0042      	lsls	r2, r0, #1
  406d4e:	d403      	bmi.n	406d58 <__hi0bits+0x38>
  406d50:	2020      	movs	r0, #32
  406d52:	4770      	bx	lr
  406d54:	2300      	movs	r3, #0
  406d56:	e7e8      	b.n	406d2a <__hi0bits+0xa>
  406d58:	1c58      	adds	r0, r3, #1
  406d5a:	4770      	bx	lr
  406d5c:	4618      	mov	r0, r3
  406d5e:	4770      	bx	lr

00406d60 <__lo0bits>:
  406d60:	6803      	ldr	r3, [r0, #0]
  406d62:	f013 0207 	ands.w	r2, r3, #7
  406d66:	d007      	beq.n	406d78 <__lo0bits+0x18>
  406d68:	07d9      	lsls	r1, r3, #31
  406d6a:	d420      	bmi.n	406dae <__lo0bits+0x4e>
  406d6c:	079a      	lsls	r2, r3, #30
  406d6e:	d420      	bmi.n	406db2 <__lo0bits+0x52>
  406d70:	089b      	lsrs	r3, r3, #2
  406d72:	6003      	str	r3, [r0, #0]
  406d74:	2002      	movs	r0, #2
  406d76:	4770      	bx	lr
  406d78:	b299      	uxth	r1, r3
  406d7a:	b909      	cbnz	r1, 406d80 <__lo0bits+0x20>
  406d7c:	0c1b      	lsrs	r3, r3, #16
  406d7e:	2210      	movs	r2, #16
  406d80:	f013 0fff 	tst.w	r3, #255	; 0xff
  406d84:	bf04      	itt	eq
  406d86:	0a1b      	lsreq	r3, r3, #8
  406d88:	3208      	addeq	r2, #8
  406d8a:	0719      	lsls	r1, r3, #28
  406d8c:	bf04      	itt	eq
  406d8e:	091b      	lsreq	r3, r3, #4
  406d90:	3204      	addeq	r2, #4
  406d92:	0799      	lsls	r1, r3, #30
  406d94:	bf04      	itt	eq
  406d96:	089b      	lsreq	r3, r3, #2
  406d98:	3202      	addeq	r2, #2
  406d9a:	07d9      	lsls	r1, r3, #31
  406d9c:	d404      	bmi.n	406da8 <__lo0bits+0x48>
  406d9e:	085b      	lsrs	r3, r3, #1
  406da0:	d101      	bne.n	406da6 <__lo0bits+0x46>
  406da2:	2020      	movs	r0, #32
  406da4:	4770      	bx	lr
  406da6:	3201      	adds	r2, #1
  406da8:	6003      	str	r3, [r0, #0]
  406daa:	4610      	mov	r0, r2
  406dac:	4770      	bx	lr
  406dae:	2000      	movs	r0, #0
  406db0:	4770      	bx	lr
  406db2:	085b      	lsrs	r3, r3, #1
  406db4:	6003      	str	r3, [r0, #0]
  406db6:	2001      	movs	r0, #1
  406db8:	4770      	bx	lr
  406dba:	bf00      	nop

00406dbc <__i2b>:
  406dbc:	b510      	push	{r4, lr}
  406dbe:	460c      	mov	r4, r1
  406dc0:	2101      	movs	r1, #1
  406dc2:	f7ff ff3d 	bl	406c40 <_Balloc>
  406dc6:	2201      	movs	r2, #1
  406dc8:	6144      	str	r4, [r0, #20]
  406dca:	6102      	str	r2, [r0, #16]
  406dcc:	bd10      	pop	{r4, pc}
  406dce:	bf00      	nop

00406dd0 <__multiply>:
  406dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406dd4:	690d      	ldr	r5, [r1, #16]
  406dd6:	6917      	ldr	r7, [r2, #16]
  406dd8:	42bd      	cmp	r5, r7
  406dda:	b083      	sub	sp, #12
  406ddc:	460c      	mov	r4, r1
  406dde:	4616      	mov	r6, r2
  406de0:	da04      	bge.n	406dec <__multiply+0x1c>
  406de2:	462a      	mov	r2, r5
  406de4:	4634      	mov	r4, r6
  406de6:	463d      	mov	r5, r7
  406de8:	460e      	mov	r6, r1
  406dea:	4617      	mov	r7, r2
  406dec:	68a3      	ldr	r3, [r4, #8]
  406dee:	6861      	ldr	r1, [r4, #4]
  406df0:	eb05 0807 	add.w	r8, r5, r7
  406df4:	4598      	cmp	r8, r3
  406df6:	bfc8      	it	gt
  406df8:	3101      	addgt	r1, #1
  406dfa:	f7ff ff21 	bl	406c40 <_Balloc>
  406dfe:	f100 0c14 	add.w	ip, r0, #20
  406e02:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  406e06:	45cc      	cmp	ip, r9
  406e08:	9000      	str	r0, [sp, #0]
  406e0a:	d205      	bcs.n	406e18 <__multiply+0x48>
  406e0c:	4663      	mov	r3, ip
  406e0e:	2100      	movs	r1, #0
  406e10:	f843 1b04 	str.w	r1, [r3], #4
  406e14:	4599      	cmp	r9, r3
  406e16:	d8fb      	bhi.n	406e10 <__multiply+0x40>
  406e18:	f106 0214 	add.w	r2, r6, #20
  406e1c:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  406e20:	f104 0314 	add.w	r3, r4, #20
  406e24:	4552      	cmp	r2, sl
  406e26:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  406e2a:	d254      	bcs.n	406ed6 <__multiply+0x106>
  406e2c:	f8cd 9004 	str.w	r9, [sp, #4]
  406e30:	4699      	mov	r9, r3
  406e32:	f852 3b04 	ldr.w	r3, [r2], #4
  406e36:	fa1f fb83 	uxth.w	fp, r3
  406e3a:	f1bb 0f00 	cmp.w	fp, #0
  406e3e:	d020      	beq.n	406e82 <__multiply+0xb2>
  406e40:	2000      	movs	r0, #0
  406e42:	464f      	mov	r7, r9
  406e44:	4666      	mov	r6, ip
  406e46:	4605      	mov	r5, r0
  406e48:	e000      	b.n	406e4c <__multiply+0x7c>
  406e4a:	461e      	mov	r6, r3
  406e4c:	f857 4b04 	ldr.w	r4, [r7], #4
  406e50:	6830      	ldr	r0, [r6, #0]
  406e52:	b2a1      	uxth	r1, r4
  406e54:	b283      	uxth	r3, r0
  406e56:	fb0b 3101 	mla	r1, fp, r1, r3
  406e5a:	0c24      	lsrs	r4, r4, #16
  406e5c:	0c00      	lsrs	r0, r0, #16
  406e5e:	194b      	adds	r3, r1, r5
  406e60:	fb0b 0004 	mla	r0, fp, r4, r0
  406e64:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  406e68:	b299      	uxth	r1, r3
  406e6a:	4633      	mov	r3, r6
  406e6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  406e70:	45be      	cmp	lr, r7
  406e72:	ea4f 4510 	mov.w	r5, r0, lsr #16
  406e76:	f843 1b04 	str.w	r1, [r3], #4
  406e7a:	d8e6      	bhi.n	406e4a <__multiply+0x7a>
  406e7c:	6075      	str	r5, [r6, #4]
  406e7e:	f852 3c04 	ldr.w	r3, [r2, #-4]
  406e82:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  406e86:	d020      	beq.n	406eca <__multiply+0xfa>
  406e88:	f8dc 3000 	ldr.w	r3, [ip]
  406e8c:	4667      	mov	r7, ip
  406e8e:	4618      	mov	r0, r3
  406e90:	464d      	mov	r5, r9
  406e92:	2100      	movs	r1, #0
  406e94:	e000      	b.n	406e98 <__multiply+0xc8>
  406e96:	4637      	mov	r7, r6
  406e98:	882c      	ldrh	r4, [r5, #0]
  406e9a:	0c00      	lsrs	r0, r0, #16
  406e9c:	fb0b 0004 	mla	r0, fp, r4, r0
  406ea0:	4401      	add	r1, r0
  406ea2:	b29c      	uxth	r4, r3
  406ea4:	463e      	mov	r6, r7
  406ea6:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  406eaa:	f846 3b04 	str.w	r3, [r6], #4
  406eae:	6878      	ldr	r0, [r7, #4]
  406eb0:	f855 4b04 	ldr.w	r4, [r5], #4
  406eb4:	b283      	uxth	r3, r0
  406eb6:	0c24      	lsrs	r4, r4, #16
  406eb8:	fb0b 3404 	mla	r4, fp, r4, r3
  406ebc:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  406ec0:	45ae      	cmp	lr, r5
  406ec2:	ea4f 4113 	mov.w	r1, r3, lsr #16
  406ec6:	d8e6      	bhi.n	406e96 <__multiply+0xc6>
  406ec8:	607b      	str	r3, [r7, #4]
  406eca:	4592      	cmp	sl, r2
  406ecc:	f10c 0c04 	add.w	ip, ip, #4
  406ed0:	d8af      	bhi.n	406e32 <__multiply+0x62>
  406ed2:	f8dd 9004 	ldr.w	r9, [sp, #4]
  406ed6:	f1b8 0f00 	cmp.w	r8, #0
  406eda:	dd0b      	ble.n	406ef4 <__multiply+0x124>
  406edc:	f859 3c04 	ldr.w	r3, [r9, #-4]
  406ee0:	f1a9 0904 	sub.w	r9, r9, #4
  406ee4:	b11b      	cbz	r3, 406eee <__multiply+0x11e>
  406ee6:	e005      	b.n	406ef4 <__multiply+0x124>
  406ee8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  406eec:	b913      	cbnz	r3, 406ef4 <__multiply+0x124>
  406eee:	f1b8 0801 	subs.w	r8, r8, #1
  406ef2:	d1f9      	bne.n	406ee8 <__multiply+0x118>
  406ef4:	9800      	ldr	r0, [sp, #0]
  406ef6:	f8c0 8010 	str.w	r8, [r0, #16]
  406efa:	b003      	add	sp, #12
  406efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406f00 <__pow5mult>:
  406f00:	f012 0303 	ands.w	r3, r2, #3
  406f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406f08:	4614      	mov	r4, r2
  406f0a:	4607      	mov	r7, r0
  406f0c:	d12e      	bne.n	406f6c <__pow5mult+0x6c>
  406f0e:	460e      	mov	r6, r1
  406f10:	10a4      	asrs	r4, r4, #2
  406f12:	d01c      	beq.n	406f4e <__pow5mult+0x4e>
  406f14:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  406f16:	b395      	cbz	r5, 406f7e <__pow5mult+0x7e>
  406f18:	07e3      	lsls	r3, r4, #31
  406f1a:	f04f 0800 	mov.w	r8, #0
  406f1e:	d406      	bmi.n	406f2e <__pow5mult+0x2e>
  406f20:	1064      	asrs	r4, r4, #1
  406f22:	d014      	beq.n	406f4e <__pow5mult+0x4e>
  406f24:	6828      	ldr	r0, [r5, #0]
  406f26:	b1a8      	cbz	r0, 406f54 <__pow5mult+0x54>
  406f28:	4605      	mov	r5, r0
  406f2a:	07e3      	lsls	r3, r4, #31
  406f2c:	d5f8      	bpl.n	406f20 <__pow5mult+0x20>
  406f2e:	462a      	mov	r2, r5
  406f30:	4631      	mov	r1, r6
  406f32:	4638      	mov	r0, r7
  406f34:	f7ff ff4c 	bl	406dd0 <__multiply>
  406f38:	b1b6      	cbz	r6, 406f68 <__pow5mult+0x68>
  406f3a:	6872      	ldr	r2, [r6, #4]
  406f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406f3e:	1064      	asrs	r4, r4, #1
  406f40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406f44:	6031      	str	r1, [r6, #0]
  406f46:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406f4a:	4606      	mov	r6, r0
  406f4c:	d1ea      	bne.n	406f24 <__pow5mult+0x24>
  406f4e:	4630      	mov	r0, r6
  406f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406f54:	462a      	mov	r2, r5
  406f56:	4629      	mov	r1, r5
  406f58:	4638      	mov	r0, r7
  406f5a:	f7ff ff39 	bl	406dd0 <__multiply>
  406f5e:	6028      	str	r0, [r5, #0]
  406f60:	f8c0 8000 	str.w	r8, [r0]
  406f64:	4605      	mov	r5, r0
  406f66:	e7e0      	b.n	406f2a <__pow5mult+0x2a>
  406f68:	4606      	mov	r6, r0
  406f6a:	e7d9      	b.n	406f20 <__pow5mult+0x20>
  406f6c:	1e5a      	subs	r2, r3, #1
  406f6e:	4d0b      	ldr	r5, [pc, #44]	; (406f9c <__pow5mult+0x9c>)
  406f70:	2300      	movs	r3, #0
  406f72:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  406f76:	f7ff fe93 	bl	406ca0 <__multadd>
  406f7a:	4606      	mov	r6, r0
  406f7c:	e7c8      	b.n	406f10 <__pow5mult+0x10>
  406f7e:	2101      	movs	r1, #1
  406f80:	4638      	mov	r0, r7
  406f82:	f7ff fe5d 	bl	406c40 <_Balloc>
  406f86:	f240 2171 	movw	r1, #625	; 0x271
  406f8a:	2201      	movs	r2, #1
  406f8c:	2300      	movs	r3, #0
  406f8e:	6141      	str	r1, [r0, #20]
  406f90:	6102      	str	r2, [r0, #16]
  406f92:	4605      	mov	r5, r0
  406f94:	64b8      	str	r0, [r7, #72]	; 0x48
  406f96:	6003      	str	r3, [r0, #0]
  406f98:	e7be      	b.n	406f18 <__pow5mult+0x18>
  406f9a:	bf00      	nop
  406f9c:	00409510 	.word	0x00409510

00406fa0 <__lshift>:
  406fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406fa4:	4691      	mov	r9, r2
  406fa6:	690a      	ldr	r2, [r1, #16]
  406fa8:	688b      	ldr	r3, [r1, #8]
  406faa:	ea4f 1469 	mov.w	r4, r9, asr #5
  406fae:	eb04 0802 	add.w	r8, r4, r2
  406fb2:	f108 0501 	add.w	r5, r8, #1
  406fb6:	429d      	cmp	r5, r3
  406fb8:	460e      	mov	r6, r1
  406fba:	4682      	mov	sl, r0
  406fbc:	6849      	ldr	r1, [r1, #4]
  406fbe:	dd04      	ble.n	406fca <__lshift+0x2a>
  406fc0:	005b      	lsls	r3, r3, #1
  406fc2:	429d      	cmp	r5, r3
  406fc4:	f101 0101 	add.w	r1, r1, #1
  406fc8:	dcfa      	bgt.n	406fc0 <__lshift+0x20>
  406fca:	4650      	mov	r0, sl
  406fcc:	f7ff fe38 	bl	406c40 <_Balloc>
  406fd0:	2c00      	cmp	r4, #0
  406fd2:	f100 0214 	add.w	r2, r0, #20
  406fd6:	dd38      	ble.n	40704a <__lshift+0xaa>
  406fd8:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  406fdc:	2100      	movs	r1, #0
  406fde:	f842 1b04 	str.w	r1, [r2], #4
  406fe2:	4293      	cmp	r3, r2
  406fe4:	d1fb      	bne.n	406fde <__lshift+0x3e>
  406fe6:	6934      	ldr	r4, [r6, #16]
  406fe8:	f106 0114 	add.w	r1, r6, #20
  406fec:	f019 091f 	ands.w	r9, r9, #31
  406ff0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406ff4:	d021      	beq.n	40703a <__lshift+0x9a>
  406ff6:	f1c9 0220 	rsb	r2, r9, #32
  406ffa:	2400      	movs	r4, #0
  406ffc:	680f      	ldr	r7, [r1, #0]
  406ffe:	fa07 fc09 	lsl.w	ip, r7, r9
  407002:	ea4c 0404 	orr.w	r4, ip, r4
  407006:	469c      	mov	ip, r3
  407008:	f843 4b04 	str.w	r4, [r3], #4
  40700c:	f851 4b04 	ldr.w	r4, [r1], #4
  407010:	458e      	cmp	lr, r1
  407012:	fa24 f402 	lsr.w	r4, r4, r2
  407016:	d8f1      	bhi.n	406ffc <__lshift+0x5c>
  407018:	f8cc 4004 	str.w	r4, [ip, #4]
  40701c:	b10c      	cbz	r4, 407022 <__lshift+0x82>
  40701e:	f108 0502 	add.w	r5, r8, #2
  407022:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  407026:	6872      	ldr	r2, [r6, #4]
  407028:	3d01      	subs	r5, #1
  40702a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40702e:	6105      	str	r5, [r0, #16]
  407030:	6031      	str	r1, [r6, #0]
  407032:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40703a:	3b04      	subs	r3, #4
  40703c:	f851 2b04 	ldr.w	r2, [r1], #4
  407040:	f843 2f04 	str.w	r2, [r3, #4]!
  407044:	458e      	cmp	lr, r1
  407046:	d8f9      	bhi.n	40703c <__lshift+0x9c>
  407048:	e7eb      	b.n	407022 <__lshift+0x82>
  40704a:	4613      	mov	r3, r2
  40704c:	e7cb      	b.n	406fe6 <__lshift+0x46>
  40704e:	bf00      	nop

00407050 <__mcmp>:
  407050:	6902      	ldr	r2, [r0, #16]
  407052:	690b      	ldr	r3, [r1, #16]
  407054:	1ad2      	subs	r2, r2, r3
  407056:	d112      	bne.n	40707e <__mcmp+0x2e>
  407058:	009b      	lsls	r3, r3, #2
  40705a:	3014      	adds	r0, #20
  40705c:	3114      	adds	r1, #20
  40705e:	4419      	add	r1, r3
  407060:	b410      	push	{r4}
  407062:	4403      	add	r3, r0
  407064:	e001      	b.n	40706a <__mcmp+0x1a>
  407066:	4298      	cmp	r0, r3
  407068:	d20b      	bcs.n	407082 <__mcmp+0x32>
  40706a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40706e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  407072:	4294      	cmp	r4, r2
  407074:	d0f7      	beq.n	407066 <__mcmp+0x16>
  407076:	d307      	bcc.n	407088 <__mcmp+0x38>
  407078:	2001      	movs	r0, #1
  40707a:	bc10      	pop	{r4}
  40707c:	4770      	bx	lr
  40707e:	4610      	mov	r0, r2
  407080:	4770      	bx	lr
  407082:	2000      	movs	r0, #0
  407084:	bc10      	pop	{r4}
  407086:	4770      	bx	lr
  407088:	f04f 30ff 	mov.w	r0, #4294967295
  40708c:	e7f5      	b.n	40707a <__mcmp+0x2a>
  40708e:	bf00      	nop

00407090 <__mdiff>:
  407090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407094:	690b      	ldr	r3, [r1, #16]
  407096:	460f      	mov	r7, r1
  407098:	6911      	ldr	r1, [r2, #16]
  40709a:	1a5b      	subs	r3, r3, r1
  40709c:	2b00      	cmp	r3, #0
  40709e:	4690      	mov	r8, r2
  4070a0:	d117      	bne.n	4070d2 <__mdiff+0x42>
  4070a2:	0089      	lsls	r1, r1, #2
  4070a4:	f107 0214 	add.w	r2, r7, #20
  4070a8:	f108 0514 	add.w	r5, r8, #20
  4070ac:	1853      	adds	r3, r2, r1
  4070ae:	4429      	add	r1, r5
  4070b0:	e001      	b.n	4070b6 <__mdiff+0x26>
  4070b2:	429a      	cmp	r2, r3
  4070b4:	d25e      	bcs.n	407174 <__mdiff+0xe4>
  4070b6:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  4070ba:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4070be:	42a6      	cmp	r6, r4
  4070c0:	d0f7      	beq.n	4070b2 <__mdiff+0x22>
  4070c2:	d260      	bcs.n	407186 <__mdiff+0xf6>
  4070c4:	463b      	mov	r3, r7
  4070c6:	4614      	mov	r4, r2
  4070c8:	4647      	mov	r7, r8
  4070ca:	f04f 0901 	mov.w	r9, #1
  4070ce:	4698      	mov	r8, r3
  4070d0:	e006      	b.n	4070e0 <__mdiff+0x50>
  4070d2:	db5d      	blt.n	407190 <__mdiff+0x100>
  4070d4:	f107 0514 	add.w	r5, r7, #20
  4070d8:	f102 0414 	add.w	r4, r2, #20
  4070dc:	f04f 0900 	mov.w	r9, #0
  4070e0:	6879      	ldr	r1, [r7, #4]
  4070e2:	f7ff fdad 	bl	406c40 <_Balloc>
  4070e6:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4070ea:	693e      	ldr	r6, [r7, #16]
  4070ec:	f8c0 900c 	str.w	r9, [r0, #12]
  4070f0:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4070f4:	46a6      	mov	lr, r4
  4070f6:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4070fa:	f100 0414 	add.w	r4, r0, #20
  4070fe:	2300      	movs	r3, #0
  407100:	f85e 1b04 	ldr.w	r1, [lr], #4
  407104:	f855 8b04 	ldr.w	r8, [r5], #4
  407108:	b28a      	uxth	r2, r1
  40710a:	fa13 f388 	uxtah	r3, r3, r8
  40710e:	0c09      	lsrs	r1, r1, #16
  407110:	1a9a      	subs	r2, r3, r2
  407112:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  407116:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40711a:	b292      	uxth	r2, r2
  40711c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407120:	45f4      	cmp	ip, lr
  407122:	f844 2b04 	str.w	r2, [r4], #4
  407126:	ea4f 4323 	mov.w	r3, r3, asr #16
  40712a:	d8e9      	bhi.n	407100 <__mdiff+0x70>
  40712c:	42af      	cmp	r7, r5
  40712e:	d917      	bls.n	407160 <__mdiff+0xd0>
  407130:	46a4      	mov	ip, r4
  407132:	4629      	mov	r1, r5
  407134:	f851 eb04 	ldr.w	lr, [r1], #4
  407138:	fa13 f28e 	uxtah	r2, r3, lr
  40713c:	1413      	asrs	r3, r2, #16
  40713e:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  407142:	b292      	uxth	r2, r2
  407144:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407148:	428f      	cmp	r7, r1
  40714a:	f84c 2b04 	str.w	r2, [ip], #4
  40714e:	ea4f 4323 	mov.w	r3, r3, asr #16
  407152:	d8ef      	bhi.n	407134 <__mdiff+0xa4>
  407154:	43ed      	mvns	r5, r5
  407156:	443d      	add	r5, r7
  407158:	f025 0503 	bic.w	r5, r5, #3
  40715c:	3504      	adds	r5, #4
  40715e:	442c      	add	r4, r5
  407160:	3c04      	subs	r4, #4
  407162:	b922      	cbnz	r2, 40716e <__mdiff+0xde>
  407164:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407168:	3e01      	subs	r6, #1
  40716a:	2b00      	cmp	r3, #0
  40716c:	d0fa      	beq.n	407164 <__mdiff+0xd4>
  40716e:	6106      	str	r6, [r0, #16]
  407170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407174:	2100      	movs	r1, #0
  407176:	f7ff fd63 	bl	406c40 <_Balloc>
  40717a:	2201      	movs	r2, #1
  40717c:	2300      	movs	r3, #0
  40717e:	6102      	str	r2, [r0, #16]
  407180:	6143      	str	r3, [r0, #20]
  407182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407186:	462c      	mov	r4, r5
  407188:	f04f 0900 	mov.w	r9, #0
  40718c:	4615      	mov	r5, r2
  40718e:	e7a7      	b.n	4070e0 <__mdiff+0x50>
  407190:	463b      	mov	r3, r7
  407192:	f107 0414 	add.w	r4, r7, #20
  407196:	f108 0514 	add.w	r5, r8, #20
  40719a:	4647      	mov	r7, r8
  40719c:	f04f 0901 	mov.w	r9, #1
  4071a0:	4698      	mov	r8, r3
  4071a2:	e79d      	b.n	4070e0 <__mdiff+0x50>

004071a4 <__d2b>:
  4071a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4071a8:	b082      	sub	sp, #8
  4071aa:	2101      	movs	r1, #1
  4071ac:	461c      	mov	r4, r3
  4071ae:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4071b2:	4615      	mov	r5, r2
  4071b4:	9e08      	ldr	r6, [sp, #32]
  4071b6:	f7ff fd43 	bl	406c40 <_Balloc>
  4071ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4071be:	4680      	mov	r8, r0
  4071c0:	b10f      	cbz	r7, 4071c6 <__d2b+0x22>
  4071c2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4071c6:	9401      	str	r4, [sp, #4]
  4071c8:	b31d      	cbz	r5, 407212 <__d2b+0x6e>
  4071ca:	a802      	add	r0, sp, #8
  4071cc:	f840 5d08 	str.w	r5, [r0, #-8]!
  4071d0:	f7ff fdc6 	bl	406d60 <__lo0bits>
  4071d4:	2800      	cmp	r0, #0
  4071d6:	d134      	bne.n	407242 <__d2b+0x9e>
  4071d8:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4071dc:	f8c8 2014 	str.w	r2, [r8, #20]
  4071e0:	2b00      	cmp	r3, #0
  4071e2:	bf0c      	ite	eq
  4071e4:	2101      	moveq	r1, #1
  4071e6:	2102      	movne	r1, #2
  4071e8:	f8c8 3018 	str.w	r3, [r8, #24]
  4071ec:	f8c8 1010 	str.w	r1, [r8, #16]
  4071f0:	b9df      	cbnz	r7, 40722a <__d2b+0x86>
  4071f2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4071f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4071fa:	6030      	str	r0, [r6, #0]
  4071fc:	6918      	ldr	r0, [r3, #16]
  4071fe:	f7ff fd8f 	bl	406d20 <__hi0bits>
  407202:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407204:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  407208:	6018      	str	r0, [r3, #0]
  40720a:	4640      	mov	r0, r8
  40720c:	b002      	add	sp, #8
  40720e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407212:	a801      	add	r0, sp, #4
  407214:	f7ff fda4 	bl	406d60 <__lo0bits>
  407218:	9b01      	ldr	r3, [sp, #4]
  40721a:	f8c8 3014 	str.w	r3, [r8, #20]
  40721e:	2101      	movs	r1, #1
  407220:	3020      	adds	r0, #32
  407222:	f8c8 1010 	str.w	r1, [r8, #16]
  407226:	2f00      	cmp	r7, #0
  407228:	d0e3      	beq.n	4071f2 <__d2b+0x4e>
  40722a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40722c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  407230:	4407      	add	r7, r0
  407232:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  407236:	6037      	str	r7, [r6, #0]
  407238:	6018      	str	r0, [r3, #0]
  40723a:	4640      	mov	r0, r8
  40723c:	b002      	add	sp, #8
  40723e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407242:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407246:	f1c0 0120 	rsb	r1, r0, #32
  40724a:	fa03 f101 	lsl.w	r1, r3, r1
  40724e:	430a      	orrs	r2, r1
  407250:	40c3      	lsrs	r3, r0
  407252:	9301      	str	r3, [sp, #4]
  407254:	f8c8 2014 	str.w	r2, [r8, #20]
  407258:	e7c2      	b.n	4071e0 <__d2b+0x3c>
  40725a:	bf00      	nop

0040725c <_sbrk_r>:
  40725c:	b538      	push	{r3, r4, r5, lr}
  40725e:	4c07      	ldr	r4, [pc, #28]	; (40727c <_sbrk_r+0x20>)
  407260:	2300      	movs	r3, #0
  407262:	4605      	mov	r5, r0
  407264:	4608      	mov	r0, r1
  407266:	6023      	str	r3, [r4, #0]
  407268:	f7fc f918 	bl	40349c <_sbrk>
  40726c:	1c43      	adds	r3, r0, #1
  40726e:	d000      	beq.n	407272 <_sbrk_r+0x16>
  407270:	bd38      	pop	{r3, r4, r5, pc}
  407272:	6823      	ldr	r3, [r4, #0]
  407274:	2b00      	cmp	r3, #0
  407276:	d0fb      	beq.n	407270 <_sbrk_r+0x14>
  407278:	602b      	str	r3, [r5, #0]
  40727a:	bd38      	pop	{r3, r4, r5, pc}
  40727c:	2001b730 	.word	0x2001b730

00407280 <strchr>:
  407280:	b470      	push	{r4, r5, r6}
  407282:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
  407286:	d034      	beq.n	4072f2 <strchr+0x72>
  407288:	0785      	lsls	r5, r0, #30
  40728a:	d00f      	beq.n	4072ac <strchr+0x2c>
  40728c:	7803      	ldrb	r3, [r0, #0]
  40728e:	2b00      	cmp	r3, #0
  407290:	d05a      	beq.n	407348 <strchr+0xc8>
  407292:	429c      	cmp	r4, r3
  407294:	d02b      	beq.n	4072ee <strchr+0x6e>
  407296:	1c43      	adds	r3, r0, #1
  407298:	e005      	b.n	4072a6 <strchr+0x26>
  40729a:	f813 2b01 	ldrb.w	r2, [r3], #1
  40729e:	2a00      	cmp	r2, #0
  4072a0:	d04f      	beq.n	407342 <strchr+0xc2>
  4072a2:	4294      	cmp	r4, r2
  4072a4:	d023      	beq.n	4072ee <strchr+0x6e>
  4072a6:	079a      	lsls	r2, r3, #30
  4072a8:	4618      	mov	r0, r3
  4072aa:	d1f6      	bne.n	40729a <strchr+0x1a>
  4072ac:	020e      	lsls	r6, r1, #8
  4072ae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
  4072b2:	4326      	orrs	r6, r4
  4072b4:	6803      	ldr	r3, [r0, #0]
  4072b6:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  4072ba:	e001      	b.n	4072c0 <strchr+0x40>
  4072bc:	f850 3f04 	ldr.w	r3, [r0, #4]!
  4072c0:	ea86 0503 	eor.w	r5, r6, r3
  4072c4:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  4072c8:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
  4072cc:	ea22 0205 	bic.w	r2, r2, r5
  4072d0:	ea21 0303 	bic.w	r3, r1, r3
  4072d4:	4313      	orrs	r3, r2
  4072d6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4072da:	d0ef      	beq.n	4072bc <strchr+0x3c>
  4072dc:	7803      	ldrb	r3, [r0, #0]
  4072de:	b923      	cbnz	r3, 4072ea <strchr+0x6a>
  4072e0:	e032      	b.n	407348 <strchr+0xc8>
  4072e2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4072e6:	2b00      	cmp	r3, #0
  4072e8:	d02e      	beq.n	407348 <strchr+0xc8>
  4072ea:	429c      	cmp	r4, r3
  4072ec:	d1f9      	bne.n	4072e2 <strchr+0x62>
  4072ee:	bc70      	pop	{r4, r5, r6}
  4072f0:	4770      	bx	lr
  4072f2:	0784      	lsls	r4, r0, #30
  4072f4:	d00b      	beq.n	40730e <strchr+0x8e>
  4072f6:	7803      	ldrb	r3, [r0, #0]
  4072f8:	2b00      	cmp	r3, #0
  4072fa:	d0f8      	beq.n	4072ee <strchr+0x6e>
  4072fc:	1c43      	adds	r3, r0, #1
  4072fe:	e003      	b.n	407308 <strchr+0x88>
  407300:	7802      	ldrb	r2, [r0, #0]
  407302:	3301      	adds	r3, #1
  407304:	2a00      	cmp	r2, #0
  407306:	d0f2      	beq.n	4072ee <strchr+0x6e>
  407308:	0799      	lsls	r1, r3, #30
  40730a:	4618      	mov	r0, r3
  40730c:	d1f8      	bne.n	407300 <strchr+0x80>
  40730e:	6802      	ldr	r2, [r0, #0]
  407310:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  407314:	ea23 0302 	bic.w	r3, r3, r2
  407318:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40731c:	d108      	bne.n	407330 <strchr+0xb0>
  40731e:	f850 2f04 	ldr.w	r2, [r0, #4]!
  407322:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  407326:	ea23 0302 	bic.w	r3, r3, r2
  40732a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40732e:	d0f6      	beq.n	40731e <strchr+0x9e>
  407330:	7803      	ldrb	r3, [r0, #0]
  407332:	2b00      	cmp	r3, #0
  407334:	d0db      	beq.n	4072ee <strchr+0x6e>
  407336:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40733a:	2b00      	cmp	r3, #0
  40733c:	d1fb      	bne.n	407336 <strchr+0xb6>
  40733e:	bc70      	pop	{r4, r5, r6}
  407340:	4770      	bx	lr
  407342:	4610      	mov	r0, r2
  407344:	bc70      	pop	{r4, r5, r6}
  407346:	4770      	bx	lr
  407348:	4618      	mov	r0, r3
  40734a:	bc70      	pop	{r4, r5, r6}
  40734c:	4770      	bx	lr
  40734e:	bf00      	nop
	...

00407380 <strlen>:
  407380:	f890 f000 	pld	[r0]
  407384:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407388:	f020 0107 	bic.w	r1, r0, #7
  40738c:	f06f 0c00 	mvn.w	ip, #0
  407390:	f010 0407 	ands.w	r4, r0, #7
  407394:	f891 f020 	pld	[r1, #32]
  407398:	f040 8049 	bne.w	40742e <strlen+0xae>
  40739c:	f04f 0400 	mov.w	r4, #0
  4073a0:	f06f 0007 	mvn.w	r0, #7
  4073a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4073a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4073ac:	f100 0008 	add.w	r0, r0, #8
  4073b0:	fa82 f24c 	uadd8	r2, r2, ip
  4073b4:	faa4 f28c 	sel	r2, r4, ip
  4073b8:	fa83 f34c 	uadd8	r3, r3, ip
  4073bc:	faa2 f38c 	sel	r3, r2, ip
  4073c0:	bb4b      	cbnz	r3, 407416 <strlen+0x96>
  4073c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4073c6:	fa82 f24c 	uadd8	r2, r2, ip
  4073ca:	f100 0008 	add.w	r0, r0, #8
  4073ce:	faa4 f28c 	sel	r2, r4, ip
  4073d2:	fa83 f34c 	uadd8	r3, r3, ip
  4073d6:	faa2 f38c 	sel	r3, r2, ip
  4073da:	b9e3      	cbnz	r3, 407416 <strlen+0x96>
  4073dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4073e0:	fa82 f24c 	uadd8	r2, r2, ip
  4073e4:	f100 0008 	add.w	r0, r0, #8
  4073e8:	faa4 f28c 	sel	r2, r4, ip
  4073ec:	fa83 f34c 	uadd8	r3, r3, ip
  4073f0:	faa2 f38c 	sel	r3, r2, ip
  4073f4:	b97b      	cbnz	r3, 407416 <strlen+0x96>
  4073f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4073fa:	f101 0120 	add.w	r1, r1, #32
  4073fe:	fa82 f24c 	uadd8	r2, r2, ip
  407402:	f100 0008 	add.w	r0, r0, #8
  407406:	faa4 f28c 	sel	r2, r4, ip
  40740a:	fa83 f34c 	uadd8	r3, r3, ip
  40740e:	faa2 f38c 	sel	r3, r2, ip
  407412:	2b00      	cmp	r3, #0
  407414:	d0c6      	beq.n	4073a4 <strlen+0x24>
  407416:	2a00      	cmp	r2, #0
  407418:	bf04      	itt	eq
  40741a:	3004      	addeq	r0, #4
  40741c:	461a      	moveq	r2, r3
  40741e:	ba12      	rev	r2, r2
  407420:	fab2 f282 	clz	r2, r2
  407424:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407428:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40742c:	4770      	bx	lr
  40742e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407432:	f004 0503 	and.w	r5, r4, #3
  407436:	f1c4 0000 	rsb	r0, r4, #0
  40743a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40743e:	f014 0f04 	tst.w	r4, #4
  407442:	f891 f040 	pld	[r1, #64]	; 0x40
  407446:	fa0c f505 	lsl.w	r5, ip, r5
  40744a:	ea62 0205 	orn	r2, r2, r5
  40744e:	bf1c      	itt	ne
  407450:	ea63 0305 	ornne	r3, r3, r5
  407454:	4662      	movne	r2, ip
  407456:	f04f 0400 	mov.w	r4, #0
  40745a:	e7a9      	b.n	4073b0 <strlen+0x30>

0040745c <__ssprint_r>:
  40745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407460:	6893      	ldr	r3, [r2, #8]
  407462:	b083      	sub	sp, #12
  407464:	4690      	mov	r8, r2
  407466:	2b00      	cmp	r3, #0
  407468:	d072      	beq.n	407550 <__ssprint_r+0xf4>
  40746a:	4683      	mov	fp, r0
  40746c:	f04f 0900 	mov.w	r9, #0
  407470:	6816      	ldr	r6, [r2, #0]
  407472:	6808      	ldr	r0, [r1, #0]
  407474:	688b      	ldr	r3, [r1, #8]
  407476:	460d      	mov	r5, r1
  407478:	464c      	mov	r4, r9
  40747a:	2c00      	cmp	r4, #0
  40747c:	d045      	beq.n	40750a <__ssprint_r+0xae>
  40747e:	429c      	cmp	r4, r3
  407480:	461f      	mov	r7, r3
  407482:	469a      	mov	sl, r3
  407484:	d346      	bcc.n	407514 <__ssprint_r+0xb8>
  407486:	89ab      	ldrh	r3, [r5, #12]
  407488:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40748c:	d02d      	beq.n	4074ea <__ssprint_r+0x8e>
  40748e:	696f      	ldr	r7, [r5, #20]
  407490:	6929      	ldr	r1, [r5, #16]
  407492:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  407496:	ebc1 0a00 	rsb	sl, r1, r0
  40749a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  40749e:	1c60      	adds	r0, r4, #1
  4074a0:	107f      	asrs	r7, r7, #1
  4074a2:	4450      	add	r0, sl
  4074a4:	42b8      	cmp	r0, r7
  4074a6:	463a      	mov	r2, r7
  4074a8:	bf84      	itt	hi
  4074aa:	4607      	movhi	r7, r0
  4074ac:	463a      	movhi	r2, r7
  4074ae:	055b      	lsls	r3, r3, #21
  4074b0:	d533      	bpl.n	40751a <__ssprint_r+0xbe>
  4074b2:	4611      	mov	r1, r2
  4074b4:	4658      	mov	r0, fp
  4074b6:	f7fe ffe7 	bl	406488 <_malloc_r>
  4074ba:	2800      	cmp	r0, #0
  4074bc:	d037      	beq.n	40752e <__ssprint_r+0xd2>
  4074be:	4652      	mov	r2, sl
  4074c0:	6929      	ldr	r1, [r5, #16]
  4074c2:	9001      	str	r0, [sp, #4]
  4074c4:	f7ff fb1e 	bl	406b04 <memcpy>
  4074c8:	89aa      	ldrh	r2, [r5, #12]
  4074ca:	9b01      	ldr	r3, [sp, #4]
  4074cc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4074d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4074d4:	81aa      	strh	r2, [r5, #12]
  4074d6:	ebca 0207 	rsb	r2, sl, r7
  4074da:	eb03 000a 	add.w	r0, r3, sl
  4074de:	616f      	str	r7, [r5, #20]
  4074e0:	612b      	str	r3, [r5, #16]
  4074e2:	6028      	str	r0, [r5, #0]
  4074e4:	60aa      	str	r2, [r5, #8]
  4074e6:	4627      	mov	r7, r4
  4074e8:	46a2      	mov	sl, r4
  4074ea:	4652      	mov	r2, sl
  4074ec:	4649      	mov	r1, r9
  4074ee:	f000 f9ed 	bl	4078cc <memmove>
  4074f2:	f8d8 2008 	ldr.w	r2, [r8, #8]
  4074f6:	68ab      	ldr	r3, [r5, #8]
  4074f8:	6828      	ldr	r0, [r5, #0]
  4074fa:	1bdb      	subs	r3, r3, r7
  4074fc:	4450      	add	r0, sl
  4074fe:	1b14      	subs	r4, r2, r4
  407500:	60ab      	str	r3, [r5, #8]
  407502:	6028      	str	r0, [r5, #0]
  407504:	f8c8 4008 	str.w	r4, [r8, #8]
  407508:	b314      	cbz	r4, 407550 <__ssprint_r+0xf4>
  40750a:	f8d6 9000 	ldr.w	r9, [r6]
  40750e:	6874      	ldr	r4, [r6, #4]
  407510:	3608      	adds	r6, #8
  407512:	e7b2      	b.n	40747a <__ssprint_r+0x1e>
  407514:	4627      	mov	r7, r4
  407516:	46a2      	mov	sl, r4
  407518:	e7e7      	b.n	4074ea <__ssprint_r+0x8e>
  40751a:	4658      	mov	r0, fp
  40751c:	f000 fa3a 	bl	407994 <_realloc_r>
  407520:	4603      	mov	r3, r0
  407522:	2800      	cmp	r0, #0
  407524:	d1d7      	bne.n	4074d6 <__ssprint_r+0x7a>
  407526:	6929      	ldr	r1, [r5, #16]
  407528:	4658      	mov	r0, fp
  40752a:	f000 f8e7 	bl	4076fc <_free_r>
  40752e:	230c      	movs	r3, #12
  407530:	f8cb 3000 	str.w	r3, [fp]
  407534:	89ab      	ldrh	r3, [r5, #12]
  407536:	2200      	movs	r2, #0
  407538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40753c:	f04f 30ff 	mov.w	r0, #4294967295
  407540:	81ab      	strh	r3, [r5, #12]
  407542:	f8c8 2008 	str.w	r2, [r8, #8]
  407546:	f8c8 2004 	str.w	r2, [r8, #4]
  40754a:	b003      	add	sp, #12
  40754c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407550:	2000      	movs	r0, #0
  407552:	f8c8 0004 	str.w	r0, [r8, #4]
  407556:	b003      	add	sp, #12
  407558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040755c <__register_exitproc>:
  40755c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407560:	4c25      	ldr	r4, [pc, #148]	; (4075f8 <__register_exitproc+0x9c>)
  407562:	6825      	ldr	r5, [r4, #0]
  407564:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  407568:	4606      	mov	r6, r0
  40756a:	4688      	mov	r8, r1
  40756c:	4692      	mov	sl, r2
  40756e:	4699      	mov	r9, r3
  407570:	b3c4      	cbz	r4, 4075e4 <__register_exitproc+0x88>
  407572:	6860      	ldr	r0, [r4, #4]
  407574:	281f      	cmp	r0, #31
  407576:	dc17      	bgt.n	4075a8 <__register_exitproc+0x4c>
  407578:	1c43      	adds	r3, r0, #1
  40757a:	b176      	cbz	r6, 40759a <__register_exitproc+0x3e>
  40757c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  407580:	2201      	movs	r2, #1
  407582:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  407586:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40758a:	4082      	lsls	r2, r0
  40758c:	4311      	orrs	r1, r2
  40758e:	2e02      	cmp	r6, #2
  407590:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  407594:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  407598:	d01e      	beq.n	4075d8 <__register_exitproc+0x7c>
  40759a:	3002      	adds	r0, #2
  40759c:	6063      	str	r3, [r4, #4]
  40759e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4075a2:	2000      	movs	r0, #0
  4075a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4075a8:	4b14      	ldr	r3, [pc, #80]	; (4075fc <__register_exitproc+0xa0>)
  4075aa:	b303      	cbz	r3, 4075ee <__register_exitproc+0x92>
  4075ac:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4075b0:	f3af 8000 	nop.w
  4075b4:	4604      	mov	r4, r0
  4075b6:	b1d0      	cbz	r0, 4075ee <__register_exitproc+0x92>
  4075b8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4075bc:	2700      	movs	r7, #0
  4075be:	e880 0088 	stmia.w	r0, {r3, r7}
  4075c2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4075c6:	4638      	mov	r0, r7
  4075c8:	2301      	movs	r3, #1
  4075ca:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4075ce:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4075d2:	2e00      	cmp	r6, #0
  4075d4:	d0e1      	beq.n	40759a <__register_exitproc+0x3e>
  4075d6:	e7d1      	b.n	40757c <__register_exitproc+0x20>
  4075d8:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4075dc:	430a      	orrs	r2, r1
  4075de:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4075e2:	e7da      	b.n	40759a <__register_exitproc+0x3e>
  4075e4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4075e8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4075ec:	e7c1      	b.n	407572 <__register_exitproc+0x16>
  4075ee:	f04f 30ff 	mov.w	r0, #4294967295
  4075f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4075f6:	bf00      	nop
  4075f8:	00409398 	.word	0x00409398
  4075fc:	00000000 	.word	0x00000000

00407600 <_calloc_r>:
  407600:	b510      	push	{r4, lr}
  407602:	fb02 f101 	mul.w	r1, r2, r1
  407606:	f7fe ff3f 	bl	406488 <_malloc_r>
  40760a:	4604      	mov	r4, r0
  40760c:	b1d8      	cbz	r0, 407646 <_calloc_r+0x46>
  40760e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  407612:	f022 0203 	bic.w	r2, r2, #3
  407616:	3a04      	subs	r2, #4
  407618:	2a24      	cmp	r2, #36	; 0x24
  40761a:	d818      	bhi.n	40764e <_calloc_r+0x4e>
  40761c:	2a13      	cmp	r2, #19
  40761e:	d914      	bls.n	40764a <_calloc_r+0x4a>
  407620:	2300      	movs	r3, #0
  407622:	2a1b      	cmp	r2, #27
  407624:	6003      	str	r3, [r0, #0]
  407626:	6043      	str	r3, [r0, #4]
  407628:	d916      	bls.n	407658 <_calloc_r+0x58>
  40762a:	2a24      	cmp	r2, #36	; 0x24
  40762c:	6083      	str	r3, [r0, #8]
  40762e:	60c3      	str	r3, [r0, #12]
  407630:	bf11      	iteee	ne
  407632:	f100 0210 	addne.w	r2, r0, #16
  407636:	6103      	streq	r3, [r0, #16]
  407638:	6143      	streq	r3, [r0, #20]
  40763a:	f100 0218 	addeq.w	r2, r0, #24
  40763e:	2300      	movs	r3, #0
  407640:	6013      	str	r3, [r2, #0]
  407642:	6053      	str	r3, [r2, #4]
  407644:	6093      	str	r3, [r2, #8]
  407646:	4620      	mov	r0, r4
  407648:	bd10      	pop	{r4, pc}
  40764a:	4602      	mov	r2, r0
  40764c:	e7f7      	b.n	40763e <_calloc_r+0x3e>
  40764e:	2100      	movs	r1, #0
  407650:	f7fc f904 	bl	40385c <memset>
  407654:	4620      	mov	r0, r4
  407656:	bd10      	pop	{r4, pc}
  407658:	f100 0208 	add.w	r2, r0, #8
  40765c:	e7ef      	b.n	40763e <_calloc_r+0x3e>
  40765e:	bf00      	nop

00407660 <_malloc_trim_r>:
  407660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407662:	4f23      	ldr	r7, [pc, #140]	; (4076f0 <_malloc_trim_r+0x90>)
  407664:	460c      	mov	r4, r1
  407666:	4606      	mov	r6, r0
  407668:	f7ff fae6 	bl	406c38 <__malloc_lock>
  40766c:	68bb      	ldr	r3, [r7, #8]
  40766e:	685d      	ldr	r5, [r3, #4]
  407670:	f025 0503 	bic.w	r5, r5, #3
  407674:	1b29      	subs	r1, r5, r4
  407676:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40767a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40767e:	f021 010f 	bic.w	r1, r1, #15
  407682:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407686:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40768a:	db07      	blt.n	40769c <_malloc_trim_r+0x3c>
  40768c:	2100      	movs	r1, #0
  40768e:	4630      	mov	r0, r6
  407690:	f7ff fde4 	bl	40725c <_sbrk_r>
  407694:	68bb      	ldr	r3, [r7, #8]
  407696:	442b      	add	r3, r5
  407698:	4298      	cmp	r0, r3
  40769a:	d004      	beq.n	4076a6 <_malloc_trim_r+0x46>
  40769c:	4630      	mov	r0, r6
  40769e:	f7ff facd 	bl	406c3c <__malloc_unlock>
  4076a2:	2000      	movs	r0, #0
  4076a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4076a6:	4261      	negs	r1, r4
  4076a8:	4630      	mov	r0, r6
  4076aa:	f7ff fdd7 	bl	40725c <_sbrk_r>
  4076ae:	3001      	adds	r0, #1
  4076b0:	d00d      	beq.n	4076ce <_malloc_trim_r+0x6e>
  4076b2:	4b10      	ldr	r3, [pc, #64]	; (4076f4 <_malloc_trim_r+0x94>)
  4076b4:	68ba      	ldr	r2, [r7, #8]
  4076b6:	6819      	ldr	r1, [r3, #0]
  4076b8:	1b2d      	subs	r5, r5, r4
  4076ba:	f045 0501 	orr.w	r5, r5, #1
  4076be:	4630      	mov	r0, r6
  4076c0:	1b09      	subs	r1, r1, r4
  4076c2:	6055      	str	r5, [r2, #4]
  4076c4:	6019      	str	r1, [r3, #0]
  4076c6:	f7ff fab9 	bl	406c3c <__malloc_unlock>
  4076ca:	2001      	movs	r0, #1
  4076cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4076ce:	2100      	movs	r1, #0
  4076d0:	4630      	mov	r0, r6
  4076d2:	f7ff fdc3 	bl	40725c <_sbrk_r>
  4076d6:	68ba      	ldr	r2, [r7, #8]
  4076d8:	1a83      	subs	r3, r0, r2
  4076da:	2b0f      	cmp	r3, #15
  4076dc:	ddde      	ble.n	40769c <_malloc_trim_r+0x3c>
  4076de:	4c06      	ldr	r4, [pc, #24]	; (4076f8 <_malloc_trim_r+0x98>)
  4076e0:	4904      	ldr	r1, [pc, #16]	; (4076f4 <_malloc_trim_r+0x94>)
  4076e2:	6824      	ldr	r4, [r4, #0]
  4076e4:	f043 0301 	orr.w	r3, r3, #1
  4076e8:	1b00      	subs	r0, r0, r4
  4076ea:	6053      	str	r3, [r2, #4]
  4076ec:	6008      	str	r0, [r1, #0]
  4076ee:	e7d5      	b.n	40769c <_malloc_trim_r+0x3c>
  4076f0:	20000474 	.word	0x20000474
  4076f4:	20000948 	.word	0x20000948
  4076f8:	20000880 	.word	0x20000880

004076fc <_free_r>:
  4076fc:	2900      	cmp	r1, #0
  4076fe:	d045      	beq.n	40778c <_free_r+0x90>
  407700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407704:	460d      	mov	r5, r1
  407706:	4680      	mov	r8, r0
  407708:	f7ff fa96 	bl	406c38 <__malloc_lock>
  40770c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407710:	496a      	ldr	r1, [pc, #424]	; (4078bc <_free_r+0x1c0>)
  407712:	f027 0301 	bic.w	r3, r7, #1
  407716:	f1a5 0408 	sub.w	r4, r5, #8
  40771a:	18e2      	adds	r2, r4, r3
  40771c:	688e      	ldr	r6, [r1, #8]
  40771e:	6850      	ldr	r0, [r2, #4]
  407720:	42b2      	cmp	r2, r6
  407722:	f020 0003 	bic.w	r0, r0, #3
  407726:	d062      	beq.n	4077ee <_free_r+0xf2>
  407728:	07fe      	lsls	r6, r7, #31
  40772a:	6050      	str	r0, [r2, #4]
  40772c:	d40b      	bmi.n	407746 <_free_r+0x4a>
  40772e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407732:	1be4      	subs	r4, r4, r7
  407734:	f101 0e08 	add.w	lr, r1, #8
  407738:	68a5      	ldr	r5, [r4, #8]
  40773a:	4575      	cmp	r5, lr
  40773c:	443b      	add	r3, r7
  40773e:	d06f      	beq.n	407820 <_free_r+0x124>
  407740:	68e7      	ldr	r7, [r4, #12]
  407742:	60ef      	str	r7, [r5, #12]
  407744:	60bd      	str	r5, [r7, #8]
  407746:	1815      	adds	r5, r2, r0
  407748:	686d      	ldr	r5, [r5, #4]
  40774a:	07ed      	lsls	r5, r5, #31
  40774c:	d542      	bpl.n	4077d4 <_free_r+0xd8>
  40774e:	f043 0201 	orr.w	r2, r3, #1
  407752:	6062      	str	r2, [r4, #4]
  407754:	50e3      	str	r3, [r4, r3]
  407756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40775a:	d218      	bcs.n	40778e <_free_r+0x92>
  40775c:	08db      	lsrs	r3, r3, #3
  40775e:	1c5a      	adds	r2, r3, #1
  407760:	684d      	ldr	r5, [r1, #4]
  407762:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  407766:	60a7      	str	r7, [r4, #8]
  407768:	2001      	movs	r0, #1
  40776a:	109b      	asrs	r3, r3, #2
  40776c:	fa00 f303 	lsl.w	r3, r0, r3
  407770:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  407774:	431d      	orrs	r5, r3
  407776:	3808      	subs	r0, #8
  407778:	60e0      	str	r0, [r4, #12]
  40777a:	604d      	str	r5, [r1, #4]
  40777c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  407780:	60fc      	str	r4, [r7, #12]
  407782:	4640      	mov	r0, r8
  407784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407788:	f7ff ba58 	b.w	406c3c <__malloc_unlock>
  40778c:	4770      	bx	lr
  40778e:	0a5a      	lsrs	r2, r3, #9
  407790:	2a04      	cmp	r2, #4
  407792:	d853      	bhi.n	40783c <_free_r+0x140>
  407794:	099a      	lsrs	r2, r3, #6
  407796:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40779a:	007f      	lsls	r7, r7, #1
  40779c:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4077a0:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  4077a4:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  4077a8:	4944      	ldr	r1, [pc, #272]	; (4078bc <_free_r+0x1c0>)
  4077aa:	3808      	subs	r0, #8
  4077ac:	4290      	cmp	r0, r2
  4077ae:	d04d      	beq.n	40784c <_free_r+0x150>
  4077b0:	6851      	ldr	r1, [r2, #4]
  4077b2:	f021 0103 	bic.w	r1, r1, #3
  4077b6:	428b      	cmp	r3, r1
  4077b8:	d202      	bcs.n	4077c0 <_free_r+0xc4>
  4077ba:	6892      	ldr	r2, [r2, #8]
  4077bc:	4290      	cmp	r0, r2
  4077be:	d1f7      	bne.n	4077b0 <_free_r+0xb4>
  4077c0:	68d0      	ldr	r0, [r2, #12]
  4077c2:	60e0      	str	r0, [r4, #12]
  4077c4:	60a2      	str	r2, [r4, #8]
  4077c6:	6084      	str	r4, [r0, #8]
  4077c8:	60d4      	str	r4, [r2, #12]
  4077ca:	4640      	mov	r0, r8
  4077cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4077d0:	f7ff ba34 	b.w	406c3c <__malloc_unlock>
  4077d4:	6895      	ldr	r5, [r2, #8]
  4077d6:	4f3a      	ldr	r7, [pc, #232]	; (4078c0 <_free_r+0x1c4>)
  4077d8:	42bd      	cmp	r5, r7
  4077da:	4403      	add	r3, r0
  4077dc:	d03f      	beq.n	40785e <_free_r+0x162>
  4077de:	68d0      	ldr	r0, [r2, #12]
  4077e0:	60e8      	str	r0, [r5, #12]
  4077e2:	f043 0201 	orr.w	r2, r3, #1
  4077e6:	6085      	str	r5, [r0, #8]
  4077e8:	6062      	str	r2, [r4, #4]
  4077ea:	50e3      	str	r3, [r4, r3]
  4077ec:	e7b3      	b.n	407756 <_free_r+0x5a>
  4077ee:	07ff      	lsls	r7, r7, #31
  4077f0:	4403      	add	r3, r0
  4077f2:	d407      	bmi.n	407804 <_free_r+0x108>
  4077f4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4077f8:	1aa4      	subs	r4, r4, r2
  4077fa:	4413      	add	r3, r2
  4077fc:	68a0      	ldr	r0, [r4, #8]
  4077fe:	68e2      	ldr	r2, [r4, #12]
  407800:	60c2      	str	r2, [r0, #12]
  407802:	6090      	str	r0, [r2, #8]
  407804:	4a2f      	ldr	r2, [pc, #188]	; (4078c4 <_free_r+0x1c8>)
  407806:	6812      	ldr	r2, [r2, #0]
  407808:	f043 0001 	orr.w	r0, r3, #1
  40780c:	4293      	cmp	r3, r2
  40780e:	6060      	str	r0, [r4, #4]
  407810:	608c      	str	r4, [r1, #8]
  407812:	d3b6      	bcc.n	407782 <_free_r+0x86>
  407814:	4b2c      	ldr	r3, [pc, #176]	; (4078c8 <_free_r+0x1cc>)
  407816:	4640      	mov	r0, r8
  407818:	6819      	ldr	r1, [r3, #0]
  40781a:	f7ff ff21 	bl	407660 <_malloc_trim_r>
  40781e:	e7b0      	b.n	407782 <_free_r+0x86>
  407820:	1811      	adds	r1, r2, r0
  407822:	6849      	ldr	r1, [r1, #4]
  407824:	07c9      	lsls	r1, r1, #31
  407826:	d444      	bmi.n	4078b2 <_free_r+0x1b6>
  407828:	6891      	ldr	r1, [r2, #8]
  40782a:	68d2      	ldr	r2, [r2, #12]
  40782c:	60ca      	str	r2, [r1, #12]
  40782e:	4403      	add	r3, r0
  407830:	f043 0001 	orr.w	r0, r3, #1
  407834:	6091      	str	r1, [r2, #8]
  407836:	6060      	str	r0, [r4, #4]
  407838:	50e3      	str	r3, [r4, r3]
  40783a:	e7a2      	b.n	407782 <_free_r+0x86>
  40783c:	2a14      	cmp	r2, #20
  40783e:	d817      	bhi.n	407870 <_free_r+0x174>
  407840:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407844:	007f      	lsls	r7, r7, #1
  407846:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40784a:	e7a9      	b.n	4077a0 <_free_r+0xa4>
  40784c:	10aa      	asrs	r2, r5, #2
  40784e:	684b      	ldr	r3, [r1, #4]
  407850:	2501      	movs	r5, #1
  407852:	fa05 f202 	lsl.w	r2, r5, r2
  407856:	4313      	orrs	r3, r2
  407858:	604b      	str	r3, [r1, #4]
  40785a:	4602      	mov	r2, r0
  40785c:	e7b1      	b.n	4077c2 <_free_r+0xc6>
  40785e:	f043 0201 	orr.w	r2, r3, #1
  407862:	614c      	str	r4, [r1, #20]
  407864:	610c      	str	r4, [r1, #16]
  407866:	60e5      	str	r5, [r4, #12]
  407868:	60a5      	str	r5, [r4, #8]
  40786a:	6062      	str	r2, [r4, #4]
  40786c:	50e3      	str	r3, [r4, r3]
  40786e:	e788      	b.n	407782 <_free_r+0x86>
  407870:	2a54      	cmp	r2, #84	; 0x54
  407872:	d806      	bhi.n	407882 <_free_r+0x186>
  407874:	0b1a      	lsrs	r2, r3, #12
  407876:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40787a:	007f      	lsls	r7, r7, #1
  40787c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407880:	e78e      	b.n	4077a0 <_free_r+0xa4>
  407882:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407886:	d806      	bhi.n	407896 <_free_r+0x19a>
  407888:	0bda      	lsrs	r2, r3, #15
  40788a:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40788e:	007f      	lsls	r7, r7, #1
  407890:	f102 0577 	add.w	r5, r2, #119	; 0x77
  407894:	e784      	b.n	4077a0 <_free_r+0xa4>
  407896:	f240 5054 	movw	r0, #1364	; 0x554
  40789a:	4282      	cmp	r2, r0
  40789c:	d806      	bhi.n	4078ac <_free_r+0x1b0>
  40789e:	0c9a      	lsrs	r2, r3, #18
  4078a0:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4078a4:	007f      	lsls	r7, r7, #1
  4078a6:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4078aa:	e779      	b.n	4077a0 <_free_r+0xa4>
  4078ac:	27fe      	movs	r7, #254	; 0xfe
  4078ae:	257e      	movs	r5, #126	; 0x7e
  4078b0:	e776      	b.n	4077a0 <_free_r+0xa4>
  4078b2:	f043 0201 	orr.w	r2, r3, #1
  4078b6:	6062      	str	r2, [r4, #4]
  4078b8:	50e3      	str	r3, [r4, r3]
  4078ba:	e762      	b.n	407782 <_free_r+0x86>
  4078bc:	20000474 	.word	0x20000474
  4078c0:	2000047c 	.word	0x2000047c
  4078c4:	2000087c 	.word	0x2000087c
  4078c8:	20000944 	.word	0x20000944

004078cc <memmove>:
  4078cc:	4288      	cmp	r0, r1
  4078ce:	b5f0      	push	{r4, r5, r6, r7, lr}
  4078d0:	d90d      	bls.n	4078ee <memmove+0x22>
  4078d2:	188b      	adds	r3, r1, r2
  4078d4:	4298      	cmp	r0, r3
  4078d6:	d20a      	bcs.n	4078ee <memmove+0x22>
  4078d8:	1881      	adds	r1, r0, r2
  4078da:	2a00      	cmp	r2, #0
  4078dc:	d051      	beq.n	407982 <memmove+0xb6>
  4078de:	1a9a      	subs	r2, r3, r2
  4078e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4078e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
  4078e8:	4293      	cmp	r3, r2
  4078ea:	d1f9      	bne.n	4078e0 <memmove+0x14>
  4078ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4078ee:	2a0f      	cmp	r2, #15
  4078f0:	d948      	bls.n	407984 <memmove+0xb8>
  4078f2:	ea41 0300 	orr.w	r3, r1, r0
  4078f6:	079b      	lsls	r3, r3, #30
  4078f8:	d146      	bne.n	407988 <memmove+0xbc>
  4078fa:	f100 0410 	add.w	r4, r0, #16
  4078fe:	f101 0310 	add.w	r3, r1, #16
  407902:	4615      	mov	r5, r2
  407904:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407908:	f844 6c10 	str.w	r6, [r4, #-16]
  40790c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407910:	f844 6c0c 	str.w	r6, [r4, #-12]
  407914:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407918:	f844 6c08 	str.w	r6, [r4, #-8]
  40791c:	3d10      	subs	r5, #16
  40791e:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407922:	f844 6c04 	str.w	r6, [r4, #-4]
  407926:	2d0f      	cmp	r5, #15
  407928:	f103 0310 	add.w	r3, r3, #16
  40792c:	f104 0410 	add.w	r4, r4, #16
  407930:	d8e8      	bhi.n	407904 <memmove+0x38>
  407932:	f1a2 0310 	sub.w	r3, r2, #16
  407936:	f023 030f 	bic.w	r3, r3, #15
  40793a:	f002 0e0f 	and.w	lr, r2, #15
  40793e:	3310      	adds	r3, #16
  407940:	f1be 0f03 	cmp.w	lr, #3
  407944:	4419      	add	r1, r3
  407946:	4403      	add	r3, r0
  407948:	d921      	bls.n	40798e <memmove+0xc2>
  40794a:	1f1e      	subs	r6, r3, #4
  40794c:	460d      	mov	r5, r1
  40794e:	4674      	mov	r4, lr
  407950:	3c04      	subs	r4, #4
  407952:	f855 7b04 	ldr.w	r7, [r5], #4
  407956:	f846 7f04 	str.w	r7, [r6, #4]!
  40795a:	2c03      	cmp	r4, #3
  40795c:	d8f8      	bhi.n	407950 <memmove+0x84>
  40795e:	f1ae 0404 	sub.w	r4, lr, #4
  407962:	f024 0403 	bic.w	r4, r4, #3
  407966:	3404      	adds	r4, #4
  407968:	4423      	add	r3, r4
  40796a:	4421      	add	r1, r4
  40796c:	f002 0203 	and.w	r2, r2, #3
  407970:	b162      	cbz	r2, 40798c <memmove+0xc0>
  407972:	3b01      	subs	r3, #1
  407974:	440a      	add	r2, r1
  407976:	f811 4b01 	ldrb.w	r4, [r1], #1
  40797a:	f803 4f01 	strb.w	r4, [r3, #1]!
  40797e:	428a      	cmp	r2, r1
  407980:	d1f9      	bne.n	407976 <memmove+0xaa>
  407982:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407984:	4603      	mov	r3, r0
  407986:	e7f3      	b.n	407970 <memmove+0xa4>
  407988:	4603      	mov	r3, r0
  40798a:	e7f2      	b.n	407972 <memmove+0xa6>
  40798c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40798e:	4672      	mov	r2, lr
  407990:	e7ee      	b.n	407970 <memmove+0xa4>
  407992:	bf00      	nop

00407994 <_realloc_r>:
  407994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407998:	4617      	mov	r7, r2
  40799a:	b083      	sub	sp, #12
  40799c:	2900      	cmp	r1, #0
  40799e:	f000 80c1 	beq.w	407b24 <_realloc_r+0x190>
  4079a2:	460e      	mov	r6, r1
  4079a4:	4681      	mov	r9, r0
  4079a6:	f107 050b 	add.w	r5, r7, #11
  4079aa:	f7ff f945 	bl	406c38 <__malloc_lock>
  4079ae:	f856 ec04 	ldr.w	lr, [r6, #-4]
  4079b2:	2d16      	cmp	r5, #22
  4079b4:	f02e 0403 	bic.w	r4, lr, #3
  4079b8:	f1a6 0808 	sub.w	r8, r6, #8
  4079bc:	d840      	bhi.n	407a40 <_realloc_r+0xac>
  4079be:	2210      	movs	r2, #16
  4079c0:	4615      	mov	r5, r2
  4079c2:	42af      	cmp	r7, r5
  4079c4:	d841      	bhi.n	407a4a <_realloc_r+0xb6>
  4079c6:	4294      	cmp	r4, r2
  4079c8:	da75      	bge.n	407ab6 <_realloc_r+0x122>
  4079ca:	4bc9      	ldr	r3, [pc, #804]	; (407cf0 <_realloc_r+0x35c>)
  4079cc:	6899      	ldr	r1, [r3, #8]
  4079ce:	eb08 0004 	add.w	r0, r8, r4
  4079d2:	4288      	cmp	r0, r1
  4079d4:	6841      	ldr	r1, [r0, #4]
  4079d6:	f000 80d9 	beq.w	407b8c <_realloc_r+0x1f8>
  4079da:	f021 0301 	bic.w	r3, r1, #1
  4079de:	4403      	add	r3, r0
  4079e0:	685b      	ldr	r3, [r3, #4]
  4079e2:	07db      	lsls	r3, r3, #31
  4079e4:	d57d      	bpl.n	407ae2 <_realloc_r+0x14e>
  4079e6:	f01e 0f01 	tst.w	lr, #1
  4079ea:	d035      	beq.n	407a58 <_realloc_r+0xc4>
  4079ec:	4639      	mov	r1, r7
  4079ee:	4648      	mov	r0, r9
  4079f0:	f7fe fd4a 	bl	406488 <_malloc_r>
  4079f4:	4607      	mov	r7, r0
  4079f6:	b1e0      	cbz	r0, 407a32 <_realloc_r+0x9e>
  4079f8:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4079fc:	f023 0301 	bic.w	r3, r3, #1
  407a00:	4443      	add	r3, r8
  407a02:	f1a0 0208 	sub.w	r2, r0, #8
  407a06:	429a      	cmp	r2, r3
  407a08:	f000 8144 	beq.w	407c94 <_realloc_r+0x300>
  407a0c:	1f22      	subs	r2, r4, #4
  407a0e:	2a24      	cmp	r2, #36	; 0x24
  407a10:	f200 8131 	bhi.w	407c76 <_realloc_r+0x2e2>
  407a14:	2a13      	cmp	r2, #19
  407a16:	f200 8104 	bhi.w	407c22 <_realloc_r+0x28e>
  407a1a:	4603      	mov	r3, r0
  407a1c:	4632      	mov	r2, r6
  407a1e:	6811      	ldr	r1, [r2, #0]
  407a20:	6019      	str	r1, [r3, #0]
  407a22:	6851      	ldr	r1, [r2, #4]
  407a24:	6059      	str	r1, [r3, #4]
  407a26:	6892      	ldr	r2, [r2, #8]
  407a28:	609a      	str	r2, [r3, #8]
  407a2a:	4631      	mov	r1, r6
  407a2c:	4648      	mov	r0, r9
  407a2e:	f7ff fe65 	bl	4076fc <_free_r>
  407a32:	4648      	mov	r0, r9
  407a34:	f7ff f902 	bl	406c3c <__malloc_unlock>
  407a38:	4638      	mov	r0, r7
  407a3a:	b003      	add	sp, #12
  407a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407a40:	f025 0507 	bic.w	r5, r5, #7
  407a44:	2d00      	cmp	r5, #0
  407a46:	462a      	mov	r2, r5
  407a48:	dabb      	bge.n	4079c2 <_realloc_r+0x2e>
  407a4a:	230c      	movs	r3, #12
  407a4c:	2000      	movs	r0, #0
  407a4e:	f8c9 3000 	str.w	r3, [r9]
  407a52:	b003      	add	sp, #12
  407a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407a58:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407a5c:	ebc3 0a08 	rsb	sl, r3, r8
  407a60:	f8da 3004 	ldr.w	r3, [sl, #4]
  407a64:	f023 0c03 	bic.w	ip, r3, #3
  407a68:	eb04 030c 	add.w	r3, r4, ip
  407a6c:	4293      	cmp	r3, r2
  407a6e:	dbbd      	blt.n	4079ec <_realloc_r+0x58>
  407a70:	4657      	mov	r7, sl
  407a72:	f8da 100c 	ldr.w	r1, [sl, #12]
  407a76:	f857 0f08 	ldr.w	r0, [r7, #8]!
  407a7a:	1f22      	subs	r2, r4, #4
  407a7c:	2a24      	cmp	r2, #36	; 0x24
  407a7e:	60c1      	str	r1, [r0, #12]
  407a80:	6088      	str	r0, [r1, #8]
  407a82:	f200 8117 	bhi.w	407cb4 <_realloc_r+0x320>
  407a86:	2a13      	cmp	r2, #19
  407a88:	f240 8112 	bls.w	407cb0 <_realloc_r+0x31c>
  407a8c:	6831      	ldr	r1, [r6, #0]
  407a8e:	f8ca 1008 	str.w	r1, [sl, #8]
  407a92:	6871      	ldr	r1, [r6, #4]
  407a94:	f8ca 100c 	str.w	r1, [sl, #12]
  407a98:	2a1b      	cmp	r2, #27
  407a9a:	f200 812b 	bhi.w	407cf4 <_realloc_r+0x360>
  407a9e:	3608      	adds	r6, #8
  407aa0:	f10a 0210 	add.w	r2, sl, #16
  407aa4:	6831      	ldr	r1, [r6, #0]
  407aa6:	6011      	str	r1, [r2, #0]
  407aa8:	6871      	ldr	r1, [r6, #4]
  407aaa:	6051      	str	r1, [r2, #4]
  407aac:	68b1      	ldr	r1, [r6, #8]
  407aae:	6091      	str	r1, [r2, #8]
  407ab0:	463e      	mov	r6, r7
  407ab2:	461c      	mov	r4, r3
  407ab4:	46d0      	mov	r8, sl
  407ab6:	1b63      	subs	r3, r4, r5
  407ab8:	2b0f      	cmp	r3, #15
  407aba:	d81d      	bhi.n	407af8 <_realloc_r+0x164>
  407abc:	f8d8 3004 	ldr.w	r3, [r8, #4]
  407ac0:	f003 0301 	and.w	r3, r3, #1
  407ac4:	4323      	orrs	r3, r4
  407ac6:	4444      	add	r4, r8
  407ac8:	f8c8 3004 	str.w	r3, [r8, #4]
  407acc:	6863      	ldr	r3, [r4, #4]
  407ace:	f043 0301 	orr.w	r3, r3, #1
  407ad2:	6063      	str	r3, [r4, #4]
  407ad4:	4648      	mov	r0, r9
  407ad6:	f7ff f8b1 	bl	406c3c <__malloc_unlock>
  407ada:	4630      	mov	r0, r6
  407adc:	b003      	add	sp, #12
  407ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ae2:	f021 0103 	bic.w	r1, r1, #3
  407ae6:	4421      	add	r1, r4
  407ae8:	4291      	cmp	r1, r2
  407aea:	db21      	blt.n	407b30 <_realloc_r+0x19c>
  407aec:	68c3      	ldr	r3, [r0, #12]
  407aee:	6882      	ldr	r2, [r0, #8]
  407af0:	460c      	mov	r4, r1
  407af2:	60d3      	str	r3, [r2, #12]
  407af4:	609a      	str	r2, [r3, #8]
  407af6:	e7de      	b.n	407ab6 <_realloc_r+0x122>
  407af8:	f8d8 2004 	ldr.w	r2, [r8, #4]
  407afc:	eb08 0105 	add.w	r1, r8, r5
  407b00:	f002 0201 	and.w	r2, r2, #1
  407b04:	4315      	orrs	r5, r2
  407b06:	f043 0201 	orr.w	r2, r3, #1
  407b0a:	440b      	add	r3, r1
  407b0c:	f8c8 5004 	str.w	r5, [r8, #4]
  407b10:	604a      	str	r2, [r1, #4]
  407b12:	685a      	ldr	r2, [r3, #4]
  407b14:	f042 0201 	orr.w	r2, r2, #1
  407b18:	3108      	adds	r1, #8
  407b1a:	605a      	str	r2, [r3, #4]
  407b1c:	4648      	mov	r0, r9
  407b1e:	f7ff fded 	bl	4076fc <_free_r>
  407b22:	e7d7      	b.n	407ad4 <_realloc_r+0x140>
  407b24:	4611      	mov	r1, r2
  407b26:	b003      	add	sp, #12
  407b28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407b2c:	f7fe bcac 	b.w	406488 <_malloc_r>
  407b30:	f01e 0f01 	tst.w	lr, #1
  407b34:	f47f af5a 	bne.w	4079ec <_realloc_r+0x58>
  407b38:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407b3c:	ebc3 0a08 	rsb	sl, r3, r8
  407b40:	f8da 3004 	ldr.w	r3, [sl, #4]
  407b44:	f023 0c03 	bic.w	ip, r3, #3
  407b48:	eb01 0e0c 	add.w	lr, r1, ip
  407b4c:	4596      	cmp	lr, r2
  407b4e:	db8b      	blt.n	407a68 <_realloc_r+0xd4>
  407b50:	68c3      	ldr	r3, [r0, #12]
  407b52:	6882      	ldr	r2, [r0, #8]
  407b54:	4657      	mov	r7, sl
  407b56:	60d3      	str	r3, [r2, #12]
  407b58:	609a      	str	r2, [r3, #8]
  407b5a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  407b5e:	f8da 300c 	ldr.w	r3, [sl, #12]
  407b62:	60cb      	str	r3, [r1, #12]
  407b64:	1f22      	subs	r2, r4, #4
  407b66:	2a24      	cmp	r2, #36	; 0x24
  407b68:	6099      	str	r1, [r3, #8]
  407b6a:	f200 8099 	bhi.w	407ca0 <_realloc_r+0x30c>
  407b6e:	2a13      	cmp	r2, #19
  407b70:	d962      	bls.n	407c38 <_realloc_r+0x2a4>
  407b72:	6833      	ldr	r3, [r6, #0]
  407b74:	f8ca 3008 	str.w	r3, [sl, #8]
  407b78:	6873      	ldr	r3, [r6, #4]
  407b7a:	f8ca 300c 	str.w	r3, [sl, #12]
  407b7e:	2a1b      	cmp	r2, #27
  407b80:	f200 80a0 	bhi.w	407cc4 <_realloc_r+0x330>
  407b84:	3608      	adds	r6, #8
  407b86:	f10a 0310 	add.w	r3, sl, #16
  407b8a:	e056      	b.n	407c3a <_realloc_r+0x2a6>
  407b8c:	f021 0b03 	bic.w	fp, r1, #3
  407b90:	44a3      	add	fp, r4
  407b92:	f105 0010 	add.w	r0, r5, #16
  407b96:	4583      	cmp	fp, r0
  407b98:	da59      	bge.n	407c4e <_realloc_r+0x2ba>
  407b9a:	f01e 0f01 	tst.w	lr, #1
  407b9e:	f47f af25 	bne.w	4079ec <_realloc_r+0x58>
  407ba2:	f856 1c08 	ldr.w	r1, [r6, #-8]
  407ba6:	ebc1 0a08 	rsb	sl, r1, r8
  407baa:	f8da 1004 	ldr.w	r1, [sl, #4]
  407bae:	f021 0c03 	bic.w	ip, r1, #3
  407bb2:	44e3      	add	fp, ip
  407bb4:	4558      	cmp	r0, fp
  407bb6:	f73f af57 	bgt.w	407a68 <_realloc_r+0xd4>
  407bba:	4657      	mov	r7, sl
  407bbc:	f8da 100c 	ldr.w	r1, [sl, #12]
  407bc0:	f857 0f08 	ldr.w	r0, [r7, #8]!
  407bc4:	1f22      	subs	r2, r4, #4
  407bc6:	2a24      	cmp	r2, #36	; 0x24
  407bc8:	60c1      	str	r1, [r0, #12]
  407bca:	6088      	str	r0, [r1, #8]
  407bcc:	f200 80b4 	bhi.w	407d38 <_realloc_r+0x3a4>
  407bd0:	2a13      	cmp	r2, #19
  407bd2:	f240 80a5 	bls.w	407d20 <_realloc_r+0x38c>
  407bd6:	6831      	ldr	r1, [r6, #0]
  407bd8:	f8ca 1008 	str.w	r1, [sl, #8]
  407bdc:	6871      	ldr	r1, [r6, #4]
  407bde:	f8ca 100c 	str.w	r1, [sl, #12]
  407be2:	2a1b      	cmp	r2, #27
  407be4:	f200 80af 	bhi.w	407d46 <_realloc_r+0x3b2>
  407be8:	3608      	adds	r6, #8
  407bea:	f10a 0210 	add.w	r2, sl, #16
  407bee:	6831      	ldr	r1, [r6, #0]
  407bf0:	6011      	str	r1, [r2, #0]
  407bf2:	6871      	ldr	r1, [r6, #4]
  407bf4:	6051      	str	r1, [r2, #4]
  407bf6:	68b1      	ldr	r1, [r6, #8]
  407bf8:	6091      	str	r1, [r2, #8]
  407bfa:	eb0a 0105 	add.w	r1, sl, r5
  407bfe:	ebc5 020b 	rsb	r2, r5, fp
  407c02:	f042 0201 	orr.w	r2, r2, #1
  407c06:	6099      	str	r1, [r3, #8]
  407c08:	604a      	str	r2, [r1, #4]
  407c0a:	f8da 3004 	ldr.w	r3, [sl, #4]
  407c0e:	f003 0301 	and.w	r3, r3, #1
  407c12:	431d      	orrs	r5, r3
  407c14:	4648      	mov	r0, r9
  407c16:	f8ca 5004 	str.w	r5, [sl, #4]
  407c1a:	f7ff f80f 	bl	406c3c <__malloc_unlock>
  407c1e:	4638      	mov	r0, r7
  407c20:	e75c      	b.n	407adc <_realloc_r+0x148>
  407c22:	6833      	ldr	r3, [r6, #0]
  407c24:	6003      	str	r3, [r0, #0]
  407c26:	6873      	ldr	r3, [r6, #4]
  407c28:	6043      	str	r3, [r0, #4]
  407c2a:	2a1b      	cmp	r2, #27
  407c2c:	d827      	bhi.n	407c7e <_realloc_r+0x2ea>
  407c2e:	f100 0308 	add.w	r3, r0, #8
  407c32:	f106 0208 	add.w	r2, r6, #8
  407c36:	e6f2      	b.n	407a1e <_realloc_r+0x8a>
  407c38:	463b      	mov	r3, r7
  407c3a:	6832      	ldr	r2, [r6, #0]
  407c3c:	601a      	str	r2, [r3, #0]
  407c3e:	6872      	ldr	r2, [r6, #4]
  407c40:	605a      	str	r2, [r3, #4]
  407c42:	68b2      	ldr	r2, [r6, #8]
  407c44:	609a      	str	r2, [r3, #8]
  407c46:	463e      	mov	r6, r7
  407c48:	4674      	mov	r4, lr
  407c4a:	46d0      	mov	r8, sl
  407c4c:	e733      	b.n	407ab6 <_realloc_r+0x122>
  407c4e:	eb08 0105 	add.w	r1, r8, r5
  407c52:	ebc5 0b0b 	rsb	fp, r5, fp
  407c56:	f04b 0201 	orr.w	r2, fp, #1
  407c5a:	6099      	str	r1, [r3, #8]
  407c5c:	604a      	str	r2, [r1, #4]
  407c5e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  407c62:	f003 0301 	and.w	r3, r3, #1
  407c66:	431d      	orrs	r5, r3
  407c68:	4648      	mov	r0, r9
  407c6a:	f846 5c04 	str.w	r5, [r6, #-4]
  407c6e:	f7fe ffe5 	bl	406c3c <__malloc_unlock>
  407c72:	4630      	mov	r0, r6
  407c74:	e732      	b.n	407adc <_realloc_r+0x148>
  407c76:	4631      	mov	r1, r6
  407c78:	f7ff fe28 	bl	4078cc <memmove>
  407c7c:	e6d5      	b.n	407a2a <_realloc_r+0x96>
  407c7e:	68b3      	ldr	r3, [r6, #8]
  407c80:	6083      	str	r3, [r0, #8]
  407c82:	68f3      	ldr	r3, [r6, #12]
  407c84:	60c3      	str	r3, [r0, #12]
  407c86:	2a24      	cmp	r2, #36	; 0x24
  407c88:	d028      	beq.n	407cdc <_realloc_r+0x348>
  407c8a:	f100 0310 	add.w	r3, r0, #16
  407c8e:	f106 0210 	add.w	r2, r6, #16
  407c92:	e6c4      	b.n	407a1e <_realloc_r+0x8a>
  407c94:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407c98:	f023 0303 	bic.w	r3, r3, #3
  407c9c:	441c      	add	r4, r3
  407c9e:	e70a      	b.n	407ab6 <_realloc_r+0x122>
  407ca0:	4631      	mov	r1, r6
  407ca2:	4638      	mov	r0, r7
  407ca4:	4674      	mov	r4, lr
  407ca6:	46d0      	mov	r8, sl
  407ca8:	f7ff fe10 	bl	4078cc <memmove>
  407cac:	463e      	mov	r6, r7
  407cae:	e702      	b.n	407ab6 <_realloc_r+0x122>
  407cb0:	463a      	mov	r2, r7
  407cb2:	e6f7      	b.n	407aa4 <_realloc_r+0x110>
  407cb4:	4631      	mov	r1, r6
  407cb6:	4638      	mov	r0, r7
  407cb8:	461c      	mov	r4, r3
  407cba:	46d0      	mov	r8, sl
  407cbc:	f7ff fe06 	bl	4078cc <memmove>
  407cc0:	463e      	mov	r6, r7
  407cc2:	e6f8      	b.n	407ab6 <_realloc_r+0x122>
  407cc4:	68b3      	ldr	r3, [r6, #8]
  407cc6:	f8ca 3010 	str.w	r3, [sl, #16]
  407cca:	68f3      	ldr	r3, [r6, #12]
  407ccc:	f8ca 3014 	str.w	r3, [sl, #20]
  407cd0:	2a24      	cmp	r2, #36	; 0x24
  407cd2:	d01b      	beq.n	407d0c <_realloc_r+0x378>
  407cd4:	3610      	adds	r6, #16
  407cd6:	f10a 0318 	add.w	r3, sl, #24
  407cda:	e7ae      	b.n	407c3a <_realloc_r+0x2a6>
  407cdc:	6933      	ldr	r3, [r6, #16]
  407cde:	6103      	str	r3, [r0, #16]
  407ce0:	6973      	ldr	r3, [r6, #20]
  407ce2:	6143      	str	r3, [r0, #20]
  407ce4:	f106 0218 	add.w	r2, r6, #24
  407ce8:	f100 0318 	add.w	r3, r0, #24
  407cec:	e697      	b.n	407a1e <_realloc_r+0x8a>
  407cee:	bf00      	nop
  407cf0:	20000474 	.word	0x20000474
  407cf4:	68b1      	ldr	r1, [r6, #8]
  407cf6:	f8ca 1010 	str.w	r1, [sl, #16]
  407cfa:	68f1      	ldr	r1, [r6, #12]
  407cfc:	f8ca 1014 	str.w	r1, [sl, #20]
  407d00:	2a24      	cmp	r2, #36	; 0x24
  407d02:	d00f      	beq.n	407d24 <_realloc_r+0x390>
  407d04:	3610      	adds	r6, #16
  407d06:	f10a 0218 	add.w	r2, sl, #24
  407d0a:	e6cb      	b.n	407aa4 <_realloc_r+0x110>
  407d0c:	6933      	ldr	r3, [r6, #16]
  407d0e:	f8ca 3018 	str.w	r3, [sl, #24]
  407d12:	6973      	ldr	r3, [r6, #20]
  407d14:	f8ca 301c 	str.w	r3, [sl, #28]
  407d18:	3618      	adds	r6, #24
  407d1a:	f10a 0320 	add.w	r3, sl, #32
  407d1e:	e78c      	b.n	407c3a <_realloc_r+0x2a6>
  407d20:	463a      	mov	r2, r7
  407d22:	e764      	b.n	407bee <_realloc_r+0x25a>
  407d24:	6932      	ldr	r2, [r6, #16]
  407d26:	f8ca 2018 	str.w	r2, [sl, #24]
  407d2a:	6972      	ldr	r2, [r6, #20]
  407d2c:	f8ca 201c 	str.w	r2, [sl, #28]
  407d30:	3618      	adds	r6, #24
  407d32:	f10a 0220 	add.w	r2, sl, #32
  407d36:	e6b5      	b.n	407aa4 <_realloc_r+0x110>
  407d38:	4631      	mov	r1, r6
  407d3a:	4638      	mov	r0, r7
  407d3c:	9301      	str	r3, [sp, #4]
  407d3e:	f7ff fdc5 	bl	4078cc <memmove>
  407d42:	9b01      	ldr	r3, [sp, #4]
  407d44:	e759      	b.n	407bfa <_realloc_r+0x266>
  407d46:	68b1      	ldr	r1, [r6, #8]
  407d48:	f8ca 1010 	str.w	r1, [sl, #16]
  407d4c:	68f1      	ldr	r1, [r6, #12]
  407d4e:	f8ca 1014 	str.w	r1, [sl, #20]
  407d52:	2a24      	cmp	r2, #36	; 0x24
  407d54:	d003      	beq.n	407d5e <_realloc_r+0x3ca>
  407d56:	3610      	adds	r6, #16
  407d58:	f10a 0218 	add.w	r2, sl, #24
  407d5c:	e747      	b.n	407bee <_realloc_r+0x25a>
  407d5e:	6932      	ldr	r2, [r6, #16]
  407d60:	f8ca 2018 	str.w	r2, [sl, #24]
  407d64:	6972      	ldr	r2, [r6, #20]
  407d66:	f8ca 201c 	str.w	r2, [sl, #28]
  407d6a:	3618      	adds	r6, #24
  407d6c:	f10a 0220 	add.w	r2, sl, #32
  407d70:	e73d      	b.n	407bee <_realloc_r+0x25a>
  407d72:	bf00      	nop

00407d74 <__aeabi_drsub>:
  407d74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407d78:	e002      	b.n	407d80 <__adddf3>
  407d7a:	bf00      	nop

00407d7c <__aeabi_dsub>:
  407d7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407d80 <__adddf3>:
  407d80:	b530      	push	{r4, r5, lr}
  407d82:	ea4f 0441 	mov.w	r4, r1, lsl #1
  407d86:	ea4f 0543 	mov.w	r5, r3, lsl #1
  407d8a:	ea94 0f05 	teq	r4, r5
  407d8e:	bf08      	it	eq
  407d90:	ea90 0f02 	teqeq	r0, r2
  407d94:	bf1f      	itttt	ne
  407d96:	ea54 0c00 	orrsne.w	ip, r4, r0
  407d9a:	ea55 0c02 	orrsne.w	ip, r5, r2
  407d9e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  407da2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407da6:	f000 80e2 	beq.w	407f6e <__adddf3+0x1ee>
  407daa:	ea4f 5454 	mov.w	r4, r4, lsr #21
  407dae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  407db2:	bfb8      	it	lt
  407db4:	426d      	neglt	r5, r5
  407db6:	dd0c      	ble.n	407dd2 <__adddf3+0x52>
  407db8:	442c      	add	r4, r5
  407dba:	ea80 0202 	eor.w	r2, r0, r2
  407dbe:	ea81 0303 	eor.w	r3, r1, r3
  407dc2:	ea82 0000 	eor.w	r0, r2, r0
  407dc6:	ea83 0101 	eor.w	r1, r3, r1
  407dca:	ea80 0202 	eor.w	r2, r0, r2
  407dce:	ea81 0303 	eor.w	r3, r1, r3
  407dd2:	2d36      	cmp	r5, #54	; 0x36
  407dd4:	bf88      	it	hi
  407dd6:	bd30      	pophi	{r4, r5, pc}
  407dd8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407ddc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407de0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  407de4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  407de8:	d002      	beq.n	407df0 <__adddf3+0x70>
  407dea:	4240      	negs	r0, r0
  407dec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407df0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  407df4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407df8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  407dfc:	d002      	beq.n	407e04 <__adddf3+0x84>
  407dfe:	4252      	negs	r2, r2
  407e00:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407e04:	ea94 0f05 	teq	r4, r5
  407e08:	f000 80a7 	beq.w	407f5a <__adddf3+0x1da>
  407e0c:	f1a4 0401 	sub.w	r4, r4, #1
  407e10:	f1d5 0e20 	rsbs	lr, r5, #32
  407e14:	db0d      	blt.n	407e32 <__adddf3+0xb2>
  407e16:	fa02 fc0e 	lsl.w	ip, r2, lr
  407e1a:	fa22 f205 	lsr.w	r2, r2, r5
  407e1e:	1880      	adds	r0, r0, r2
  407e20:	f141 0100 	adc.w	r1, r1, #0
  407e24:	fa03 f20e 	lsl.w	r2, r3, lr
  407e28:	1880      	adds	r0, r0, r2
  407e2a:	fa43 f305 	asr.w	r3, r3, r5
  407e2e:	4159      	adcs	r1, r3
  407e30:	e00e      	b.n	407e50 <__adddf3+0xd0>
  407e32:	f1a5 0520 	sub.w	r5, r5, #32
  407e36:	f10e 0e20 	add.w	lr, lr, #32
  407e3a:	2a01      	cmp	r2, #1
  407e3c:	fa03 fc0e 	lsl.w	ip, r3, lr
  407e40:	bf28      	it	cs
  407e42:	f04c 0c02 	orrcs.w	ip, ip, #2
  407e46:	fa43 f305 	asr.w	r3, r3, r5
  407e4a:	18c0      	adds	r0, r0, r3
  407e4c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407e50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407e54:	d507      	bpl.n	407e66 <__adddf3+0xe6>
  407e56:	f04f 0e00 	mov.w	lr, #0
  407e5a:	f1dc 0c00 	rsbs	ip, ip, #0
  407e5e:	eb7e 0000 	sbcs.w	r0, lr, r0
  407e62:	eb6e 0101 	sbc.w	r1, lr, r1
  407e66:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407e6a:	d31b      	bcc.n	407ea4 <__adddf3+0x124>
  407e6c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407e70:	d30c      	bcc.n	407e8c <__adddf3+0x10c>
  407e72:	0849      	lsrs	r1, r1, #1
  407e74:	ea5f 0030 	movs.w	r0, r0, rrx
  407e78:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407e7c:	f104 0401 	add.w	r4, r4, #1
  407e80:	ea4f 5244 	mov.w	r2, r4, lsl #21
  407e84:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407e88:	f080 809a 	bcs.w	407fc0 <__adddf3+0x240>
  407e8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407e90:	bf08      	it	eq
  407e92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407e96:	f150 0000 	adcs.w	r0, r0, #0
  407e9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407e9e:	ea41 0105 	orr.w	r1, r1, r5
  407ea2:	bd30      	pop	{r4, r5, pc}
  407ea4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407ea8:	4140      	adcs	r0, r0
  407eaa:	eb41 0101 	adc.w	r1, r1, r1
  407eae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407eb2:	f1a4 0401 	sub.w	r4, r4, #1
  407eb6:	d1e9      	bne.n	407e8c <__adddf3+0x10c>
  407eb8:	f091 0f00 	teq	r1, #0
  407ebc:	bf04      	itt	eq
  407ebe:	4601      	moveq	r1, r0
  407ec0:	2000      	moveq	r0, #0
  407ec2:	fab1 f381 	clz	r3, r1
  407ec6:	bf08      	it	eq
  407ec8:	3320      	addeq	r3, #32
  407eca:	f1a3 030b 	sub.w	r3, r3, #11
  407ece:	f1b3 0220 	subs.w	r2, r3, #32
  407ed2:	da0c      	bge.n	407eee <__adddf3+0x16e>
  407ed4:	320c      	adds	r2, #12
  407ed6:	dd08      	ble.n	407eea <__adddf3+0x16a>
  407ed8:	f102 0c14 	add.w	ip, r2, #20
  407edc:	f1c2 020c 	rsb	r2, r2, #12
  407ee0:	fa01 f00c 	lsl.w	r0, r1, ip
  407ee4:	fa21 f102 	lsr.w	r1, r1, r2
  407ee8:	e00c      	b.n	407f04 <__adddf3+0x184>
  407eea:	f102 0214 	add.w	r2, r2, #20
  407eee:	bfd8      	it	le
  407ef0:	f1c2 0c20 	rsble	ip, r2, #32
  407ef4:	fa01 f102 	lsl.w	r1, r1, r2
  407ef8:	fa20 fc0c 	lsr.w	ip, r0, ip
  407efc:	bfdc      	itt	le
  407efe:	ea41 010c 	orrle.w	r1, r1, ip
  407f02:	4090      	lslle	r0, r2
  407f04:	1ae4      	subs	r4, r4, r3
  407f06:	bfa2      	ittt	ge
  407f08:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407f0c:	4329      	orrge	r1, r5
  407f0e:	bd30      	popge	{r4, r5, pc}
  407f10:	ea6f 0404 	mvn.w	r4, r4
  407f14:	3c1f      	subs	r4, #31
  407f16:	da1c      	bge.n	407f52 <__adddf3+0x1d2>
  407f18:	340c      	adds	r4, #12
  407f1a:	dc0e      	bgt.n	407f3a <__adddf3+0x1ba>
  407f1c:	f104 0414 	add.w	r4, r4, #20
  407f20:	f1c4 0220 	rsb	r2, r4, #32
  407f24:	fa20 f004 	lsr.w	r0, r0, r4
  407f28:	fa01 f302 	lsl.w	r3, r1, r2
  407f2c:	ea40 0003 	orr.w	r0, r0, r3
  407f30:	fa21 f304 	lsr.w	r3, r1, r4
  407f34:	ea45 0103 	orr.w	r1, r5, r3
  407f38:	bd30      	pop	{r4, r5, pc}
  407f3a:	f1c4 040c 	rsb	r4, r4, #12
  407f3e:	f1c4 0220 	rsb	r2, r4, #32
  407f42:	fa20 f002 	lsr.w	r0, r0, r2
  407f46:	fa01 f304 	lsl.w	r3, r1, r4
  407f4a:	ea40 0003 	orr.w	r0, r0, r3
  407f4e:	4629      	mov	r1, r5
  407f50:	bd30      	pop	{r4, r5, pc}
  407f52:	fa21 f004 	lsr.w	r0, r1, r4
  407f56:	4629      	mov	r1, r5
  407f58:	bd30      	pop	{r4, r5, pc}
  407f5a:	f094 0f00 	teq	r4, #0
  407f5e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  407f62:	bf06      	itte	eq
  407f64:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407f68:	3401      	addeq	r4, #1
  407f6a:	3d01      	subne	r5, #1
  407f6c:	e74e      	b.n	407e0c <__adddf3+0x8c>
  407f6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407f72:	bf18      	it	ne
  407f74:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407f78:	d029      	beq.n	407fce <__adddf3+0x24e>
  407f7a:	ea94 0f05 	teq	r4, r5
  407f7e:	bf08      	it	eq
  407f80:	ea90 0f02 	teqeq	r0, r2
  407f84:	d005      	beq.n	407f92 <__adddf3+0x212>
  407f86:	ea54 0c00 	orrs.w	ip, r4, r0
  407f8a:	bf04      	itt	eq
  407f8c:	4619      	moveq	r1, r3
  407f8e:	4610      	moveq	r0, r2
  407f90:	bd30      	pop	{r4, r5, pc}
  407f92:	ea91 0f03 	teq	r1, r3
  407f96:	bf1e      	ittt	ne
  407f98:	2100      	movne	r1, #0
  407f9a:	2000      	movne	r0, #0
  407f9c:	bd30      	popne	{r4, r5, pc}
  407f9e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  407fa2:	d105      	bne.n	407fb0 <__adddf3+0x230>
  407fa4:	0040      	lsls	r0, r0, #1
  407fa6:	4149      	adcs	r1, r1
  407fa8:	bf28      	it	cs
  407faa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  407fae:	bd30      	pop	{r4, r5, pc}
  407fb0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  407fb4:	bf3c      	itt	cc
  407fb6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  407fba:	bd30      	popcc	{r4, r5, pc}
  407fbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407fc0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  407fc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407fc8:	f04f 0000 	mov.w	r0, #0
  407fcc:	bd30      	pop	{r4, r5, pc}
  407fce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407fd2:	bf1a      	itte	ne
  407fd4:	4619      	movne	r1, r3
  407fd6:	4610      	movne	r0, r2
  407fd8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407fdc:	bf1c      	itt	ne
  407fde:	460b      	movne	r3, r1
  407fe0:	4602      	movne	r2, r0
  407fe2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407fe6:	bf06      	itte	eq
  407fe8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  407fec:	ea91 0f03 	teqeq	r1, r3
  407ff0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407ff4:	bd30      	pop	{r4, r5, pc}
  407ff6:	bf00      	nop

00407ff8 <__aeabi_ui2d>:
  407ff8:	f090 0f00 	teq	r0, #0
  407ffc:	bf04      	itt	eq
  407ffe:	2100      	moveq	r1, #0
  408000:	4770      	bxeq	lr
  408002:	b530      	push	{r4, r5, lr}
  408004:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408008:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40800c:	f04f 0500 	mov.w	r5, #0
  408010:	f04f 0100 	mov.w	r1, #0
  408014:	e750      	b.n	407eb8 <__adddf3+0x138>
  408016:	bf00      	nop

00408018 <__aeabi_i2d>:
  408018:	f090 0f00 	teq	r0, #0
  40801c:	bf04      	itt	eq
  40801e:	2100      	moveq	r1, #0
  408020:	4770      	bxeq	lr
  408022:	b530      	push	{r4, r5, lr}
  408024:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408028:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40802c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  408030:	bf48      	it	mi
  408032:	4240      	negmi	r0, r0
  408034:	f04f 0100 	mov.w	r1, #0
  408038:	e73e      	b.n	407eb8 <__adddf3+0x138>
  40803a:	bf00      	nop

0040803c <__aeabi_f2d>:
  40803c:	0042      	lsls	r2, r0, #1
  40803e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  408042:	ea4f 0131 	mov.w	r1, r1, rrx
  408046:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40804a:	bf1f      	itttt	ne
  40804c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  408050:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408054:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  408058:	4770      	bxne	lr
  40805a:	f092 0f00 	teq	r2, #0
  40805e:	bf14      	ite	ne
  408060:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408064:	4770      	bxeq	lr
  408066:	b530      	push	{r4, r5, lr}
  408068:	f44f 7460 	mov.w	r4, #896	; 0x380
  40806c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408070:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408074:	e720      	b.n	407eb8 <__adddf3+0x138>
  408076:	bf00      	nop

00408078 <__aeabi_ul2d>:
  408078:	ea50 0201 	orrs.w	r2, r0, r1
  40807c:	bf08      	it	eq
  40807e:	4770      	bxeq	lr
  408080:	b530      	push	{r4, r5, lr}
  408082:	f04f 0500 	mov.w	r5, #0
  408086:	e00a      	b.n	40809e <__aeabi_l2d+0x16>

00408088 <__aeabi_l2d>:
  408088:	ea50 0201 	orrs.w	r2, r0, r1
  40808c:	bf08      	it	eq
  40808e:	4770      	bxeq	lr
  408090:	b530      	push	{r4, r5, lr}
  408092:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  408096:	d502      	bpl.n	40809e <__aeabi_l2d+0x16>
  408098:	4240      	negs	r0, r0
  40809a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40809e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4080a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4080a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4080aa:	f43f aedc 	beq.w	407e66 <__adddf3+0xe6>
  4080ae:	f04f 0203 	mov.w	r2, #3
  4080b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4080b6:	bf18      	it	ne
  4080b8:	3203      	addne	r2, #3
  4080ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4080be:	bf18      	it	ne
  4080c0:	3203      	addne	r2, #3
  4080c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4080c6:	f1c2 0320 	rsb	r3, r2, #32
  4080ca:	fa00 fc03 	lsl.w	ip, r0, r3
  4080ce:	fa20 f002 	lsr.w	r0, r0, r2
  4080d2:	fa01 fe03 	lsl.w	lr, r1, r3
  4080d6:	ea40 000e 	orr.w	r0, r0, lr
  4080da:	fa21 f102 	lsr.w	r1, r1, r2
  4080de:	4414      	add	r4, r2
  4080e0:	e6c1      	b.n	407e66 <__adddf3+0xe6>
  4080e2:	bf00      	nop

004080e4 <__aeabi_dmul>:
  4080e4:	b570      	push	{r4, r5, r6, lr}
  4080e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4080ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4080ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4080f2:	bf1d      	ittte	ne
  4080f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4080f8:	ea94 0f0c 	teqne	r4, ip
  4080fc:	ea95 0f0c 	teqne	r5, ip
  408100:	f000 f8de 	bleq	4082c0 <__aeabi_dmul+0x1dc>
  408104:	442c      	add	r4, r5
  408106:	ea81 0603 	eor.w	r6, r1, r3
  40810a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40810e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  408112:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  408116:	bf18      	it	ne
  408118:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40811c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  408124:	d038      	beq.n	408198 <__aeabi_dmul+0xb4>
  408126:	fba0 ce02 	umull	ip, lr, r0, r2
  40812a:	f04f 0500 	mov.w	r5, #0
  40812e:	fbe1 e502 	umlal	lr, r5, r1, r2
  408132:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  408136:	fbe0 e503 	umlal	lr, r5, r0, r3
  40813a:	f04f 0600 	mov.w	r6, #0
  40813e:	fbe1 5603 	umlal	r5, r6, r1, r3
  408142:	f09c 0f00 	teq	ip, #0
  408146:	bf18      	it	ne
  408148:	f04e 0e01 	orrne.w	lr, lr, #1
  40814c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  408150:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  408154:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  408158:	d204      	bcs.n	408164 <__aeabi_dmul+0x80>
  40815a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40815e:	416d      	adcs	r5, r5
  408160:	eb46 0606 	adc.w	r6, r6, r6
  408164:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  408168:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40816c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  408170:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  408174:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  408178:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40817c:	bf88      	it	hi
  40817e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408182:	d81e      	bhi.n	4081c2 <__aeabi_dmul+0xde>
  408184:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  408188:	bf08      	it	eq
  40818a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40818e:	f150 0000 	adcs.w	r0, r0, #0
  408192:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408196:	bd70      	pop	{r4, r5, r6, pc}
  408198:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40819c:	ea46 0101 	orr.w	r1, r6, r1
  4081a0:	ea40 0002 	orr.w	r0, r0, r2
  4081a4:	ea81 0103 	eor.w	r1, r1, r3
  4081a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4081ac:	bfc2      	ittt	gt
  4081ae:	ebd4 050c 	rsbsgt	r5, r4, ip
  4081b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4081b6:	bd70      	popgt	{r4, r5, r6, pc}
  4081b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4081bc:	f04f 0e00 	mov.w	lr, #0
  4081c0:	3c01      	subs	r4, #1
  4081c2:	f300 80ab 	bgt.w	40831c <__aeabi_dmul+0x238>
  4081c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4081ca:	bfde      	ittt	le
  4081cc:	2000      	movle	r0, #0
  4081ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4081d2:	bd70      	pople	{r4, r5, r6, pc}
  4081d4:	f1c4 0400 	rsb	r4, r4, #0
  4081d8:	3c20      	subs	r4, #32
  4081da:	da35      	bge.n	408248 <__aeabi_dmul+0x164>
  4081dc:	340c      	adds	r4, #12
  4081de:	dc1b      	bgt.n	408218 <__aeabi_dmul+0x134>
  4081e0:	f104 0414 	add.w	r4, r4, #20
  4081e4:	f1c4 0520 	rsb	r5, r4, #32
  4081e8:	fa00 f305 	lsl.w	r3, r0, r5
  4081ec:	fa20 f004 	lsr.w	r0, r0, r4
  4081f0:	fa01 f205 	lsl.w	r2, r1, r5
  4081f4:	ea40 0002 	orr.w	r0, r0, r2
  4081f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4081fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408200:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408204:	fa21 f604 	lsr.w	r6, r1, r4
  408208:	eb42 0106 	adc.w	r1, r2, r6
  40820c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408210:	bf08      	it	eq
  408212:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408216:	bd70      	pop	{r4, r5, r6, pc}
  408218:	f1c4 040c 	rsb	r4, r4, #12
  40821c:	f1c4 0520 	rsb	r5, r4, #32
  408220:	fa00 f304 	lsl.w	r3, r0, r4
  408224:	fa20 f005 	lsr.w	r0, r0, r5
  408228:	fa01 f204 	lsl.w	r2, r1, r4
  40822c:	ea40 0002 	orr.w	r0, r0, r2
  408230:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408234:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408238:	f141 0100 	adc.w	r1, r1, #0
  40823c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408240:	bf08      	it	eq
  408242:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408246:	bd70      	pop	{r4, r5, r6, pc}
  408248:	f1c4 0520 	rsb	r5, r4, #32
  40824c:	fa00 f205 	lsl.w	r2, r0, r5
  408250:	ea4e 0e02 	orr.w	lr, lr, r2
  408254:	fa20 f304 	lsr.w	r3, r0, r4
  408258:	fa01 f205 	lsl.w	r2, r1, r5
  40825c:	ea43 0302 	orr.w	r3, r3, r2
  408260:	fa21 f004 	lsr.w	r0, r1, r4
  408264:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408268:	fa21 f204 	lsr.w	r2, r1, r4
  40826c:	ea20 0002 	bic.w	r0, r0, r2
  408270:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  408274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408278:	bf08      	it	eq
  40827a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40827e:	bd70      	pop	{r4, r5, r6, pc}
  408280:	f094 0f00 	teq	r4, #0
  408284:	d10f      	bne.n	4082a6 <__aeabi_dmul+0x1c2>
  408286:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40828a:	0040      	lsls	r0, r0, #1
  40828c:	eb41 0101 	adc.w	r1, r1, r1
  408290:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408294:	bf08      	it	eq
  408296:	3c01      	subeq	r4, #1
  408298:	d0f7      	beq.n	40828a <__aeabi_dmul+0x1a6>
  40829a:	ea41 0106 	orr.w	r1, r1, r6
  40829e:	f095 0f00 	teq	r5, #0
  4082a2:	bf18      	it	ne
  4082a4:	4770      	bxne	lr
  4082a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4082aa:	0052      	lsls	r2, r2, #1
  4082ac:	eb43 0303 	adc.w	r3, r3, r3
  4082b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4082b4:	bf08      	it	eq
  4082b6:	3d01      	subeq	r5, #1
  4082b8:	d0f7      	beq.n	4082aa <__aeabi_dmul+0x1c6>
  4082ba:	ea43 0306 	orr.w	r3, r3, r6
  4082be:	4770      	bx	lr
  4082c0:	ea94 0f0c 	teq	r4, ip
  4082c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4082c8:	bf18      	it	ne
  4082ca:	ea95 0f0c 	teqne	r5, ip
  4082ce:	d00c      	beq.n	4082ea <__aeabi_dmul+0x206>
  4082d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4082d4:	bf18      	it	ne
  4082d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4082da:	d1d1      	bne.n	408280 <__aeabi_dmul+0x19c>
  4082dc:	ea81 0103 	eor.w	r1, r1, r3
  4082e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4082e4:	f04f 0000 	mov.w	r0, #0
  4082e8:	bd70      	pop	{r4, r5, r6, pc}
  4082ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4082ee:	bf06      	itte	eq
  4082f0:	4610      	moveq	r0, r2
  4082f2:	4619      	moveq	r1, r3
  4082f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4082f8:	d019      	beq.n	40832e <__aeabi_dmul+0x24a>
  4082fa:	ea94 0f0c 	teq	r4, ip
  4082fe:	d102      	bne.n	408306 <__aeabi_dmul+0x222>
  408300:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  408304:	d113      	bne.n	40832e <__aeabi_dmul+0x24a>
  408306:	ea95 0f0c 	teq	r5, ip
  40830a:	d105      	bne.n	408318 <__aeabi_dmul+0x234>
  40830c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  408310:	bf1c      	itt	ne
  408312:	4610      	movne	r0, r2
  408314:	4619      	movne	r1, r3
  408316:	d10a      	bne.n	40832e <__aeabi_dmul+0x24a>
  408318:	ea81 0103 	eor.w	r1, r1, r3
  40831c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408320:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408324:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408328:	f04f 0000 	mov.w	r0, #0
  40832c:	bd70      	pop	{r4, r5, r6, pc}
  40832e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408332:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  408336:	bd70      	pop	{r4, r5, r6, pc}

00408338 <__aeabi_ddiv>:
  408338:	b570      	push	{r4, r5, r6, lr}
  40833a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40833e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408342:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408346:	bf1d      	ittte	ne
  408348:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40834c:	ea94 0f0c 	teqne	r4, ip
  408350:	ea95 0f0c 	teqne	r5, ip
  408354:	f000 f8a7 	bleq	4084a6 <__aeabi_ddiv+0x16e>
  408358:	eba4 0405 	sub.w	r4, r4, r5
  40835c:	ea81 0e03 	eor.w	lr, r1, r3
  408360:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408364:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408368:	f000 8088 	beq.w	40847c <__aeabi_ddiv+0x144>
  40836c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408370:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408374:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408378:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40837c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408380:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408384:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408388:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40838c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408390:	429d      	cmp	r5, r3
  408392:	bf08      	it	eq
  408394:	4296      	cmpeq	r6, r2
  408396:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40839a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40839e:	d202      	bcs.n	4083a6 <__aeabi_ddiv+0x6e>
  4083a0:	085b      	lsrs	r3, r3, #1
  4083a2:	ea4f 0232 	mov.w	r2, r2, rrx
  4083a6:	1ab6      	subs	r6, r6, r2
  4083a8:	eb65 0503 	sbc.w	r5, r5, r3
  4083ac:	085b      	lsrs	r3, r3, #1
  4083ae:	ea4f 0232 	mov.w	r2, r2, rrx
  4083b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4083b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4083ba:	ebb6 0e02 	subs.w	lr, r6, r2
  4083be:	eb75 0e03 	sbcs.w	lr, r5, r3
  4083c2:	bf22      	ittt	cs
  4083c4:	1ab6      	subcs	r6, r6, r2
  4083c6:	4675      	movcs	r5, lr
  4083c8:	ea40 000c 	orrcs.w	r0, r0, ip
  4083cc:	085b      	lsrs	r3, r3, #1
  4083ce:	ea4f 0232 	mov.w	r2, r2, rrx
  4083d2:	ebb6 0e02 	subs.w	lr, r6, r2
  4083d6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4083da:	bf22      	ittt	cs
  4083dc:	1ab6      	subcs	r6, r6, r2
  4083de:	4675      	movcs	r5, lr
  4083e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4083e4:	085b      	lsrs	r3, r3, #1
  4083e6:	ea4f 0232 	mov.w	r2, r2, rrx
  4083ea:	ebb6 0e02 	subs.w	lr, r6, r2
  4083ee:	eb75 0e03 	sbcs.w	lr, r5, r3
  4083f2:	bf22      	ittt	cs
  4083f4:	1ab6      	subcs	r6, r6, r2
  4083f6:	4675      	movcs	r5, lr
  4083f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4083fc:	085b      	lsrs	r3, r3, #1
  4083fe:	ea4f 0232 	mov.w	r2, r2, rrx
  408402:	ebb6 0e02 	subs.w	lr, r6, r2
  408406:	eb75 0e03 	sbcs.w	lr, r5, r3
  40840a:	bf22      	ittt	cs
  40840c:	1ab6      	subcs	r6, r6, r2
  40840e:	4675      	movcs	r5, lr
  408410:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  408414:	ea55 0e06 	orrs.w	lr, r5, r6
  408418:	d018      	beq.n	40844c <__aeabi_ddiv+0x114>
  40841a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40841e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  408422:	ea4f 1606 	mov.w	r6, r6, lsl #4
  408426:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40842a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40842e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408432:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408436:	d1c0      	bne.n	4083ba <__aeabi_ddiv+0x82>
  408438:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40843c:	d10b      	bne.n	408456 <__aeabi_ddiv+0x11e>
  40843e:	ea41 0100 	orr.w	r1, r1, r0
  408442:	f04f 0000 	mov.w	r0, #0
  408446:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40844a:	e7b6      	b.n	4083ba <__aeabi_ddiv+0x82>
  40844c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408450:	bf04      	itt	eq
  408452:	4301      	orreq	r1, r0
  408454:	2000      	moveq	r0, #0
  408456:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40845a:	bf88      	it	hi
  40845c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408460:	f63f aeaf 	bhi.w	4081c2 <__aeabi_dmul+0xde>
  408464:	ebb5 0c03 	subs.w	ip, r5, r3
  408468:	bf04      	itt	eq
  40846a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40846e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408472:	f150 0000 	adcs.w	r0, r0, #0
  408476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40847a:	bd70      	pop	{r4, r5, r6, pc}
  40847c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408480:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408484:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408488:	bfc2      	ittt	gt
  40848a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40848e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408492:	bd70      	popgt	{r4, r5, r6, pc}
  408494:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408498:	f04f 0e00 	mov.w	lr, #0
  40849c:	3c01      	subs	r4, #1
  40849e:	e690      	b.n	4081c2 <__aeabi_dmul+0xde>
  4084a0:	ea45 0e06 	orr.w	lr, r5, r6
  4084a4:	e68d      	b.n	4081c2 <__aeabi_dmul+0xde>
  4084a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4084aa:	ea94 0f0c 	teq	r4, ip
  4084ae:	bf08      	it	eq
  4084b0:	ea95 0f0c 	teqeq	r5, ip
  4084b4:	f43f af3b 	beq.w	40832e <__aeabi_dmul+0x24a>
  4084b8:	ea94 0f0c 	teq	r4, ip
  4084bc:	d10a      	bne.n	4084d4 <__aeabi_ddiv+0x19c>
  4084be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4084c2:	f47f af34 	bne.w	40832e <__aeabi_dmul+0x24a>
  4084c6:	ea95 0f0c 	teq	r5, ip
  4084ca:	f47f af25 	bne.w	408318 <__aeabi_dmul+0x234>
  4084ce:	4610      	mov	r0, r2
  4084d0:	4619      	mov	r1, r3
  4084d2:	e72c      	b.n	40832e <__aeabi_dmul+0x24a>
  4084d4:	ea95 0f0c 	teq	r5, ip
  4084d8:	d106      	bne.n	4084e8 <__aeabi_ddiv+0x1b0>
  4084da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4084de:	f43f aefd 	beq.w	4082dc <__aeabi_dmul+0x1f8>
  4084e2:	4610      	mov	r0, r2
  4084e4:	4619      	mov	r1, r3
  4084e6:	e722      	b.n	40832e <__aeabi_dmul+0x24a>
  4084e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4084ec:	bf18      	it	ne
  4084ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4084f2:	f47f aec5 	bne.w	408280 <__aeabi_dmul+0x19c>
  4084f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4084fa:	f47f af0d 	bne.w	408318 <__aeabi_dmul+0x234>
  4084fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408502:	f47f aeeb 	bne.w	4082dc <__aeabi_dmul+0x1f8>
  408506:	e712      	b.n	40832e <__aeabi_dmul+0x24a>

00408508 <__gedf2>:
  408508:	f04f 3cff 	mov.w	ip, #4294967295
  40850c:	e006      	b.n	40851c <__cmpdf2+0x4>
  40850e:	bf00      	nop

00408510 <__ledf2>:
  408510:	f04f 0c01 	mov.w	ip, #1
  408514:	e002      	b.n	40851c <__cmpdf2+0x4>
  408516:	bf00      	nop

00408518 <__cmpdf2>:
  408518:	f04f 0c01 	mov.w	ip, #1
  40851c:	f84d cd04 	str.w	ip, [sp, #-4]!
  408520:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408528:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40852c:	bf18      	it	ne
  40852e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408532:	d01b      	beq.n	40856c <__cmpdf2+0x54>
  408534:	b001      	add	sp, #4
  408536:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40853a:	bf0c      	ite	eq
  40853c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408540:	ea91 0f03 	teqne	r1, r3
  408544:	bf02      	ittt	eq
  408546:	ea90 0f02 	teqeq	r0, r2
  40854a:	2000      	moveq	r0, #0
  40854c:	4770      	bxeq	lr
  40854e:	f110 0f00 	cmn.w	r0, #0
  408552:	ea91 0f03 	teq	r1, r3
  408556:	bf58      	it	pl
  408558:	4299      	cmppl	r1, r3
  40855a:	bf08      	it	eq
  40855c:	4290      	cmpeq	r0, r2
  40855e:	bf2c      	ite	cs
  408560:	17d8      	asrcs	r0, r3, #31
  408562:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408566:	f040 0001 	orr.w	r0, r0, #1
  40856a:	4770      	bx	lr
  40856c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408574:	d102      	bne.n	40857c <__cmpdf2+0x64>
  408576:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40857a:	d107      	bne.n	40858c <__cmpdf2+0x74>
  40857c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408584:	d1d6      	bne.n	408534 <__cmpdf2+0x1c>
  408586:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40858a:	d0d3      	beq.n	408534 <__cmpdf2+0x1c>
  40858c:	f85d 0b04 	ldr.w	r0, [sp], #4
  408590:	4770      	bx	lr
  408592:	bf00      	nop

00408594 <__aeabi_cdrcmple>:
  408594:	4684      	mov	ip, r0
  408596:	4610      	mov	r0, r2
  408598:	4662      	mov	r2, ip
  40859a:	468c      	mov	ip, r1
  40859c:	4619      	mov	r1, r3
  40859e:	4663      	mov	r3, ip
  4085a0:	e000      	b.n	4085a4 <__aeabi_cdcmpeq>
  4085a2:	bf00      	nop

004085a4 <__aeabi_cdcmpeq>:
  4085a4:	b501      	push	{r0, lr}
  4085a6:	f7ff ffb7 	bl	408518 <__cmpdf2>
  4085aa:	2800      	cmp	r0, #0
  4085ac:	bf48      	it	mi
  4085ae:	f110 0f00 	cmnmi.w	r0, #0
  4085b2:	bd01      	pop	{r0, pc}

004085b4 <__aeabi_dcmpeq>:
  4085b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4085b8:	f7ff fff4 	bl	4085a4 <__aeabi_cdcmpeq>
  4085bc:	bf0c      	ite	eq
  4085be:	2001      	moveq	r0, #1
  4085c0:	2000      	movne	r0, #0
  4085c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4085c6:	bf00      	nop

004085c8 <__aeabi_dcmplt>:
  4085c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4085cc:	f7ff ffea 	bl	4085a4 <__aeabi_cdcmpeq>
  4085d0:	bf34      	ite	cc
  4085d2:	2001      	movcc	r0, #1
  4085d4:	2000      	movcs	r0, #0
  4085d6:	f85d fb08 	ldr.w	pc, [sp], #8
  4085da:	bf00      	nop

004085dc <__aeabi_dcmple>:
  4085dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4085e0:	f7ff ffe0 	bl	4085a4 <__aeabi_cdcmpeq>
  4085e4:	bf94      	ite	ls
  4085e6:	2001      	movls	r0, #1
  4085e8:	2000      	movhi	r0, #0
  4085ea:	f85d fb08 	ldr.w	pc, [sp], #8
  4085ee:	bf00      	nop

004085f0 <__aeabi_dcmpge>:
  4085f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4085f4:	f7ff ffce 	bl	408594 <__aeabi_cdrcmple>
  4085f8:	bf94      	ite	ls
  4085fa:	2001      	movls	r0, #1
  4085fc:	2000      	movhi	r0, #0
  4085fe:	f85d fb08 	ldr.w	pc, [sp], #8
  408602:	bf00      	nop

00408604 <__aeabi_dcmpgt>:
  408604:	f84d ed08 	str.w	lr, [sp, #-8]!
  408608:	f7ff ffc4 	bl	408594 <__aeabi_cdrcmple>
  40860c:	bf34      	ite	cc
  40860e:	2001      	movcc	r0, #1
  408610:	2000      	movcs	r0, #0
  408612:	f85d fb08 	ldr.w	pc, [sp], #8
  408616:	bf00      	nop

00408618 <__aeabi_dcmpun>:
  408618:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40861c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408620:	d102      	bne.n	408628 <__aeabi_dcmpun+0x10>
  408622:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408626:	d10a      	bne.n	40863e <__aeabi_dcmpun+0x26>
  408628:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40862c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408630:	d102      	bne.n	408638 <__aeabi_dcmpun+0x20>
  408632:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408636:	d102      	bne.n	40863e <__aeabi_dcmpun+0x26>
  408638:	f04f 0000 	mov.w	r0, #0
  40863c:	4770      	bx	lr
  40863e:	f04f 0001 	mov.w	r0, #1
  408642:	4770      	bx	lr

00408644 <__aeabi_d2iz>:
  408644:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408648:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40864c:	d215      	bcs.n	40867a <__aeabi_d2iz+0x36>
  40864e:	d511      	bpl.n	408674 <__aeabi_d2iz+0x30>
  408650:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408654:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408658:	d912      	bls.n	408680 <__aeabi_d2iz+0x3c>
  40865a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40865e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408662:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408666:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40866a:	fa23 f002 	lsr.w	r0, r3, r2
  40866e:	bf18      	it	ne
  408670:	4240      	negne	r0, r0
  408672:	4770      	bx	lr
  408674:	f04f 0000 	mov.w	r0, #0
  408678:	4770      	bx	lr
  40867a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40867e:	d105      	bne.n	40868c <__aeabi_d2iz+0x48>
  408680:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408684:	bf08      	it	eq
  408686:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40868a:	4770      	bx	lr
  40868c:	f04f 0000 	mov.w	r0, #0
  408690:	4770      	bx	lr
  408692:	bf00      	nop
  408694:	656c6946 	.word	0x656c6946
  408698:	65726320 	.word	0x65726320
  40869c:	64657461 	.word	0x64657461
  4086a0:	00000000 	.word	0x00000000
  4086a4:	656c6946 	.word	0x656c6946
  4086a8:	6c656420 	.word	0x6c656420
  4086ac:	64657465 	.word	0x64657465
  4086b0:	00000000 	.word	0x00000000
  4086b4:	6e6b6e55 	.word	0x6e6b6e55
  4086b8:	206e776f 	.word	0x206e776f
  4086bc:	6d6d6f63 	.word	0x6d6d6f63
  4086c0:	00646e61 	.word	0x00646e61
  4086c4:	6d6d6f43 	.word	0x6d6d6f43
  4086c8:	20646e61 	.word	0x20646e61
  4086cc:	6c696166 	.word	0x6c696166
  4086d0:	00006465 	.word	0x00006465
  4086d4:	656c6946 	.word	0x656c6946
  4086d8:	746f6e20 	.word	0x746f6e20
  4086dc:	756f6620 	.word	0x756f6620
  4086e0:	0000646e 	.word	0x0000646e
  4086e4:	63637553 	.word	0x63637553
  4086e8:	00737365 	.word	0x00737365
  4086ec:	70206e49 	.word	0x70206e49
  4086f0:	72676f72 	.word	0x72676f72
  4086f4:	00737365 	.word	0x00737365
  4086f8:	656e6f4e 	.word	0x656e6f4e
  4086fc:	00000000 	.word	0x00000000
  408700:	20746553 	.word	0x20746553
  408704:	00004b4f 	.word	0x00004b4f
  408708:	544e455a 	.word	0x544e455a
  40870c:	00004952 	.word	0x00004952
  408710:	00302c30 	.word	0x00302c30
  408714:	0001c200 	.word	0x0001c200
  408718:	000000c0 	.word	0x000000c0
  40871c:	00000800 	.word	0x00000800
	...
  40872c:	75746573 	.word	0x75746573
  408730:	65772070 	.word	0x65772070
  408734:	000a0d62 	.word	0x000a0d62
  408738:	20656466 	.word	0x20656466
  40873c:	2e676d69 	.word	0x2e676d69
  408740:	0d67706a 	.word	0x0d67706a
  408744:	0000000a 	.word	0x0000000a
  408748:	20726366 	.word	0x20726366
  40874c:	2e676d69 	.word	0x2e676d69
  408750:	2067706a 	.word	0x2067706a
  408754:	0a0d6425 	.word	0x0a0d6425
  408758:	00000000 	.word	0x00000000
  40875c:	6c6c6f70 	.word	0x6c6c6f70
  408760:	6c6c6120 	.word	0x6c6c6120
  408764:	00000a0d 	.word	0x00000a0d
  408768:	65727473 	.word	0x65727473
  40876c:	775f6d61 	.word	0x775f6d61
  408770:	65746972 	.word	0x65746972
  408774:	31203020 	.word	0x31203020
  408778:	00200a0d 	.word	0x00200a0d

0040877c <OV2640_JPEG_INIT>:
  40877c:	ff2c00ff 01ffdf2e 0311323c 28040209     ..,.....<2.....(
  40878c:	4814e513 78330c2c fb3b333a 1143003e     ...H,.3x:3;.>.C.
  40879c:	92391016 1a22da35 0023c337 1a36c034     ..9.5.".7.#.4.6.
  4087ac:	c0078806 410e870d 0048004c 0342005b     .......AL.H.[.B.
  4087bc:	9921814a 38254024 005c8226 70610063     J.!.$@%8&.\.c.ap
  4087cc:	057c8062 30288020 806d006c 0270006e     b.|. .(0l.m.n.p.
  4087dc:	c1739471 11174012 00194318 09324b1a     q.s..@...C...K2.
  4087ec:	604fc037 006da850 3f46383d 3c0c604f     7.O`P.m.=8F?O`.<
  4087fc:	7fe500ff 2441c0f9 ff7614e0 2042a033     ......A$..v.3.B 
  40880c:	004c1843 3f88d587 10d903d7 08c882d3     C.L....?........
  40881c:	007c80c9 037c007d 487d487d 207d087c     ..|.}.|.}H}H|.} 
  40882c:	0e7d107d 0e910090 31911a91 69915a91     }.}........1.Z.i
  40883c:	7e917591 8f918891 a3919691 c491af91     .u.~............
  40884c:	e891d791 00922091 e3930693 05930593     ..... ..........
  40885c:	04930093 00930093 00930093 00930093     ................
  40886c:	00960093 19970897 0c970297 30972497     .............$.0
  40887c:	26972897 98970297 00978097 edc30097     .(.&............
  40888c:	00a800a4 51c611c5 10c780bf a5b866b6     .......Q.....f..
  40889c:	7cb964b7 97b4afb3 c5b0ffb5 0fb294b1     .d.|............
  4088ac:	64c05cc4 008c4bc1 00503d86 9652c851     .\.d.K...=P.Q.R.
  4088bc:	00540053 c85a0055 005c965b edc300d3     S.T.U.Z.[.\.....
  4088cc:	00da007f 67e11fe5 7fdd00e0 40120005     .......g.......@
  4088dc:	16c004d3 008c12c1 00503d86 24522c51     .........=P.Q,R$
  4088ec:	00540053 2c5a0055 005c245b 0000ffff     S.T.U.Z,[$\.....

004088fc <OV2640_YUV422>:
  4088fc:	000500ff 03d710da 803300df 77e1403c     ..........3.<@.w
  40890c:	ffff0000                                ....

00408910 <OV2640_JPEG>:
  408910:	77e114e0 03d71fe5 00e010da 080401ff     ...w............
  408920:	0000ffff                                ....

00408924 <OV2640_JPEG_320x240>:
  408924:	401201ff 43181117 4b1a0019 ca4f0932     ...@...C...K2.O.
  408934:	235aa850 1239006d 1a22da35 0023c337     P.Z#m.9.5.".7.#.
  408944:	1a36c034 c0078806 410e870d 00ff004c     4.6........AL...
  408954:	64c004e0 35864bc1 c8518950 00539652     ...d.K.5P.Q.R.S.
  408964:	00550054 505a0057 005c3c5b ffff00e0     T.U.W.ZP[<\.....

00408974 <OV2640_JPEG_640x480>:
  408974:	011101ff 11170012 36327518 971a0119     .........u26....
  408984:	40370f03 9c50bb4f 806d575a 0239343d     ..7@O.P.ZWm.=49.
  408994:	0a228835 a0344037 b70d0206 00ff010e     5.".7@4.........
  4089a4:	c8c004e0 3d8696c1 90518950 00532c52     .......=P.Q.R,S.
  4089b4:	88550054 a05a0057 005c785b 00e004d3     T.U.W.Z.[x\.....
  4089c4:	0000ffff                                ....

004089c8 <OV2640_JPEG_800x600>:
  4089c8:	011101ff 11170012 36327518 971a0119     .........u26....
  4089d8:	40370f03 9c50bb4f 806d575a 0239343d     ..7@O.P.ZWm.=49.
  4089e8:	0a228835 a0344037 b70d0206 00ff010e     5.".7@4.........
  4089f8:	c8c004e0 358696c1 90518950 00532c52     .......5P.Q.R,S.
  408a08:	88550054 c85a0057 005c965b 00e002d3     T.U.W.Z.[.\.....
  408a18:	0000ffff                                ....

00408a1c <OV2640_JPEG_1024x768>:
  408a1c:	011101ff 11170012 36327518 971a0119     .........u26....
  408a2c:	40370f03 9c50bb4f 806d575a 0239343d     ..7@O.P.ZWm.=49.
  408a3c:	0a228835 a0344037 b70d0206 00ff010e     5.".7@4.........
  408a4c:	96c1c8c0 3d86008c 90510050 00532c52     .......=P.Q.R,S.
  408a5c:	88550054 c05b005a 02d3015c 0000ffff     T.U.Z.[.\.......

00408a6c <OV2640_JPEG_1280x1024>:
  408a6c:	011101ff 11170012 36327518 971a0119     .........u26....
  408a7c:	40370f03 9c50bb4f 806d575a 0239343d     ..7@O.P.ZWm.=49.
  408a8c:	0a228835 a0344037 b70d0206 00ff010e     5.".7@4.........
  408a9c:	c8c004e0 3d8696c1 90510050 00532c52     .......=P.Q.R,S.
  408aac:	88550054 405a0057 015cf05b 00e002d3     T.U.W.Z@[.\.....
  408abc:	0000ffff                                ....

00408ac0 <OV2640_JPEG_1600x1200>:
  408ac0:	011101ff 11170012 36327518 971a0119     .........u26....
  408ad0:	40370f03 9c50bb4f 806d575a 0239343d     ..7@O.P.ZWm.=49.
  408ae0:	0a228835 a0344037 b70d0206 00ff010e     5.".7@4.........
  408af0:	c8c004e0 3d8696c1 90510050 00532c52     .......=P.Q.R,S.
  408b00:	88550054 905a0057 055c2c5b 00e002d3     T.U.W.Z.[,\.....
  408b10:	0000ffff                                ....

00408b14 <OV2640_QVGA_YUV422_10FPS>:
  408b14:	8012000e 001305fe 00120511 d40c10d5     ................
  408b24:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  408b34:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  408b44:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  408b54:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  408b64:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  408b74:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  408b84:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  408b94:	32823f81 11380183 03860085 05880187     .?.2..8.........
  408ba4:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  408bb4:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  408bc4:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  408bd4:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  408be4:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  408bf4:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00408c04 <OV2640_QVGA_YUV422_15FPS>:
  408c04:	8012000e 001305fe 00120311 d40c10d5     ................
  408c14:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  408c24:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  408c34:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  408c44:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  408c54:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  408c64:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  408c74:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  408c84:	32823f81 11380183 03860085 05880187     .?.2..8.........
  408c94:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  408ca4:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  408cb4:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  408cc4:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  408cd4:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  408ce4:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00408cf4 <OV2640_QVGA_YUV422_20FPS>:
  408cf4:	8012000e 001305fe 00120211 d40c10d5     ................
  408d04:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  408d14:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  408d24:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  408d34:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  408d44:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  408d54:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  408d64:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  408d74:	32823f81 11380183 03860085 05880187     .?.2..8.........
  408d84:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  408d94:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  408da4:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  408db4:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  408dc4:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  408dd4:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00408de4 <OV2640_QVGA_YUV422_30FPS>:
  408de4:	8012000e 001305fe 00120111 d40c10d5     ................
  408df4:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  408e04:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  408e14:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  408e24:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  408e34:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  408e44:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  408e54:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  408e64:	32823f81 11380183 03860085 05880187     .?.2..8.........
  408e74:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  408e84:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  408e94:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  408ea4:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  408eb4:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  408ec4:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00408ed4 <OV2640_QVGA_RGB888>:
  408ed4:	8012000e 01110013 10d50012 340d120c     ...............4
  408ee4:	a0182517 f01a0319 0322891b f82b1829     .%........".).+.
  408ef4:	a031012c c433f032 3f36b43a 80276004     ,.1.2.3.:.6?.`'.
  408f04:	803e0f3d 7f40403f 29426a41 4145e544     =.>.?@@.AjB)D.EA
  408f14:	64490247 704ba14a 504d1a4c 0064134e     G.IdJ.KpL.MPN.d.
  408f24:	1a688867 3c243814 72263025 7e519750     g.h..8$<%0&rP.Q~
  408f34:	00530052 23210020 00e91438 ff575556     R.S. .!#8...VUW.
  408f44:	ff59ff58 00ec045f 7f80ff13 32823f81     X.Y._........?.2
  408f54:	11380183 00857084 01870386 30890588     ..8..p.........0
  408f64:	858f308d 85953093 859b3099 129d089c     .0...0...0......
  408f74:	459f239e 64a155a0 7fa372a2 95a58ba4     .#.E.U.d.r......
  408f84:	b5a7a7a6 dda9cba8 1aabecaa 6ecf78ce     .............x.n
  408f94:	0cd10ad0 90d384d2 245a1ed4 885c1f5b     ..........Z$[.\.
  408fa4:	6eac605d 00bfffbe 78325031 01123f82     ]`.n....1P2x.?..
  408fb4:	04832f36 f4330053 03228a1b 00840084     6/..S.3...".....
  408fc4:	ffff0228                                (...

00408fc8 <OV2640_QQVGA_YUV422>:
  408fc8:	8012000e 01110013 10d50012 340d540c     .............T.4
  408fd8:	25170116 0319a018 891bf01a 18290322     ...%........".).
  408fe8:	012cf82b f032a031 b43ac433 60043f36     +.,.1.2.3.:.6?.`
  408ff8:	0f3d8027 403f803e 6a417f40 e5442942     '.=.>.?@@.AjB)D.
  409008:	02474145 a14a6449 1a4c704b 134e504d     EAG.IdJ.KpL.MPN.
  409018:	88670064 38141a68 30253c24 97507226     d.g.h..8$<%0&rP.
  409028:	00527e51 00200053 14382321 555600e9     Q~R.S. .!#8...VU
  409038:	ff58ff57 045fff59 ff1300ec 3f817f80     W.X.Y._........?
  409048:	01833282 70841138 03860085 05880187     .2..8..p........
  409058:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  409068:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  409078:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  409088:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  409098:	605d885c ffbe6eac 283100bf 00343c32     \.]`.n....1(2<4.
  4090a8:	00123f82 00533f36 891b0033 02280322     .?..6?S.3...".(.
  4090b8:	ffff00d9                                ....

004090bc <OV2640_QQVGA_RGB888>:
  4090bc:	8012000e 01110013 10d50012 340d120c     ...............4
  4090cc:	a0182517 f01a0319 0322891b f82b1829     .%........".).+.
  4090dc:	a031012c c433f032 3f36b43a 80276004     ,.1.2.3.:.6?.`'.
  4090ec:	803e0f3d 7f40403f 29426a41 4145e544     =.>.?@@.AjB)D.EA
  4090fc:	64490247 704ba14a 504d1a4c 0064134e     G.IdJ.KpL.MPN.d.
  40910c:	1a688867 3c243814 72263025 7e519750     g.h..8$<%0&rP.Q~
  40911c:	00530052 23210020 00e91438 ff575556     R.S. .!#8...VUW.
  40912c:	ff59ff58 00ec045f 7f80ff13 32823f81     X.Y._........?.2
  40913c:	11380183 00857084 01870386 30890588     ..8..p.........0
  40914c:	858f308d 85953093 859b3099 129d089c     .0...0...0......
  40915c:	459f239e 64a155a0 7fa372a2 95a58ba4     .#.E.U.d.r......
  40916c:	b5a7a7a6 dda9cba8 1aabecaa 6ecf78ce     .............x.n
  40917c:	0cd10ad0 90d384d2 245a1ed4 885c1f5b     ..........Z$[.\.
  40918c:	6eac605d 00bfffbe 3c322831 01123f82     ]`.n....1(2<.?..
  40919c:	04832f36 f4330053 03228a1b 00840084     6/..S.3...".....
  4091ac:	ffff0228                                (...

004091b0 <OV2640_TEST_PATTERN>:
  4091b0:	8012000e 001305fe 00120211 d40c10d5     ................
  4091c0:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  4091d0:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  4091e0:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  4091f0:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  409200:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  409210:	7e519750 00530052 23210020 02840738     P.Q~R.S. .!#8...
  409220:	00e91438 ff575556 ff59ff58 00ec045f     8...VUW.X.Y._...
  409230:	7f80ff13 32823f81 11380183 03860085     .....?.2..8.....
  409240:	05880187 308d3089 3093858f 30998595     .....0.0...0...0
  409250:	089c859b 239e129d 55a0459f 72a264a1     .......#.E.U.d.r
  409260:	8ba47fa3 a7a695a5 cba8b5a7 ecaadda9     ................
  409270:	78ce1aab 0ad06ecf 84d20cd1 1ed490d3     ...x.n..........
  409280:	1f5b245a 605d885c ffbe6eac 503100bf     Z$[.\.]`.n....1P
  409290:	3f827832 3f360012 c4330053 0322891b     2x.?..6?S.3...".
  4092a0:	ffff0228                                (...

004092a4 <OV2640_VGA_YUV422_20FPS>:
  4092a4:	8012000e 001305fe 00120211 d40c10d5     ................
  4092b4:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  4092c4:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  4092d4:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  4092e4:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  4092f4:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  409304:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  409314:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  409324:	32823f81 11380183 03860085 05880187     .?.2..8.........
  409334:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  409344:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  409354:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  409364:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  409374:	605d885c ffbe6eac a03100bf 3f82f032     \.]`.n....1.2..?
  409384:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...
  409394:	00000043                                C...

00409398 <_global_impure_ptr>:
  409398:	20000010                                ... 

0040939c <zeroes.7035>:
  40939c:	30303030 30303030 30303030 30303030     0000000000000000
  4093ac:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  4093bc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  4093cc:	00000000 33323130 37363534 62613938     ....0123456789ab
  4093dc:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  4093ec:	00000030                                0...

004093f0 <blanks.7034>:
  4093f0:	20202020 20202020 20202020 20202020                     
  409400:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  409410:	49534f50 00000058 0000002e 00000000     POSIX...........

00409420 <__mprec_tens>:
  409420:	00000000 3ff00000 00000000 40240000     .......?......$@
  409430:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  409440:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  409450:	00000000 412e8480 00000000 416312d0     .......A......cA
  409460:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  409470:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  409480:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  409490:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  4094a0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  4094b0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  4094c0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  4094d0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4094e0:	79d99db4 44ea7843                       ...yCx.D

004094e8 <__mprec_bigtens>:
  4094e8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4094f8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  409508:	7f73bf3c 75154fdd                       <.s..O.u

00409510 <p05.5373>:
  409510:	00000005 00000019 0000007d              ........}...

0040951c <_init>:
  40951c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40951e:	bf00      	nop
  409520:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409522:	bc08      	pop	{r3}
  409524:	469e      	mov	lr, r3
  409526:	4770      	bx	lr

00409528 <__init_array_start>:
  409528:	004054b9 	.word	0x004054b9

0040952c <__frame_dummy_init_array_entry>:
  40952c:	004000f1                                ..@.

00409530 <_fini>:
  409530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409532:	bf00      	nop
  409534:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409536:	bc08      	pop	{r3}
  409538:	469e      	mov	lr, r3
  40953a:	4770      	bx	lr

0040953c <__fini_array_start>:
  40953c:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
20000044:	9394 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <_impure_ptr>:
20000438:	0010 2000                                   ... 

2000043c <lconv>:
2000043c:	9418 0040 93cc 0040 93cc 0040 93cc 0040     ..@...@...@...@.
2000044c:	93cc 0040 93cc 0040 93cc 0040 93cc 0040     ..@...@...@...@.
2000045c:	93cc 0040 93cc 0040 ffff ffff ffff ffff     ..@...@.........
2000046c:	ffff ffff ffff 0000                         ........

20000474 <__malloc_av_>:
	...
2000047c:	0474 2000 0474 2000 047c 2000 047c 2000     t.. t.. |.. |.. 
2000048c:	0484 2000 0484 2000 048c 2000 048c 2000     ... ... ... ... 
2000049c:	0494 2000 0494 2000 049c 2000 049c 2000     ... ... ... ... 
200004ac:	04a4 2000 04a4 2000 04ac 2000 04ac 2000     ... ... ... ... 
200004bc:	04b4 2000 04b4 2000 04bc 2000 04bc 2000     ... ... ... ... 
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 
2000084c:	0844 2000 0844 2000 084c 2000 084c 2000     D.. D.. L.. L.. 
2000085c:	0854 2000 0854 2000 085c 2000 085c 2000     T.. T.. \.. \.. 
2000086c:	0864 2000 0864 2000 086c 2000 086c 2000     d.. d.. l.. l.. 

2000087c <__malloc_trim_threshold>:
2000087c:	0000 0002                                   ....

20000880 <__malloc_sbrk_base>:
20000880:	ffff ffff                                   ....
